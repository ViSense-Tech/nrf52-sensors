
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 1f 00 20 19 3e 00 00 19 a6 00 00 ed 3d 00 00     ... .>.......=..
  10:	ed 3d 00 00 ed 3d 00 00 ed 3d 00 00 00 00 00 00     .=...=...=......
	...
  2c:	7d 36 00 00 ed 3d 00 00 00 00 00 00 29 36 00 00     }6...=......)6..
  3c:	ed 3d 00 00                                         .=..

00000040 <_irq_vector_table>:
  40:	2d 37 00 00 2d 37 00 00 2d 37 00 00 2d 37 00 00     -7..-7..-7..-7..
  50:	2d 37 00 00 2d 37 00 00 2d 37 00 00 2d 37 00 00     -7..-7..-7..-7..
  60:	2d 37 00 00 2d 37 00 00 2d 37 00 00 2d 37 00 00     -7..-7..-7..-7..
  70:	2d 37 00 00 2d 37 00 00 2d 37 00 00 2d 37 00 00     -7..-7..-7..-7..
  80:	2d 37 00 00 2d 37 00 00 2d 37 00 00 2d 37 00 00     -7..-7..-7..-7..
  90:	2d 37 00 00 2d 37 00 00 2d 37 00 00 2d 37 00 00     -7..-7..-7..-7..
  a0:	2d 37 00 00 2d 37 00 00 2d 37 00 00 2d 37 00 00     -7..-7..-7..-7..
  b0:	2d 37 00 00 2d 37 00 00 2d 37 00 00 2d 37 00 00     -7..-7..-7..-7..
  c0:	2d 37 00 00 2d 37 00 00 2d 37 00 00 2d 37 00 00     -7..-7..-7..-7..
  d0:	2d 37 00 00 2d 37 00 00 2d 37 00 00 2d 37 00 00     -7..-7..-7..-7..
  e0:	2d 37 00 00 2d 37 00 00 2d 37 00 00 2d 37 00 00     -7..-7..-7..-7..
  f0:	2d 37 00 00 2d 37 00 00 2d 37 00 00 2d 37 00 00     -7..-7..-7..-7..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <__data_size+0x116>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <__data_size+0x102>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <__data_size+0xe>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <__data_size+0x4c>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <__data_size+0x34>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <__data_size+0x168>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <__data_size+0x34>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <__data_size+0x96>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <__data_size+0x92>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <__data_size+0xac>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <__data_size+0xfa>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <__data_size+0xe2>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <__data_size+0x176>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <__data_size+0x13a>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <__data_size+0x158>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <__data_size+0x60>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <__data_size+0x60>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <__data_size+0x60>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <__data_size+0xe>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <__data_size+0xe>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <__z_interrupt_stack_SIZEOF+0x28>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <__z_interrupt_stack_SIZEOF+0x3c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__aeabi_d2iz>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8a4:	d215      	bcs.n	8d2 <__aeabi_d2iz+0x36>
     8a6:	d511      	bpl.n	8cc <__aeabi_d2iz+0x30>
     8a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8b0:	d912      	bls.n	8d8 <__aeabi_d2iz+0x3c>
     8b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     8ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     8be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     8c2:	fa23 f002 	lsr.w	r0, r3, r2
     8c6:	bf18      	it	ne
     8c8:	4240      	negne	r0, r0
     8ca:	4770      	bx	lr
     8cc:	f04f 0000 	mov.w	r0, #0
     8d0:	4770      	bx	lr
     8d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8d6:	d105      	bne.n	8e4 <__aeabi_d2iz+0x48>
     8d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     8dc:	bf08      	it	eq
     8de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8e2:	4770      	bx	lr
     8e4:	f04f 0000 	mov.w	r0, #0
     8e8:	4770      	bx	lr
     8ea:	bf00      	nop

000008ec <__aeabi_d2f>:
     8ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     8f4:	bf24      	itt	cs
     8f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     8fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     8fe:	d90d      	bls.n	91c <__aeabi_d2f+0x30>
     900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     90c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     914:	bf08      	it	eq
     916:	f020 0001 	biceq.w	r0, r0, #1
     91a:	4770      	bx	lr
     91c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     920:	d121      	bne.n	966 <__aeabi_d2f+0x7a>
     922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     926:	bfbc      	itt	lt
     928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     92c:	4770      	bxlt	lr
     92e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     932:	ea4f 5252 	mov.w	r2, r2, lsr #21
     936:	f1c2 0218 	rsb	r2, r2, #24
     93a:	f1c2 0c20 	rsb	ip, r2, #32
     93e:	fa10 f30c 	lsls.w	r3, r0, ip
     942:	fa20 f002 	lsr.w	r0, r0, r2
     946:	bf18      	it	ne
     948:	f040 0001 	orrne.w	r0, r0, #1
     94c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     954:	fa03 fc0c 	lsl.w	ip, r3, ip
     958:	ea40 000c 	orr.w	r0, r0, ip
     95c:	fa23 f302 	lsr.w	r3, r3, r2
     960:	ea4f 0343 	mov.w	r3, r3, lsl #1
     964:	e7cc      	b.n	900 <__aeabi_d2f+0x14>
     966:	ea7f 5362 	mvns.w	r3, r2, asr #21
     96a:	d107      	bne.n	97c <__aeabi_d2f+0x90>
     96c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     970:	bf1e      	ittt	ne
     972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     97a:	4770      	bxne	lr
     97c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     988:	4770      	bx	lr
     98a:	bf00      	nop

0000098c <__aeabi_frsub>:
     98c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     990:	e002      	b.n	998 <__addsf3>
     992:	bf00      	nop

00000994 <__aeabi_fsub>:
     994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000998 <__addsf3>:
     998:	0042      	lsls	r2, r0, #1
     99a:	bf1f      	itttt	ne
     99c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     9a0:	ea92 0f03 	teqne	r2, r3
     9a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     9a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     9ac:	d06a      	beq.n	a84 <__addsf3+0xec>
     9ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
     9b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     9b6:	bfc1      	itttt	gt
     9b8:	18d2      	addgt	r2, r2, r3
     9ba:	4041      	eorgt	r1, r0
     9bc:	4048      	eorgt	r0, r1
     9be:	4041      	eorgt	r1, r0
     9c0:	bfb8      	it	lt
     9c2:	425b      	neglt	r3, r3
     9c4:	2b19      	cmp	r3, #25
     9c6:	bf88      	it	hi
     9c8:	4770      	bxhi	lr
     9ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     9ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9d6:	bf18      	it	ne
     9d8:	4240      	negne	r0, r0
     9da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     9e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     9e6:	bf18      	it	ne
     9e8:	4249      	negne	r1, r1
     9ea:	ea92 0f03 	teq	r2, r3
     9ee:	d03f      	beq.n	a70 <__addsf3+0xd8>
     9f0:	f1a2 0201 	sub.w	r2, r2, #1
     9f4:	fa41 fc03 	asr.w	ip, r1, r3
     9f8:	eb10 000c 	adds.w	r0, r0, ip
     9fc:	f1c3 0320 	rsb	r3, r3, #32
     a00:	fa01 f103 	lsl.w	r1, r1, r3
     a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     a08:	d502      	bpl.n	a10 <__addsf3+0x78>
     a0a:	4249      	negs	r1, r1
     a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     a14:	d313      	bcc.n	a3e <__addsf3+0xa6>
     a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     a1a:	d306      	bcc.n	a2a <__addsf3+0x92>
     a1c:	0840      	lsrs	r0, r0, #1
     a1e:	ea4f 0131 	mov.w	r1, r1, rrx
     a22:	f102 0201 	add.w	r2, r2, #1
     a26:	2afe      	cmp	r2, #254	; 0xfe
     a28:	d251      	bcs.n	ace <__addsf3+0x136>
     a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     a32:	bf08      	it	eq
     a34:	f020 0001 	biceq.w	r0, r0, #1
     a38:	ea40 0003 	orr.w	r0, r0, r3
     a3c:	4770      	bx	lr
     a3e:	0049      	lsls	r1, r1, #1
     a40:	eb40 0000 	adc.w	r0, r0, r0
     a44:	3a01      	subs	r2, #1
     a46:	bf28      	it	cs
     a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     a4c:	d2ed      	bcs.n	a2a <__addsf3+0x92>
     a4e:	fab0 fc80 	clz	ip, r0
     a52:	f1ac 0c08 	sub.w	ip, ip, #8
     a56:	ebb2 020c 	subs.w	r2, r2, ip
     a5a:	fa00 f00c 	lsl.w	r0, r0, ip
     a5e:	bfaa      	itet	ge
     a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     a64:	4252      	neglt	r2, r2
     a66:	4318      	orrge	r0, r3
     a68:	bfbc      	itt	lt
     a6a:	40d0      	lsrlt	r0, r2
     a6c:	4318      	orrlt	r0, r3
     a6e:	4770      	bx	lr
     a70:	f092 0f00 	teq	r2, #0
     a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     a78:	bf06      	itte	eq
     a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     a7e:	3201      	addeq	r2, #1
     a80:	3b01      	subne	r3, #1
     a82:	e7b5      	b.n	9f0 <__addsf3+0x58>
     a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     a8c:	bf18      	it	ne
     a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a92:	d021      	beq.n	ad8 <__addsf3+0x140>
     a94:	ea92 0f03 	teq	r2, r3
     a98:	d004      	beq.n	aa4 <__addsf3+0x10c>
     a9a:	f092 0f00 	teq	r2, #0
     a9e:	bf08      	it	eq
     aa0:	4608      	moveq	r0, r1
     aa2:	4770      	bx	lr
     aa4:	ea90 0f01 	teq	r0, r1
     aa8:	bf1c      	itt	ne
     aaa:	2000      	movne	r0, #0
     aac:	4770      	bxne	lr
     aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     ab2:	d104      	bne.n	abe <__addsf3+0x126>
     ab4:	0040      	lsls	r0, r0, #1
     ab6:	bf28      	it	cs
     ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     abc:	4770      	bx	lr
     abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     ac2:	bf3c      	itt	cc
     ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     ac8:	4770      	bxcc	lr
     aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     ad6:	4770      	bx	lr
     ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
     adc:	bf16      	itet	ne
     ade:	4608      	movne	r0, r1
     ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     ae4:	4601      	movne	r1, r0
     ae6:	0242      	lsls	r2, r0, #9
     ae8:	bf06      	itte	eq
     aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     aee:	ea90 0f01 	teqeq	r0, r1
     af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     af6:	4770      	bx	lr

00000af8 <__aeabi_ui2f>:
     af8:	f04f 0300 	mov.w	r3, #0
     afc:	e004      	b.n	b08 <__aeabi_i2f+0x8>
     afe:	bf00      	nop

00000b00 <__aeabi_i2f>:
     b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     b04:	bf48      	it	mi
     b06:	4240      	negmi	r0, r0
     b08:	ea5f 0c00 	movs.w	ip, r0
     b0c:	bf08      	it	eq
     b0e:	4770      	bxeq	lr
     b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     b14:	4601      	mov	r1, r0
     b16:	f04f 0000 	mov.w	r0, #0
     b1a:	e01c      	b.n	b56 <__aeabi_l2f+0x2a>

00000b1c <__aeabi_ul2f>:
     b1c:	ea50 0201 	orrs.w	r2, r0, r1
     b20:	bf08      	it	eq
     b22:	4770      	bxeq	lr
     b24:	f04f 0300 	mov.w	r3, #0
     b28:	e00a      	b.n	b40 <__aeabi_l2f+0x14>
     b2a:	bf00      	nop

00000b2c <__aeabi_l2f>:
     b2c:	ea50 0201 	orrs.w	r2, r0, r1
     b30:	bf08      	it	eq
     b32:	4770      	bxeq	lr
     b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     b38:	d502      	bpl.n	b40 <__aeabi_l2f+0x14>
     b3a:	4240      	negs	r0, r0
     b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b40:	ea5f 0c01 	movs.w	ip, r1
     b44:	bf02      	ittt	eq
     b46:	4684      	moveq	ip, r0
     b48:	4601      	moveq	r1, r0
     b4a:	2000      	moveq	r0, #0
     b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     b50:	bf08      	it	eq
     b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     b5a:	fabc f28c 	clz	r2, ip
     b5e:	3a08      	subs	r2, #8
     b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     b64:	db10      	blt.n	b88 <__aeabi_l2f+0x5c>
     b66:	fa01 fc02 	lsl.w	ip, r1, r2
     b6a:	4463      	add	r3, ip
     b6c:	fa00 fc02 	lsl.w	ip, r0, r2
     b70:	f1c2 0220 	rsb	r2, r2, #32
     b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     b78:	fa20 f202 	lsr.w	r2, r0, r2
     b7c:	eb43 0002 	adc.w	r0, r3, r2
     b80:	bf08      	it	eq
     b82:	f020 0001 	biceq.w	r0, r0, #1
     b86:	4770      	bx	lr
     b88:	f102 0220 	add.w	r2, r2, #32
     b8c:	fa01 fc02 	lsl.w	ip, r1, r2
     b90:	f1c2 0220 	rsb	r2, r2, #32
     b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     b98:	fa21 f202 	lsr.w	r2, r1, r2
     b9c:	eb43 0002 	adc.w	r0, r3, r2
     ba0:	bf08      	it	eq
     ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     ba6:	4770      	bx	lr

00000ba8 <__aeabi_fmul>:
     ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
     bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     bb0:	bf1e      	ittt	ne
     bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     bb6:	ea92 0f0c 	teqne	r2, ip
     bba:	ea93 0f0c 	teqne	r3, ip
     bbe:	d06f      	beq.n	ca0 <__aeabi_fmul+0xf8>
     bc0:	441a      	add	r2, r3
     bc2:	ea80 0c01 	eor.w	ip, r0, r1
     bc6:	0240      	lsls	r0, r0, #9
     bc8:	bf18      	it	ne
     bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     bce:	d01e      	beq.n	c0e <__aeabi_fmul+0x66>
     bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     bdc:	fba0 3101 	umull	r3, r1, r0, r1
     be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     be8:	bf3e      	ittt	cc
     bea:	0049      	lslcc	r1, r1, #1
     bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     bf0:	005b      	lslcc	r3, r3, #1
     bf2:	ea40 0001 	orr.w	r0, r0, r1
     bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     bfa:	2afd      	cmp	r2, #253	; 0xfd
     bfc:	d81d      	bhi.n	c3a <__aeabi_fmul+0x92>
     bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     c06:	bf08      	it	eq
     c08:	f020 0001 	biceq.w	r0, r0, #1
     c0c:	4770      	bx	lr
     c0e:	f090 0f00 	teq	r0, #0
     c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     c16:	bf08      	it	eq
     c18:	0249      	lsleq	r1, r1, #9
     c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     c22:	3a7f      	subs	r2, #127	; 0x7f
     c24:	bfc2      	ittt	gt
     c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     c2e:	4770      	bxgt	lr
     c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c34:	f04f 0300 	mov.w	r3, #0
     c38:	3a01      	subs	r2, #1
     c3a:	dc5d      	bgt.n	cf8 <__aeabi_fmul+0x150>
     c3c:	f112 0f19 	cmn.w	r2, #25
     c40:	bfdc      	itt	le
     c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     c46:	4770      	bxle	lr
     c48:	f1c2 0200 	rsb	r2, r2, #0
     c4c:	0041      	lsls	r1, r0, #1
     c4e:	fa21 f102 	lsr.w	r1, r1, r2
     c52:	f1c2 0220 	rsb	r2, r2, #32
     c56:	fa00 fc02 	lsl.w	ip, r0, r2
     c5a:	ea5f 0031 	movs.w	r0, r1, rrx
     c5e:	f140 0000 	adc.w	r0, r0, #0
     c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     c66:	bf08      	it	eq
     c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     c6c:	4770      	bx	lr
     c6e:	f092 0f00 	teq	r2, #0
     c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     c76:	bf02      	ittt	eq
     c78:	0040      	lsleq	r0, r0, #1
     c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     c7e:	3a01      	subeq	r2, #1
     c80:	d0f9      	beq.n	c76 <__aeabi_fmul+0xce>
     c82:	ea40 000c 	orr.w	r0, r0, ip
     c86:	f093 0f00 	teq	r3, #0
     c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     c8e:	bf02      	ittt	eq
     c90:	0049      	lsleq	r1, r1, #1
     c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     c96:	3b01      	subeq	r3, #1
     c98:	d0f9      	beq.n	c8e <__aeabi_fmul+0xe6>
     c9a:	ea41 010c 	orr.w	r1, r1, ip
     c9e:	e78f      	b.n	bc0 <__aeabi_fmul+0x18>
     ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     ca4:	ea92 0f0c 	teq	r2, ip
     ca8:	bf18      	it	ne
     caa:	ea93 0f0c 	teqne	r3, ip
     cae:	d00a      	beq.n	cc6 <__aeabi_fmul+0x11e>
     cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     cb4:	bf18      	it	ne
     cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     cba:	d1d8      	bne.n	c6e <__aeabi_fmul+0xc6>
     cbc:	ea80 0001 	eor.w	r0, r0, r1
     cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     cc4:	4770      	bx	lr
     cc6:	f090 0f00 	teq	r0, #0
     cca:	bf17      	itett	ne
     ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     cd0:	4608      	moveq	r0, r1
     cd2:	f091 0f00 	teqne	r1, #0
     cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     cda:	d014      	beq.n	d06 <__aeabi_fmul+0x15e>
     cdc:	ea92 0f0c 	teq	r2, ip
     ce0:	d101      	bne.n	ce6 <__aeabi_fmul+0x13e>
     ce2:	0242      	lsls	r2, r0, #9
     ce4:	d10f      	bne.n	d06 <__aeabi_fmul+0x15e>
     ce6:	ea93 0f0c 	teq	r3, ip
     cea:	d103      	bne.n	cf4 <__aeabi_fmul+0x14c>
     cec:	024b      	lsls	r3, r1, #9
     cee:	bf18      	it	ne
     cf0:	4608      	movne	r0, r1
     cf2:	d108      	bne.n	d06 <__aeabi_fmul+0x15e>
     cf4:	ea80 0001 	eor.w	r0, r0, r1
     cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d04:	4770      	bx	lr
     d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     d0e:	4770      	bx	lr

00000d10 <__aeabi_fdiv>:
     d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d18:	bf1e      	ittt	ne
     d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d1e:	ea92 0f0c 	teqne	r2, ip
     d22:	ea93 0f0c 	teqne	r3, ip
     d26:	d069      	beq.n	dfc <__aeabi_fdiv+0xec>
     d28:	eba2 0203 	sub.w	r2, r2, r3
     d2c:	ea80 0c01 	eor.w	ip, r0, r1
     d30:	0249      	lsls	r1, r1, #9
     d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
     d36:	d037      	beq.n	da8 <__aeabi_fdiv+0x98>
     d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d48:	428b      	cmp	r3, r1
     d4a:	bf38      	it	cc
     d4c:	005b      	lslcc	r3, r3, #1
     d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     d56:	428b      	cmp	r3, r1
     d58:	bf24      	itt	cs
     d5a:	1a5b      	subcs	r3, r3, r1
     d5c:	ea40 000c 	orrcs.w	r0, r0, ip
     d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     d64:	bf24      	itt	cs
     d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     d72:	bf24      	itt	cs
     d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     d80:	bf24      	itt	cs
     d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     d8a:	011b      	lsls	r3, r3, #4
     d8c:	bf18      	it	ne
     d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     d92:	d1e0      	bne.n	d56 <__aeabi_fdiv+0x46>
     d94:	2afd      	cmp	r2, #253	; 0xfd
     d96:	f63f af50 	bhi.w	c3a <__aeabi_fmul+0x92>
     d9a:	428b      	cmp	r3, r1
     d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     da0:	bf08      	it	eq
     da2:	f020 0001 	biceq.w	r0, r0, #1
     da6:	4770      	bx	lr
     da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     db0:	327f      	adds	r2, #127	; 0x7f
     db2:	bfc2      	ittt	gt
     db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     dbc:	4770      	bxgt	lr
     dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     dc2:	f04f 0300 	mov.w	r3, #0
     dc6:	3a01      	subs	r2, #1
     dc8:	e737      	b.n	c3a <__aeabi_fmul+0x92>
     dca:	f092 0f00 	teq	r2, #0
     dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     dd2:	bf02      	ittt	eq
     dd4:	0040      	lsleq	r0, r0, #1
     dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     dda:	3a01      	subeq	r2, #1
     ddc:	d0f9      	beq.n	dd2 <__aeabi_fdiv+0xc2>
     dde:	ea40 000c 	orr.w	r0, r0, ip
     de2:	f093 0f00 	teq	r3, #0
     de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     dea:	bf02      	ittt	eq
     dec:	0049      	lsleq	r1, r1, #1
     dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     df2:	3b01      	subeq	r3, #1
     df4:	d0f9      	beq.n	dea <__aeabi_fdiv+0xda>
     df6:	ea41 010c 	orr.w	r1, r1, ip
     dfa:	e795      	b.n	d28 <__aeabi_fdiv+0x18>
     dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e00:	ea92 0f0c 	teq	r2, ip
     e04:	d108      	bne.n	e18 <__aeabi_fdiv+0x108>
     e06:	0242      	lsls	r2, r0, #9
     e08:	f47f af7d 	bne.w	d06 <__aeabi_fmul+0x15e>
     e0c:	ea93 0f0c 	teq	r3, ip
     e10:	f47f af70 	bne.w	cf4 <__aeabi_fmul+0x14c>
     e14:	4608      	mov	r0, r1
     e16:	e776      	b.n	d06 <__aeabi_fmul+0x15e>
     e18:	ea93 0f0c 	teq	r3, ip
     e1c:	d104      	bne.n	e28 <__aeabi_fdiv+0x118>
     e1e:	024b      	lsls	r3, r1, #9
     e20:	f43f af4c 	beq.w	cbc <__aeabi_fmul+0x114>
     e24:	4608      	mov	r0, r1
     e26:	e76e      	b.n	d06 <__aeabi_fmul+0x15e>
     e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e2c:	bf18      	it	ne
     e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e32:	d1ca      	bne.n	dca <__aeabi_fdiv+0xba>
     e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     e38:	f47f af5c 	bne.w	cf4 <__aeabi_fmul+0x14c>
     e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     e40:	f47f af3c 	bne.w	cbc <__aeabi_fmul+0x114>
     e44:	e75f      	b.n	d06 <__aeabi_fmul+0x15e>
     e46:	bf00      	nop

00000e48 <__aeabi_uldivmod>:
     e48:	b953      	cbnz	r3, e60 <__aeabi_uldivmod+0x18>
     e4a:	b94a      	cbnz	r2, e60 <__aeabi_uldivmod+0x18>
     e4c:	2900      	cmp	r1, #0
     e4e:	bf08      	it	eq
     e50:	2800      	cmpeq	r0, #0
     e52:	bf1c      	itt	ne
     e54:	f04f 31ff 	movne.w	r1, #4294967295
     e58:	f04f 30ff 	movne.w	r0, #4294967295
     e5c:	f000 b80c 	b.w	e78 <__aeabi_idiv0>
     e60:	f1ad 0c08 	sub.w	ip, sp, #8
     e64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     e68:	f000 f808 	bl	e7c <__udivmoddi4>
     e6c:	f8dd e004 	ldr.w	lr, [sp, #4]
     e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     e74:	b004      	add	sp, #16
     e76:	4770      	bx	lr

00000e78 <__aeabi_idiv0>:
     e78:	4770      	bx	lr
     e7a:	bf00      	nop

00000e7c <__udivmoddi4>:
     e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     e80:	4686      	mov	lr, r0
     e82:	468c      	mov	ip, r1
     e84:	4608      	mov	r0, r1
     e86:	9e08      	ldr	r6, [sp, #32]
     e88:	4615      	mov	r5, r2
     e8a:	4674      	mov	r4, lr
     e8c:	4619      	mov	r1, r3
     e8e:	2b00      	cmp	r3, #0
     e90:	f040 80c2 	bne.w	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
     e94:	4285      	cmp	r5, r0
     e96:	fab2 f282 	clz	r2, r2
     e9a:	d945      	bls.n	f28 <__udivmoddi4+0xac>
     e9c:	b14a      	cbz	r2, eb2 <__udivmoddi4+0x36>
     e9e:	f1c2 0320 	rsb	r3, r2, #32
     ea2:	fa00 fc02 	lsl.w	ip, r0, r2
     ea6:	fa2e f303 	lsr.w	r3, lr, r3
     eaa:	4095      	lsls	r5, r2
     eac:	ea43 0c0c 	orr.w	ip, r3, ip
     eb0:	4094      	lsls	r4, r2
     eb2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     eb6:	b2a8      	uxth	r0, r5
     eb8:	fbbc f8fe 	udiv	r8, ip, lr
     ebc:	0c23      	lsrs	r3, r4, #16
     ebe:	fb0e cc18 	mls	ip, lr, r8, ip
     ec2:	fb08 f900 	mul.w	r9, r8, r0
     ec6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     eca:	4599      	cmp	r9, r3
     ecc:	d928      	bls.n	f20 <__udivmoddi4+0xa4>
     ece:	18eb      	adds	r3, r5, r3
     ed0:	f108 37ff 	add.w	r7, r8, #4294967295
     ed4:	d204      	bcs.n	ee0 <__udivmoddi4+0x64>
     ed6:	4599      	cmp	r9, r3
     ed8:	d902      	bls.n	ee0 <__udivmoddi4+0x64>
     eda:	f1a8 0702 	sub.w	r7, r8, #2
     ede:	442b      	add	r3, r5
     ee0:	eba3 0309 	sub.w	r3, r3, r9
     ee4:	b2a4      	uxth	r4, r4
     ee6:	fbb3 fcfe 	udiv	ip, r3, lr
     eea:	fb0e 331c 	mls	r3, lr, ip, r3
     eee:	fb0c f000 	mul.w	r0, ip, r0
     ef2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     ef6:	42a0      	cmp	r0, r4
     ef8:	d914      	bls.n	f24 <__udivmoddi4+0xa8>
     efa:	192c      	adds	r4, r5, r4
     efc:	f10c 33ff 	add.w	r3, ip, #4294967295
     f00:	d204      	bcs.n	f0c <__udivmoddi4+0x90>
     f02:	42a0      	cmp	r0, r4
     f04:	d902      	bls.n	f0c <__udivmoddi4+0x90>
     f06:	f1ac 0302 	sub.w	r3, ip, #2
     f0a:	442c      	add	r4, r5
     f0c:	1a24      	subs	r4, r4, r0
     f0e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     f12:	b11e      	cbz	r6, f1c <__udivmoddi4+0xa0>
     f14:	40d4      	lsrs	r4, r2
     f16:	2300      	movs	r3, #0
     f18:	6034      	str	r4, [r6, #0]
     f1a:	6073      	str	r3, [r6, #4]
     f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f20:	4647      	mov	r7, r8
     f22:	e7dd      	b.n	ee0 <__udivmoddi4+0x64>
     f24:	4663      	mov	r3, ip
     f26:	e7f1      	b.n	f0c <__udivmoddi4+0x90>
     f28:	bb92      	cbnz	r2, f90 <__udivmoddi4+0x114>
     f2a:	1b43      	subs	r3, r0, r5
     f2c:	2101      	movs	r1, #1
     f2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     f32:	b2af      	uxth	r7, r5
     f34:	fbb3 fcfe 	udiv	ip, r3, lr
     f38:	0c20      	lsrs	r0, r4, #16
     f3a:	fb0e 331c 	mls	r3, lr, ip, r3
     f3e:	fb0c f807 	mul.w	r8, ip, r7
     f42:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     f46:	4598      	cmp	r8, r3
     f48:	d962      	bls.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
     f4a:	18eb      	adds	r3, r5, r3
     f4c:	f10c 30ff 	add.w	r0, ip, #4294967295
     f50:	d204      	bcs.n	f5c <__udivmoddi4+0xe0>
     f52:	4598      	cmp	r8, r3
     f54:	d902      	bls.n	f5c <__udivmoddi4+0xe0>
     f56:	f1ac 0002 	sub.w	r0, ip, #2
     f5a:	442b      	add	r3, r5
     f5c:	eba3 0308 	sub.w	r3, r3, r8
     f60:	b2a4      	uxth	r4, r4
     f62:	fbb3 fcfe 	udiv	ip, r3, lr
     f66:	fb0e 331c 	mls	r3, lr, ip, r3
     f6a:	fb0c f707 	mul.w	r7, ip, r7
     f6e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     f72:	42a7      	cmp	r7, r4
     f74:	d94e      	bls.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
     f76:	192c      	adds	r4, r5, r4
     f78:	f10c 33ff 	add.w	r3, ip, #4294967295
     f7c:	d204      	bcs.n	f88 <__udivmoddi4+0x10c>
     f7e:	42a7      	cmp	r7, r4
     f80:	d902      	bls.n	f88 <__udivmoddi4+0x10c>
     f82:	f1ac 0302 	sub.w	r3, ip, #2
     f86:	442c      	add	r4, r5
     f88:	1be4      	subs	r4, r4, r7
     f8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     f8e:	e7c0      	b.n	f12 <__udivmoddi4+0x96>
     f90:	f1c2 0320 	rsb	r3, r2, #32
     f94:	fa20 f103 	lsr.w	r1, r0, r3
     f98:	4095      	lsls	r5, r2
     f9a:	4090      	lsls	r0, r2
     f9c:	fa2e f303 	lsr.w	r3, lr, r3
     fa0:	4303      	orrs	r3, r0
     fa2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     fa6:	b2af      	uxth	r7, r5
     fa8:	fbb1 fcfe 	udiv	ip, r1, lr
     fac:	fb0e 101c 	mls	r0, lr, ip, r1
     fb0:	0c19      	lsrs	r1, r3, #16
     fb2:	fb0c f807 	mul.w	r8, ip, r7
     fb6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     fba:	4588      	cmp	r8, r1
     fbc:	fa04 f402 	lsl.w	r4, r4, r2
     fc0:	d922      	bls.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     fc2:	1869      	adds	r1, r5, r1
     fc4:	f10c 30ff 	add.w	r0, ip, #4294967295
     fc8:	d204      	bcs.n	fd4 <__udivmoddi4+0x158>
     fca:	4588      	cmp	r8, r1
     fcc:	d902      	bls.n	fd4 <__udivmoddi4+0x158>
     fce:	f1ac 0002 	sub.w	r0, ip, #2
     fd2:	4429      	add	r1, r5
     fd4:	eba1 0108 	sub.w	r1, r1, r8
     fd8:	b29b      	uxth	r3, r3
     fda:	fbb1 fcfe 	udiv	ip, r1, lr
     fde:	fb0e 111c 	mls	r1, lr, ip, r1
     fe2:	fb0c f707 	mul.w	r7, ip, r7
     fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     fea:	429f      	cmp	r7, r3
     fec:	d90e      	bls.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
     fee:	18eb      	adds	r3, r5, r3
     ff0:	f10c 31ff 	add.w	r1, ip, #4294967295
     ff4:	d204      	bcs.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
     ff6:	429f      	cmp	r7, r3
     ff8:	d902      	bls.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
     ffa:	f1ac 0102 	sub.w	r1, ip, #2
     ffe:	442b      	add	r3, r5
    1000:	1bdb      	subs	r3, r3, r7
    1002:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1006:	e792      	b.n	f2e <__udivmoddi4+0xb2>
    1008:	4660      	mov	r0, ip
    100a:	e7e3      	b.n	fd4 <__udivmoddi4+0x158>
    100c:	4661      	mov	r1, ip
    100e:	e7f7      	b.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
    1010:	4660      	mov	r0, ip
    1012:	e7a3      	b.n	f5c <__udivmoddi4+0xe0>
    1014:	4663      	mov	r3, ip
    1016:	e7b7      	b.n	f88 <__udivmoddi4+0x10c>
    1018:	4283      	cmp	r3, r0
    101a:	d906      	bls.n	102a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
    101c:	b916      	cbnz	r6, 1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    101e:	2100      	movs	r1, #0
    1020:	4608      	mov	r0, r1
    1022:	e77b      	b.n	f1c <__udivmoddi4+0xa0>
    1024:	e9c6 e000 	strd	lr, r0, [r6]
    1028:	e7f9      	b.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
    102a:	fab3 f783 	clz	r7, r3
    102e:	b98f      	cbnz	r7, 1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    1030:	4283      	cmp	r3, r0
    1032:	d301      	bcc.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
    1034:	4572      	cmp	r2, lr
    1036:	d808      	bhi.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
    1038:	ebbe 0402 	subs.w	r4, lr, r2
    103c:	eb60 0303 	sbc.w	r3, r0, r3
    1040:	2001      	movs	r0, #1
    1042:	469c      	mov	ip, r3
    1044:	b91e      	cbnz	r6, 104e <CONFIG_FPROTECT_BLOCK_SIZE+0x4e>
    1046:	2100      	movs	r1, #0
    1048:	e768      	b.n	f1c <__udivmoddi4+0xa0>
    104a:	4638      	mov	r0, r7
    104c:	e7fa      	b.n	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
    104e:	e9c6 4c00 	strd	r4, ip, [r6]
    1052:	e7f8      	b.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
    1054:	f1c7 0c20 	rsb	ip, r7, #32
    1058:	40bb      	lsls	r3, r7
    105a:	fa22 f40c 	lsr.w	r4, r2, ip
    105e:	431c      	orrs	r4, r3
    1060:	fa2e f10c 	lsr.w	r1, lr, ip
    1064:	fa20 f30c 	lsr.w	r3, r0, ip
    1068:	40b8      	lsls	r0, r7
    106a:	4301      	orrs	r1, r0
    106c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    1070:	fa0e f507 	lsl.w	r5, lr, r7
    1074:	fbb3 f8f9 	udiv	r8, r3, r9
    1078:	fa1f fe84 	uxth.w	lr, r4
    107c:	fb09 3018 	mls	r0, r9, r8, r3
    1080:	0c0b      	lsrs	r3, r1, #16
    1082:	fb08 fa0e 	mul.w	sl, r8, lr
    1086:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    108a:	459a      	cmp	sl, r3
    108c:	fa02 f207 	lsl.w	r2, r2, r7
    1090:	d940      	bls.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
    1092:	18e3      	adds	r3, r4, r3
    1094:	f108 30ff 	add.w	r0, r8, #4294967295
    1098:	d204      	bcs.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    109a:	459a      	cmp	sl, r3
    109c:	d902      	bls.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    109e:	f1a8 0002 	sub.w	r0, r8, #2
    10a2:	4423      	add	r3, r4
    10a4:	eba3 030a 	sub.w	r3, r3, sl
    10a8:	b289      	uxth	r1, r1
    10aa:	fbb3 f8f9 	udiv	r8, r3, r9
    10ae:	fb09 3318 	mls	r3, r9, r8, r3
    10b2:	fb08 fe0e 	mul.w	lr, r8, lr
    10b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    10ba:	458e      	cmp	lr, r1
    10bc:	d92c      	bls.n	1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>
    10be:	1861      	adds	r1, r4, r1
    10c0:	f108 33ff 	add.w	r3, r8, #4294967295
    10c4:	d204      	bcs.n	10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>
    10c6:	458e      	cmp	lr, r1
    10c8:	d902      	bls.n	10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>
    10ca:	f1a8 0302 	sub.w	r3, r8, #2
    10ce:	4421      	add	r1, r4
    10d0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    10d4:	fba0 9802 	umull	r9, r8, r0, r2
    10d8:	eba1 010e 	sub.w	r1, r1, lr
    10dc:	4541      	cmp	r1, r8
    10de:	46ce      	mov	lr, r9
    10e0:	4643      	mov	r3, r8
    10e2:	d302      	bcc.n	10ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
    10e4:	d106      	bne.n	10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
    10e6:	454d      	cmp	r5, r9
    10e8:	d204      	bcs.n	10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
    10ea:	ebb9 0e02 	subs.w	lr, r9, r2
    10ee:	eb68 0304 	sbc.w	r3, r8, r4
    10f2:	3801      	subs	r0, #1
    10f4:	2e00      	cmp	r6, #0
    10f6:	d0a6      	beq.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
    10f8:	ebb5 020e 	subs.w	r2, r5, lr
    10fc:	eb61 0103 	sbc.w	r1, r1, r3
    1100:	fa01 fc0c 	lsl.w	ip, r1, ip
    1104:	fa22 f307 	lsr.w	r3, r2, r7
    1108:	ea4c 0303 	orr.w	r3, ip, r3
    110c:	40f9      	lsrs	r1, r7
    110e:	e9c6 3100 	strd	r3, r1, [r6]
    1112:	e798      	b.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
    1114:	4640      	mov	r0, r8
    1116:	e7c5      	b.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    1118:	4643      	mov	r3, r8
    111a:	e7d9      	b.n	10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>

0000111c <strlen>:
    111c:	4603      	mov	r3, r0
    111e:	f813 2b01 	ldrb.w	r2, [r3], #1
    1122:	2a00      	cmp	r2, #0
    1124:	d1fb      	bne.n	111e <strlen+0x2>
    1126:	1a18      	subs	r0, r3, r0
    1128:	3801      	subs	r0, #1
    112a:	4770      	bx	lr
    112c:	0000      	movs	r0, r0
	...

00001130 <AnalogRead>:
const struct gpio_dt_spec sensor_power_spec = GPIO_DT_SPEC_GET(DT_ALIAS(testpin0), gpios);
const struct gpio_dt_spec sensor_power_spec2 = GPIO_DT_SPEC_GET(DT_ALIAS(testpin1), gpios);


float AnalogRead(int channel)
{
    1130:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t status;
    nrf_saadc_value_t sample_value;

    status = nrfx_saadc_buffer_set(&sample_value, 1);
    1132:	2101      	movs	r1, #1
    1134:	f10d 0006 	add.w	r0, sp, #6
    1138:	f005 ff7e 	bl	7038 <nrfx_saadc_buffer_set>
    NRFX_ASSERT(status == NRFX_SUCCESS);
    113c:	4b1a      	ldr	r3, [pc, #104]	; (11a8 <AnalogRead+0x78>)
    113e:	4298      	cmp	r0, r3
    status = nrfx_saadc_buffer_set(&sample_value, 1);
    1140:	4604      	mov	r4, r0
    NRFX_ASSERT(status == NRFX_SUCCESS);
    1142:	d009      	beq.n	1158 <AnalogRead+0x28>
    1144:	4919      	ldr	r1, [pc, #100]	; (11ac <AnalogRead+0x7c>)
    1146:	4a1a      	ldr	r2, [pc, #104]	; (11b0 <AnalogRead+0x80>)
    1148:	481a      	ldr	r0, [pc, #104]	; (11b4 <AnalogRead+0x84>)
    114a:	2324      	movs	r3, #36	; 0x24
    114c:	f009 f9bb 	bl	a4c6 <assert_print>
    1150:	2124      	movs	r1, #36	; 0x24
    
    status = nrfx_saadc_mode_trigger();
    NRFX_ASSERT(status == NRFX_SUCCESS);
    1152:	4817      	ldr	r0, [pc, #92]	; (11b0 <AnalogRead+0x80>)
    1154:	f009 f9b0 	bl	a4b8 <assert_post_action>
    status = nrfx_saadc_mode_trigger();
    1158:	f005 ffc4 	bl	70e4 <nrfx_saadc_mode_trigger>
    NRFX_ASSERT(status == NRFX_SUCCESS);
    115c:	42a0      	cmp	r0, r4
    115e:	d007      	beq.n	1170 <AnalogRead+0x40>
    1160:	4912      	ldr	r1, [pc, #72]	; (11ac <AnalogRead+0x7c>)
    1162:	4a13      	ldr	r2, [pc, #76]	; (11b0 <AnalogRead+0x80>)
    1164:	4813      	ldr	r0, [pc, #76]	; (11b4 <AnalogRead+0x84>)
    1166:	2327      	movs	r3, #39	; 0x27
    1168:	f009 f9ad 	bl	a4c6 <assert_print>
    116c:	2127      	movs	r1, #39	; 0x27
    116e:	e7f0      	b.n	1152 <AnalogRead+0x22>

    return (float)sample_value / 1023.0 * SupplyV;
    1170:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
    1174:	f7ff fcc4 	bl	b00 <__aeabi_i2f>
    1178:	f7ff f926 	bl	3c8 <__aeabi_f2d>
    117c:	a306      	add	r3, pc, #24	; (adr r3, 1198 <AnalogRead+0x68>)
    117e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1182:	f7ff faa3 	bl	6cc <__aeabi_ddiv>
    1186:	a306      	add	r3, pc, #24	; (adr r3, 11a0 <AnalogRead+0x70>)
    1188:	e9d3 2300 	ldrd	r2, r3, [r3]
    118c:	f7ff f974 	bl	478 <__aeabi_dmul>
    1190:	f7ff fbac 	bl	8ec <__aeabi_d2f>
}
    1194:	b002      	add	sp, #8
    1196:	bd10      	pop	{r4, pc}
    1198:	00000000 	.word	0x00000000
    119c:	408ff800 	.word	0x408ff800
    11a0:	60000000 	.word	0x60000000
    11a4:	400a6666 	.word	0x400a6666
    11a8:	0bad0000 	.word	0x0bad0000
    11ac:	0000b625 	.word	0x0000b625
    11b0:	0000b617 	.word	0x0000b617
    11b4:	0000b53f 	.word	0x0000b53f

000011b8 <analog_read_on_nrf>:

int analog_read_on_nrf(int channel, const struct gpio_dt_spec *excite_pin_spec)
{
    11b8:	b570      	push	{r4, r5, r6, lr}
    11ba:	4605      	mov	r5, r0
    11bc:	460c      	mov	r4, r1
    const struct device *gpio_dev;

    if (!device_is_ready(excite_pin_spec->port)) {
    11be:	6808      	ldr	r0, [r1, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    11c0:	f009 fd09 	bl	abd6 <z_device_is_ready>
    11c4:	6826      	ldr	r6, [r4, #0]
    11c6:	b930      	cbnz	r0, 11d6 <analog_read_on_nrf+0x1e>
        printk("Error: %s device not ready\n", excite_pin_spec->port->name);
    11c8:	4817      	ldr	r0, [pc, #92]	; (1228 <analog_read_on_nrf+0x70>)
    11ca:	6831      	ldr	r1, [r6, #0]
    11cc:	f009 f8dd 	bl	a38a <printk>
        return -1;
    11d0:	f04f 30ff 	mov.w	r0, #4294967295

    gpio_pin_set(gpio_dev, excite_pin_spec->pin, 0);
    k_sleep(K_MSEC(100)); 

    return (voltage / SupplyV) * 1023.0;
}
    11d4:	bd70      	pop	{r4, r5, r6, pc}
    gpio_pin_set(gpio_dev, excite_pin_spec->pin, 1);
    11d6:	7921      	ldrb	r1, [r4, #4]
    11d8:	2201      	movs	r2, #1
    11da:	4630      	mov	r0, r6
    11dc:	f000 f828 	bl	1230 <gpio_pin_set.isra.0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    11e0:	2100      	movs	r1, #0
    11e2:	2003      	movs	r0, #3
    11e4:	f007 ff0e 	bl	9004 <z_impl_k_sleep>
    float voltage = AnalogRead(channel);
    11e8:	4628      	mov	r0, r5
    11ea:	f7ff ffa1 	bl	1130 <AnalogRead>
    gpio_pin_set(gpio_dev, excite_pin_spec->pin, 0);
    11ee:	7921      	ldrb	r1, [r4, #4]
    float voltage = AnalogRead(channel);
    11f0:	4605      	mov	r5, r0
    gpio_pin_set(gpio_dev, excite_pin_spec->pin, 0);
    11f2:	2200      	movs	r2, #0
    11f4:	4630      	mov	r0, r6
    11f6:	f000 f81b 	bl	1230 <gpio_pin_set.isra.0>
    11fa:	2100      	movs	r1, #0
    11fc:	f640 40cd 	movw	r0, #3277	; 0xccd
    1200:	f007 ff00 	bl	9004 <z_impl_k_sleep>
    return (voltage / SupplyV) * 1023.0;
    1204:	4909      	ldr	r1, [pc, #36]	; (122c <analog_read_on_nrf+0x74>)
    1206:	4628      	mov	r0, r5
    1208:	f7ff fd82 	bl	d10 <__aeabi_fdiv>
    120c:	f7ff f8dc 	bl	3c8 <__aeabi_f2d>
    1210:	a303      	add	r3, pc, #12	; (adr r3, 1220 <analog_read_on_nrf+0x68>)
    1212:	e9d3 2300 	ldrd	r2, r3, [r3]
    1216:	f7ff f92f 	bl	478 <__aeabi_dmul>
    121a:	f7ff fb3f 	bl	89c <__aeabi_d2iz>
    121e:	e7d9      	b.n	11d4 <analog_read_on_nrf+0x1c>
    1220:	00000000 	.word	0x00000000
    1224:	408ff800 	.word	0x408ff800
    1228:	0000b63c 	.word	0x0000b63c
    122c:	40533333 	.word	0x40533333

00001230 <gpio_pin_set.isra.0>:
 *
 * @retval 0 If successful.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
    1230:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1232:	2301      	movs	r3, #1
    1234:	fa03 f101 	lsl.w	r1, r3, r1
    1238:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    123a:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    123c:	681b      	ldr	r3, [r3, #0]
    123e:	4219      	tst	r1, r3
    1240:	d10e      	bne.n	1260 <gpio_pin_set.isra.0+0x30>
    1242:	490e      	ldr	r1, [pc, #56]	; (127c <gpio_pin_set.isra.0+0x4c>)
    1244:	4a0e      	ldr	r2, [pc, #56]	; (1280 <gpio_pin_set.isra.0+0x50>)
    1246:	480f      	ldr	r0, [pc, #60]	; (1284 <gpio_pin_set.isra.0+0x54>)
    1248:	f240 535c 	movw	r3, #1372	; 0x55c
    124c:	f009 f93b 	bl	a4c6 <assert_print>
    1250:	480d      	ldr	r0, [pc, #52]	; (1288 <gpio_pin_set.isra.0+0x58>)
    1252:	f009 f938 	bl	a4c6 <assert_print>
    1256:	480a      	ldr	r0, [pc, #40]	; (1280 <gpio_pin_set.isra.0+0x50>)
    1258:	f240 515c 	movw	r1, #1372	; 0x55c
    125c:	f009 f92c 	bl	a4b8 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1260:	6823      	ldr	r3, [r4, #0]
    1262:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    1264:	bf18      	it	ne
    1266:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    126a:	b122      	cbz	r2, 1276 <gpio_pin_set.isra.0+0x46>
	return api->port_set_bits_raw(port, pins);
    126c:	6883      	ldr	r3, [r0, #8]
    126e:	68db      	ldr	r3, [r3, #12]
	}

	return gpio_pin_set_raw(port, pin, value);
}
    1270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
    1274:	4718      	bx	r3
    1276:	6883      	ldr	r3, [r0, #8]
    1278:	691b      	ldr	r3, [r3, #16]
    127a:	e7f9      	b.n	1270 <gpio_pin_set.isra.0+0x40>
    127c:	0000b501 	.word	0x0000b501
    1280:	0000b4d0 	.word	0x0000b4d0
    1284:	0000b53f 	.word	0x0000b53f
    1288:	0000b55c 	.word	0x0000b55c

0000128c <gpio_pin_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    128c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1290:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
    1292:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    1294:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    1296:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
    1298:	f043 0201 	orr.w	r2, r3, #1
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    129c:	f003 0730 	and.w	r7, r3, #48	; 0x30
    12a0:	2f30      	cmp	r7, #48	; 0x30
	__unused const struct gpio_driver_config *const cfg =
    12a2:	e9d0 4601 	ldrd	r4, r6, [r0, #4]
	struct gpio_driver_data *data =
    12a6:	6905      	ldr	r5, [r0, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    12a8:	d10e      	bne.n	12c8 <gpio_pin_configure_dt.constprop.0.isra.0+0x3c>
    12aa:	491b      	ldr	r1, [pc, #108]	; (1318 <gpio_pin_configure_dt.constprop.0.isra.0+0x8c>)
    12ac:	4a1b      	ldr	r2, [pc, #108]	; (131c <gpio_pin_configure_dt.constprop.0.isra.0+0x90>)
    12ae:	481c      	ldr	r0, [pc, #112]	; (1320 <gpio_pin_configure_dt.constprop.0.isra.0+0x94>)
    12b0:	f240 23d7 	movw	r3, #727	; 0x2d7
    12b4:	f009 f907 	bl	a4c6 <assert_print>
    12b8:	481a      	ldr	r0, [pc, #104]	; (1324 <gpio_pin_configure_dt.constprop.0.isra.0+0x98>)
    12ba:	f009 f904 	bl	a4c6 <assert_print>
    12be:	f240 21d7 	movw	r1, #727	; 0x2d7
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    12c2:	4816      	ldr	r0, [pc, #88]	; (131c <gpio_pin_configure_dt.constprop.0.isra.0+0x90>)
    12c4:	f009 f8f8 	bl	a4b8 <assert_post_action>
    12c8:	f003 0306 	and.w	r3, r3, #6
    12cc:	2b04      	cmp	r3, #4
    12ce:	d109      	bne.n	12e4 <gpio_pin_configure_dt.constprop.0.isra.0+0x58>
    12d0:	4915      	ldr	r1, [pc, #84]	; (1328 <gpio_pin_configure_dt.constprop.0.isra.0+0x9c>)
    12d2:	4a12      	ldr	r2, [pc, #72]	; (131c <gpio_pin_configure_dt.constprop.0.isra.0+0x90>)
    12d4:	4812      	ldr	r0, [pc, #72]	; (1320 <gpio_pin_configure_dt.constprop.0.isra.0+0x94>)
    12d6:	f240 23de 	movw	r3, #734	; 0x2de
    12da:	f009 f8f4 	bl	a4c6 <assert_print>
    12de:	f240 21de 	movw	r1, #734	; 0x2de
    12e2:	e7ee      	b.n	12c2 <gpio_pin_configure_dt.constprop.0.isra.0+0x36>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    12e4:	6824      	ldr	r4, [r4, #0]
    12e6:	2301      	movs	r3, #1
    12e8:	408b      	lsls	r3, r1
    12ea:	4223      	tst	r3, r4
    12ec:	d10c      	bne.n	1308 <gpio_pin_configure_dt.constprop.0.isra.0+0x7c>
    12ee:	490f      	ldr	r1, [pc, #60]	; (132c <gpio_pin_configure_dt.constprop.0.isra.0+0xa0>)
    12f0:	4a0a      	ldr	r2, [pc, #40]	; (131c <gpio_pin_configure_dt.constprop.0.isra.0+0x90>)
    12f2:	480b      	ldr	r0, [pc, #44]	; (1320 <gpio_pin_configure_dt.constprop.0.isra.0+0x94>)
    12f4:	f240 23f1 	movw	r3, #753	; 0x2f1
    12f8:	f009 f8e5 	bl	a4c6 <assert_print>
    12fc:	480c      	ldr	r0, [pc, #48]	; (1330 <gpio_pin_configure_dt.constprop.0.isra.0+0xa4>)
    12fe:	f009 f8e2 	bl	a4c6 <assert_print>
    1302:	f240 21f1 	movw	r1, #753	; 0x2f1
    1306:	e7dc      	b.n	12c2 <gpio_pin_configure_dt.constprop.0.isra.0+0x36>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    1308:	682c      	ldr	r4, [r5, #0]
    130a:	431c      	orrs	r4, r3
    130c:	602c      	str	r4, [r5, #0]
	return api->pin_configure(port, pin, flags);
    130e:	6833      	ldr	r3, [r6, #0]
}
    1310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
    1314:	4718      	bx	r3
    1316:	bf00      	nop
    1318:	0000b56e 	.word	0x0000b56e
    131c:	0000b4d0 	.word	0x0000b4d0
    1320:	0000b53f 	.word	0x0000b53f
    1324:	0000b5a7 	.word	0x0000b5a7
    1328:	0000b5e4 	.word	0x0000b5e4
    132c:	0000b501 	.word	0x0000b501
    1330:	0000b55c 	.word	0x0000b55c

00001334 <main>:
void saadc_callback(nrfx_saadc_evt_t const * p_event) {
    // Handle SAADC events here if needed.
}

void main(void)
{
    1334:	b530      	push	{r4, r5, lr}
    nrfx_err_t status;

    status = nrfx_saadc_init(NRFX_SAADC_DEFAULT_CONFIG_IRQ_PRIORITY);
    1336:	2007      	movs	r0, #7
{
    1338:	b085      	sub	sp, #20
    status = nrfx_saadc_init(NRFX_SAADC_DEFAULT_CONFIG_IRQ_PRIORITY);
    133a:	f005 fdb7 	bl	6eac <nrfx_saadc_init>
    NRFX_ASSERT(status == NRFX_SUCCESS);
    133e:	4b30      	ldr	r3, [pc, #192]	; (1400 <main+0xcc>)
    1340:	4298      	cmp	r0, r3
    status = nrfx_saadc_init(NRFX_SAADC_DEFAULT_CONFIG_IRQ_PRIORITY);
    1342:	4605      	mov	r5, r0
    NRFX_ASSERT(status == NRFX_SUCCESS);
    1344:	d009      	beq.n	135a <main+0x26>
    1346:	492f      	ldr	r1, [pc, #188]	; (1404 <main+0xd0>)
    1348:	4a2f      	ldr	r2, [pc, #188]	; (1408 <main+0xd4>)
    134a:	4830      	ldr	r0, [pc, #192]	; (140c <main+0xd8>)
    134c:	2379      	movs	r3, #121	; 0x79
    134e:	f009 f8ba 	bl	a4c6 <assert_print>
    1352:	2179      	movs	r1, #121	; 0x79
        .pin_n             = NRF_SAADC_INPUT_DISABLED,
        .channel_index     = 0
    };

    status = nrfx_saadc_channel_config(&saadc_channel);
    NRFX_ASSERT(status == NRFX_SUCCESS);
    1354:	482c      	ldr	r0, [pc, #176]	; (1408 <main+0xd4>)
    1356:	f009 f8af 	bl	a4b8 <assert_post_action>
    nrfx_saadc_channel_t saadc_channel = {
    135a:	4a2d      	ldr	r2, [pc, #180]	; (1410 <main+0xdc>)
    135c:	6810      	ldr	r0, [r2, #0]
    135e:	6851      	ldr	r1, [r2, #4]
    1360:	8912      	ldrh	r2, [r2, #8]
    1362:	ab01      	add	r3, sp, #4
    1364:	c303      	stmia	r3!, {r0, r1}
    status = nrfx_saadc_channel_config(&saadc_channel);
    1366:	a801      	add	r0, sp, #4
    nrfx_saadc_channel_t saadc_channel = {
    1368:	801a      	strh	r2, [r3, #0]
    status = nrfx_saadc_channel_config(&saadc_channel);
    136a:	f005 fdcd 	bl	6f08 <nrfx_saadc_channel_config>
    NRFX_ASSERT(status == NRFX_SUCCESS);
    136e:	42a8      	cmp	r0, r5
    status = nrfx_saadc_channel_config(&saadc_channel);
    1370:	4604      	mov	r4, r0
    NRFX_ASSERT(status == NRFX_SUCCESS);
    1372:	d007      	beq.n	1384 <main+0x50>
    1374:	4923      	ldr	r1, [pc, #140]	; (1404 <main+0xd0>)
    1376:	4a24      	ldr	r2, [pc, #144]	; (1408 <main+0xd4>)
    1378:	4824      	ldr	r0, [pc, #144]	; (140c <main+0xd8>)
    137a:	238b      	movs	r3, #139	; 0x8b
    137c:	f009 f8a3 	bl	a4c6 <assert_print>
    1380:	218b      	movs	r1, #139	; 0x8b
    1382:	e7e7      	b.n	1354 <main+0x20>
    
    uint32_t channels_mask = nrfx_saadc_channels_configured_get();
    1384:	f005 fdf6 	bl	6f74 <nrfx_saadc_channels_configured_get>
    status = nrfx_saadc_simple_mode_set(channels_mask,
    1388:	2300      	movs	r3, #0
    138a:	461a      	mov	r2, r3
    138c:	2101      	movs	r1, #1
    138e:	f005 fe0d 	bl	6fac <nrfx_saadc_simple_mode_set>
                                        NRF_SAADC_RESOLUTION_10BIT,
                                        NRF_SAADC_OVERSAMPLE_DISABLED,
                                        NULL);
    NRFX_ASSERT(status == NRFX_SUCCESS);
    1392:	42a0      	cmp	r0, r4
    1394:	d007      	beq.n	13a6 <main+0x72>
    1396:	491b      	ldr	r1, [pc, #108]	; (1404 <main+0xd0>)
    1398:	4a1b      	ldr	r2, [pc, #108]	; (1408 <main+0xd4>)
    139a:	481c      	ldr	r0, [pc, #112]	; (140c <main+0xd8>)
    139c:	2392      	movs	r3, #146	; 0x92
    139e:	f009 f892 	bl	a4c6 <assert_print>
    13a2:	2192      	movs	r1, #146	; 0x92
    13a4:	e7d6      	b.n	1354 <main+0x20>


    gpio_pin_configure_dt(&sensor_power_spec, GPIO_ACTIVE_LOW);
    13a6:	481b      	ldr	r0, [pc, #108]	; (1414 <main+0xe0>)
    13a8:	f7ff ff70 	bl	128c <gpio_pin_configure_dt.constprop.0.isra.0>
    gpio_pin_configure_dt(&sensor_power_spec2, GPIO_ACTIVE_LOW);
    13ac:	481a      	ldr	r0, [pc, #104]	; (1418 <main+0xe4>)
    13ae:	f7ff ff6d 	bl	128c <gpio_pin_configure_dt.constprop.0.isra.0>
    13b2:	2100      	movs	r1, #0
    13b4:	f640 40cd 	movw	r0, #3277	; 0xccd
    13b8:	f007 fe24 	bl	9004 <z_impl_k_sleep>
    k_sleep(K_MSEC(100)); 

    printk("Application started!!\n");
    13bc:	4817      	ldr	r0, [pc, #92]	; (141c <main+0xe8>)

     while (1) {
        latest_adc_val_A1 = analog_read_on_nrf(0, &sensor_power_spec);
    13be:	4d15      	ldr	r5, [pc, #84]	; (1414 <main+0xe0>)
    13c0:	4c17      	ldr	r4, [pc, #92]	; (1420 <main+0xec>)
    printk("Application started!!\n");
    13c2:	f008 ffe2 	bl	a38a <printk>
        latest_adc_val_A1 = analog_read_on_nrf(0, &sensor_power_spec);
    13c6:	4629      	mov	r1, r5
    13c8:	2000      	movs	r0, #0
    13ca:	f7ff fef5 	bl	11b8 <analog_read_on_nrf>
    13ce:	b200      	sxth	r0, r0
    13d0:	8020      	strh	r0, [r4, #0]
        printk("Reading A1: %d\n", latest_adc_val_A1);
    13d2:	8821      	ldrh	r1, [r4, #0]
    13d4:	4813      	ldr	r0, [pc, #76]	; (1424 <main+0xf0>)
    13d6:	b209      	sxth	r1, r1
    13d8:	f008 ffd7 	bl	a38a <printk>

        latest_adc_val_A2 = analog_read_on_nrf(0, &sensor_power_spec2);
    13dc:	490e      	ldr	r1, [pc, #56]	; (1418 <main+0xe4>)
    13de:	2000      	movs	r0, #0
    13e0:	f7ff feea 	bl	11b8 <analog_read_on_nrf>
    13e4:	4b10      	ldr	r3, [pc, #64]	; (1428 <main+0xf4>)
    13e6:	b200      	sxth	r0, r0
    13e8:	8018      	strh	r0, [r3, #0]
        printk("Reading A2: %d\n", latest_adc_val_A2);
    13ea:	8819      	ldrh	r1, [r3, #0]
    13ec:	480f      	ldr	r0, [pc, #60]	; (142c <main+0xf8>)
    13ee:	b209      	sxth	r1, r1
    13f0:	f008 ffcb 	bl	a38a <printk>
    13f4:	2100      	movs	r1, #0
    13f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    13fa:	f007 fe03 	bl	9004 <z_impl_k_sleep>
     while (1) {
    13fe:	e7e2      	b.n	13c6 <main+0x92>
    1400:	0bad0000 	.word	0x0bad0000
    1404:	0000b625 	.word	0x0000b625
    1408:	0000b617 	.word	0x0000b617
    140c:	0000b53f 	.word	0x0000b53f
    1410:	0000b1e0 	.word	0x0000b1e0
    1414:	0000b200 	.word	0x0000b200
    1418:	0000b1f8 	.word	0x0000b1f8
    141c:	0000b658 	.word	0x0000b658
    1420:	20000d8a 	.word	0x20000d8a
    1424:	0000b66f 	.word	0x0000b66f
    1428:	20000d88 	.word	0x20000d88
    142c:	0000b67f 	.word	0x0000b67f

00001430 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    1430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1434:	b091      	sub	sp, #68	; 0x44
    1436:	4605      	mov	r5, r0
    1438:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    143a:	f002 0304 	and.w	r3, r2, #4
    143e:	9301      	str	r3, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    1440:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    1444:	3301      	adds	r3, #1
    1446:	9304      	str	r3, [sp, #16]
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    1448:	0783      	lsls	r3, r0, #30
    144a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
{
    144e:	9202      	str	r2, [sp, #8]
    1450:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    1452:	f040 81fe 	bne.w	1852 <cbvprintf_package+0x422>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    1456:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    1458:	b130      	cbz	r0, 1468 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    145a:	2907      	cmp	r1, #7
    145c:	d809      	bhi.n	1472 <cbvprintf_package+0x42>
		return -ENOSPC;
    145e:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    1462:	b011      	add	sp, #68	; 0x44
    1464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    1468:	f001 0607 	and.w	r6, r1, #7
    146c:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    146e:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    1472:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    1474:	f04f 0800 	mov.w	r8, #0
	align = VA_STACK_ALIGN(char *);
    1478:	f04f 0b04 	mov.w	fp, #4
	s = fmt--;
    147c:	1e59      	subs	r1, r3, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    147e:	f8cd 800c 	str.w	r8, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    1482:	4647      	mov	r7, r8
	bool parsing = false;
    1484:	4643      	mov	r3, r8
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    1486:	f04f 32ff 	mov.w	r2, #4294967295
	size = sizeof(char *);
    148a:	46da      	mov	sl, fp
			if (buf0 != NULL) {
    148c:	b10d      	cbz	r5, 1492 <cbvprintf_package+0x62>
				*(const char **)buf = s;
    148e:	9800      	ldr	r0, [sp, #0]
    1490:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1492:	9804      	ldr	r0, [sp, #16]
    1494:	2800      	cmp	r0, #0
    1496:	f300 80e1 	bgt.w	165c <cbvprintf_package+0x22c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    149a:	489c      	ldr	r0, [pc, #624]	; (170c <cbvprintf_package+0x2dc>)
    149c:	f8dd c000 	ldr.w	ip, [sp]
    14a0:	4584      	cmp	ip, r0
    14a2:	d303      	bcc.n	14ac <cbvprintf_package+0x7c>
    14a4:	489a      	ldr	r0, [pc, #616]	; (1710 <cbvprintf_package+0x2e0>)
    14a6:	4584      	cmp	ip, r0
    14a8:	f0c0 80d8 	bcc.w	165c <cbvprintf_package+0x22c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    14ac:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    14b0:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    14b4:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    14b8:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    14bc:	f000 80e9 	beq.w	1692 <cbvprintf_package+0x262>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    14c0:	f04f 0c00 	mov.w	ip, #0
    14c4:	e0d3      	b.n	166e <cbvprintf_package+0x23e>
			switch (*fmt) {
    14c6:	287a      	cmp	r0, #122	; 0x7a
    14c8:	d864      	bhi.n	1594 <cbvprintf_package+0x164>
    14ca:	284b      	cmp	r0, #75	; 0x4b
    14cc:	d80f      	bhi.n	14ee <cbvprintf_package+0xbe>
    14ce:	2847      	cmp	r0, #71	; 0x47
    14d0:	d860      	bhi.n	1594 <cbvprintf_package+0x164>
    14d2:	2829      	cmp	r0, #41	; 0x29
    14d4:	d82f      	bhi.n	1536 <cbvprintf_package+0x106>
    14d6:	2825      	cmp	r0, #37	; 0x25
    14d8:	d05b      	beq.n	1592 <cbvprintf_package+0x162>
    14da:	d85b      	bhi.n	1594 <cbvprintf_package+0x164>
    14dc:	2820      	cmp	r0, #32
    14de:	d07f      	beq.n	15e0 <cbvprintf_package+0x1b0>
    14e0:	f1a0 0923 	sub.w	r9, r0, #35	; 0x23
    14e4:	f1d9 0300 	rsbs	r3, r9, #0
    14e8:	eb43 0309 	adc.w	r3, r3, r9
    14ec:	e078      	b.n	15e0 <cbvprintf_package+0x1b0>
    14ee:	f1a0 0e4c 	sub.w	lr, r0, #76	; 0x4c
    14f2:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
    14f6:	d84d      	bhi.n	1594 <cbvprintf_package+0x164>
    14f8:	e8df f00e 	tbb	[pc, lr]
    14fc:	4c4c4c72 	.word	0x4c4c4c72
    1500:	4c4c4c4c 	.word	0x4c4c4c4c
    1504:	4c4c4c4c 	.word	0x4c4c4c4c
    1508:	4c4c4c4e 	.word	0x4c4c4c4e
    150c:	4c4c4c4c 	.word	0x4c4c4c4c
    1510:	4e4c5c4c 	.word	0x4e4c5c4c
    1514:	5c5c5c4e 	.word	0x5c5c5c4e
    1518:	4c6f4e72 	.word	0x4c6f4e72
    151c:	4e184c72 	.word	0x4e184c72
    1520:	814c4c18 	.word	0x814c4c18
    1524:	4c4c4e7e 	.word	0x4c4c4e7e
    1528:	4c4e      	.short	0x4c4e
    152a:	7e          	.byte	0x7e
    152b:	00          	.byte	0x00
    152c:	2000      	movs	r0, #0
    152e:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
    1530:	f04f 0b04 	mov.w	fp, #4
    1534:	e03c      	b.n	15b0 <cbvprintf_package+0x180>
			switch (*fmt) {
    1536:	f1a0 0e2a 	sub.w	lr, r0, #42	; 0x2a
    153a:	fa5f fe8e 	uxtb.w	lr, lr
    153e:	2001      	movs	r0, #1
    1540:	fa00 fe0e 	lsl.w	lr, r0, lr
    1544:	f64f 70da 	movw	r0, #65498	; 0xffda
    1548:	ea1e 0f00 	tst.w	lr, r0
    154c:	d148      	bne.n	15e0 <cbvprintf_package+0x1b0>
    154e:	f01e 5062 	ands.w	r0, lr, #947912704	; 0x38800000
    1552:	d12f      	bne.n	15b4 <cbvprintf_package+0x184>
    1554:	f01e 0301 	ands.w	r3, lr, #1
    1558:	d042      	beq.n	15e0 <cbvprintf_package+0x1b0>
		buf = (void *) ROUND_UP(buf, align);
    155a:	3c01      	subs	r4, #1
    155c:	445c      	add	r4, fp
    155e:	f1cb 0e00 	rsb	lr, fp, #0
    1562:	ea04 040e 	and.w	r4, r4, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    1566:	2d00      	cmp	r5, #0
    1568:	d05e      	beq.n	1628 <cbvprintf_package+0x1f8>
    156a:	ebaa 0e05 	sub.w	lr, sl, r5
    156e:	44a6      	add	lr, r4
    1570:	4576      	cmp	r6, lr
    1572:	f4ff af74 	bcc.w	145e <cbvprintf_package+0x2e>
		if (is_str_arg) {
    1576:	2800      	cmp	r0, #0
    1578:	d168      	bne.n	164c <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    157a:	f1ba 0f04 	cmp.w	sl, #4
    157e:	d143      	bne.n	1608 <cbvprintf_package+0x1d8>
			int v = va_arg(ap, int);
    1580:	46e1      	mov	r9, ip
    1582:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
    1586:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    1588:	3404      	adds	r4, #4
    158a:	46cc      	mov	ip, r9
    158c:	f04f 0a04 	mov.w	sl, #4
    1590:	e026      	b.n	15e0 <cbvprintf_package+0x1b0>
				arg_idx--;
    1592:	3a01      	subs	r2, #1
				parsing = false;
    1594:	2300      	movs	r3, #0
				continue;
    1596:	e023      	b.n	15e0 <cbvprintf_package+0x1b0>
				if (fmt[-1] == 'l') {
    1598:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    159c:	2b6c      	cmp	r3, #108	; 0x6c
    159e:	d130      	bne.n	1602 <cbvprintf_package+0x1d2>
					if (fmt[-2] == 'l') {
    15a0:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    15a4:	2000      	movs	r0, #0
    15a6:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    15a8:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
    15aa:	d1c1      	bne.n	1530 <cbvprintf_package+0x100>
						align = VA_STACK_ALIGN(long long);
    15ac:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
    15b0:	46da      	mov	sl, fp
    15b2:	e7d2      	b.n	155a <cbvprintf_package+0x12a>
					v.ld = va_arg(ap, long double);
    15b4:	f10c 0907 	add.w	r9, ip, #7
    15b8:	f029 0c07 	bic.w	ip, r9, #7
				buf = (void *) ROUND_UP(buf, align);
    15bc:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
    15be:	e8fc ab02 	ldrd	sl, fp, [ip], #8
				buf = (void *) ROUND_UP(buf, align);
    15c2:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    15c6:	b135      	cbz	r5, 15d6 <cbvprintf_package+0x1a6>
					if (BUF_OFFSET + size > len) {
    15c8:	9805      	ldr	r0, [sp, #20]
    15ca:	4420      	add	r0, r4
    15cc:	42b0      	cmp	r0, r6
    15ce:	f63f af46 	bhi.w	145e <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    15d2:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
    15d6:	3408      	adds	r4, #8
				parsing = false;
    15d8:	2300      	movs	r3, #0
			switch (*fmt) {
    15da:	f04f 0b08 	mov.w	fp, #8
    15de:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
    15e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    15e4:	2800      	cmp	r0, #0
    15e6:	f000 80bc 	beq.w	1762 <cbvprintf_package+0x332>
			if (!parsing) {
    15ea:	2b00      	cmp	r3, #0
    15ec:	f47f af6b 	bne.w	14c6 <cbvprintf_package+0x96>
				if (*fmt == '%') {
    15f0:	2825      	cmp	r0, #37	; 0x25
    15f2:	d1f5      	bne.n	15e0 <cbvprintf_package+0x1b0>
					arg_idx++;
    15f4:	3201      	adds	r2, #1
					parsing = true;
    15f6:	2301      	movs	r3, #1
				align = VA_STACK_ALIGN(size_t);
    15f8:	f04f 0b04 	mov.w	fp, #4
    15fc:	e7ef      	b.n	15de <cbvprintf_package+0x1ae>
			switch (*fmt) {
    15fe:	4618      	mov	r0, r3
    1600:	e795      	b.n	152e <cbvprintf_package+0xfe>
    1602:	2000      	movs	r0, #0
				parsing = false;
    1604:	4603      	mov	r3, r0
    1606:	e7a8      	b.n	155a <cbvprintf_package+0x12a>
		} else if (size == sizeof(long long)) {
    1608:	f1ba 0f08 	cmp.w	sl, #8
    160c:	f040 809b 	bne.w	1746 <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    1610:	f10c 0907 	add.w	r9, ip, #7
    1614:	f029 0c07 	bic.w	ip, r9, #7
    1618:	e8fc 9a02 	ldrd	r9, sl, [ip], #8
					*(long long *)buf = v;
    161c:	e9c4 9a00 	strd	r9, sl, [r4]
			buf += sizeof(long long);
    1620:	3408      	adds	r4, #8
    1622:	f04f 0a08 	mov.w	sl, #8
    1626:	e7db      	b.n	15e0 <cbvprintf_package+0x1b0>
		if (is_str_arg) {
    1628:	b980      	cbnz	r0, 164c <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    162a:	f1ba 0f04 	cmp.w	sl, #4
    162e:	d102      	bne.n	1636 <cbvprintf_package+0x206>
			int v = va_arg(ap, int);
    1630:	f10c 0904 	add.w	r9, ip, #4
			if (buf0 != NULL) {
    1634:	e7a8      	b.n	1588 <cbvprintf_package+0x158>
		} else if (size == sizeof(long long)) {
    1636:	f1ba 0f08 	cmp.w	sl, #8
    163a:	f040 8084 	bne.w	1746 <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    163e:	f10c 0907 	add.w	r9, ip, #7
    1642:	f029 0907 	bic.w	r9, r9, #7
    1646:	f109 0c08 	add.w	ip, r9, #8
			if (buf0 != NULL) {
    164a:	e7e9      	b.n	1620 <cbvprintf_package+0x1f0>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    164c:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
    164e:	46e1      	mov	r9, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1650:	3801      	subs	r0, #1
    1652:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    1654:	f859 0b04 	ldr.w	r0, [r9], #4
    1658:	9000      	str	r0, [sp, #0]
    165a:	e717      	b.n	148c <cbvprintf_package+0x5c>
			if (is_ro && !do_ro) {
    165c:	9802      	ldr	r0, [sp, #8]
    165e:	0780      	lsls	r0, r0, #30
    1660:	d548      	bpl.n	16f4 <cbvprintf_package+0x2c4>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1662:	eba4 0e05 	sub.w	lr, r4, r5
    1666:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    166a:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    166e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    1672:	d31d      	bcc.n	16b0 <cbvprintf_package+0x280>
					__ASSERT(false, "String with too many arguments");
    1674:	4927      	ldr	r1, [pc, #156]	; (1714 <cbvprintf_package+0x2e4>)
    1676:	4a28      	ldr	r2, [pc, #160]	; (1718 <cbvprintf_package+0x2e8>)
    1678:	4828      	ldr	r0, [pc, #160]	; (171c <cbvprintf_package+0x2ec>)
    167a:	f240 237b 	movw	r3, #635	; 0x27b
    167e:	f008 ff22 	bl	a4c6 <assert_print>
    1682:	4827      	ldr	r0, [pc, #156]	; (1720 <cbvprintf_package+0x2f0>)
    1684:	f008 ff1f 	bl	a4c6 <assert_print>
    1688:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
    168c:	4822      	ldr	r0, [pc, #136]	; (1718 <cbvprintf_package+0x2e8>)
    168e:	f008 ff13 	bl	a4b8 <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1692:	2f0f      	cmp	r7, #15
    1694:	d80e      	bhi.n	16b4 <cbvprintf_package+0x284>
				if (buf0 != NULL) {
    1696:	2d00      	cmp	r5, #0
    1698:	d046      	beq.n	1728 <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    169a:	f107 0c40 	add.w	ip, r7, #64	; 0x40
    169e:	44ec      	add	ip, sp
    16a0:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    16a4:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    16a8:	9803      	ldr	r0, [sp, #12]
    16aa:	3001      	adds	r0, #1
    16ac:	9003      	str	r0, [sp, #12]
    16ae:	e020      	b.n	16f2 <cbvprintf_package+0x2c2>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    16b0:	2f0f      	cmp	r7, #15
    16b2:	d90c      	bls.n	16ce <cbvprintf_package+0x29e>
					__ASSERT(false, "str_ptr_pos[] too small");
    16b4:	4917      	ldr	r1, [pc, #92]	; (1714 <cbvprintf_package+0x2e4>)
    16b6:	4a18      	ldr	r2, [pc, #96]	; (1718 <cbvprintf_package+0x2e8>)
    16b8:	4818      	ldr	r0, [pc, #96]	; (171c <cbvprintf_package+0x2ec>)
    16ba:	f44f 7320 	mov.w	r3, #640	; 0x280
    16be:	f008 ff02 	bl	a4c6 <assert_print>
    16c2:	4818      	ldr	r0, [pc, #96]	; (1724 <cbvprintf_package+0x2f4>)
    16c4:	f008 feff 	bl	a4c6 <assert_print>
    16c8:	f44f 7120 	mov.w	r1, #640	; 0x280
    16cc:	e7de      	b.n	168c <cbvprintf_package+0x25c>
				if (buf0 != NULL) {
    16ce:	b1bd      	cbz	r5, 1700 <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    16d0:	f107 0e40 	add.w	lr, r7, #64	; 0x40
    16d4:	44ee      	add	lr, sp
    16d6:	b2c0      	uxtb	r0, r0
    16d8:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    16dc:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    16e0:	f1bc 0f00 	cmp.w	ip, #0
    16e4:	d0e0      	beq.n	16a8 <cbvprintf_package+0x278>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    16e6:	f060 007f 	orn	r0, r0, #127	; 0x7f
    16ea:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    16ee:	f108 0801 	add.w	r8, r8, #1
				s_idx++;
    16f2:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    16f4:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
    16f8:	3404      	adds	r4, #4
			is_str_arg = false;
    16fa:	46cc      	mov	ip, r9
					if (BUF_OFFSET + size > len) {
    16fc:	9005      	str	r0, [sp, #20]
    16fe:	e76f      	b.n	15e0 <cbvprintf_package+0x1b0>
				} else if (is_ro) {
    1700:	f1bc 0f00 	cmp.w	ip, #0
    1704:	d010      	beq.n	1728 <cbvprintf_package+0x2f8>
					len += 1;
    1706:	3601      	adds	r6, #1
    1708:	e7f3      	b.n	16f2 <cbvprintf_package+0x2c2>
    170a:	bf00      	nop
    170c:	0000ae6c 	.word	0x0000ae6c
    1710:	0000d6e8 	.word	0x0000d6e8
    1714:	0000c9f6 	.word	0x0000c9f6
    1718:	0000b6a4 	.word	0x0000b6a4
    171c:	0000b53f 	.word	0x0000b53f
    1720:	0000b6d2 	.word	0x0000b6d2
    1724:	0000b6f3 	.word	0x0000b6f3
				} else if (rws_pos_en) {
    1728:	9801      	ldr	r0, [sp, #4]
					len += 2;
    172a:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    172c:	2800      	cmp	r0, #0
    172e:	d1e0      	bne.n	16f2 <cbvprintf_package+0x2c2>
					len += strlen(s) + 1 + 1;
    1730:	9800      	ldr	r0, [sp, #0]
    1732:	9205      	str	r2, [sp, #20]
    1734:	e9cd 3106 	strd	r3, r1, [sp, #24]
    1738:	f7ff fcf0 	bl	111c <strlen>
    173c:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    1740:	9a05      	ldr	r2, [sp, #20]
    1742:	4406      	add	r6, r0
    1744:	e7d5      	b.n	16f2 <cbvprintf_package+0x2c2>
			__ASSERT(false, "unexpected size %u", size);
    1746:	4a44      	ldr	r2, [pc, #272]	; (1858 <cbvprintf_package+0x428>)
    1748:	4944      	ldr	r1, [pc, #272]	; (185c <cbvprintf_package+0x42c>)
    174a:	4845      	ldr	r0, [pc, #276]	; (1860 <cbvprintf_package+0x430>)
    174c:	f240 23c5 	movw	r3, #709	; 0x2c5
    1750:	f008 feb9 	bl	a4c6 <assert_print>
    1754:	4651      	mov	r1, sl
    1756:	4843      	ldr	r0, [pc, #268]	; (1864 <cbvprintf_package+0x434>)
    1758:	f008 feb5 	bl	a4c6 <assert_print>
    175c:	f240 21c5 	movw	r1, #709	; 0x2c5
    1760:	e794      	b.n	168c <cbvprintf_package+0x25c>
	if (BUF_OFFSET / sizeof(int) > 255) {
    1762:	1b63      	subs	r3, r4, r5
    1764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1768:	d30c      	bcc.n	1784 <cbvprintf_package+0x354>
		__ASSERT(false, "too many format args");
    176a:	493c      	ldr	r1, [pc, #240]	; (185c <cbvprintf_package+0x42c>)
    176c:	4a3a      	ldr	r2, [pc, #232]	; (1858 <cbvprintf_package+0x428>)
    176e:	483c      	ldr	r0, [pc, #240]	; (1860 <cbvprintf_package+0x430>)
    1770:	f240 23d1 	movw	r3, #721	; 0x2d1
    1774:	f008 fea7 	bl	a4c6 <assert_print>
    1778:	483b      	ldr	r0, [pc, #236]	; (1868 <cbvprintf_package+0x438>)
    177a:	f008 fea4 	bl	a4c6 <assert_print>
    177e:	f240 21d1 	movw	r1, #721	; 0x2d1
    1782:	e783      	b.n	168c <cbvprintf_package+0x25c>
	if (buf0 == NULL) {
    1784:	b91d      	cbnz	r5, 178e <cbvprintf_package+0x35e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    1786:	f1a6 0408 	sub.w	r4, r6, #8
    178a:	18e0      	adds	r0, r4, r3
    178c:	e669      	b.n	1462 <cbvprintf_package+0x32>
	if (rws_pos_en) {
    178e:	9a01      	ldr	r2, [sp, #4]
	*(char **)buf0 = NULL;
    1790:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    1792:	089b      	lsrs	r3, r3, #2
    1794:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    1796:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (rws_pos_en) {
    179a:	b1c2      	cbz	r2, 17ce <cbvprintf_package+0x39e>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    179c:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    179e:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
    17a2:	f1b8 0f00 	cmp.w	r8, #0
    17a6:	d005      	beq.n	17b4 <cbvprintf_package+0x384>
    17a8:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    17aa:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
    17ac:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    17b0:	4297      	cmp	r7, r2
    17b2:	d10e      	bne.n	17d2 <cbvprintf_package+0x3a2>
		if (BUF_OFFSET + 1 + size > len) {
    17b4:	f1c5 0301 	rsb	r3, r5, #1
    17b8:	f10d 0920 	add.w	r9, sp, #32
			*buf++ = str_ptr_arg[i];
    17bc:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    17c0:	9302      	str	r3, [sp, #8]
			*buf++ = str_ptr_arg[i];
    17c2:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    17c6:	4557      	cmp	r7, sl
    17c8:	d112      	bne.n	17f0 <cbvprintf_package+0x3c0>
	return BUF_OFFSET;
    17ca:	1b60      	subs	r0, r4, r5
    17cc:	e649      	b.n	1462 <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    17ce:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    17d0:	e7e5      	b.n	179e <cbvprintf_package+0x36e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    17d2:	f810 3b01 	ldrb.w	r3, [r0], #1
    17d6:	0619      	lsls	r1, r3, #24
    17d8:	d508      	bpl.n	17ec <cbvprintf_package+0x3bc>
			if (BUF_OFFSET + 1 > len) {
    17da:	eb04 0e0c 	add.w	lr, r4, ip
    17de:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    17e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    17e4:	f4ff ae3b 	bcc.w	145e <cbvprintf_package+0x2e>
			*buf++ = pos;
    17e8:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    17ec:	3201      	adds	r2, #1
    17ee:	e7df      	b.n	17b0 <cbvprintf_package+0x380>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    17f0:	f1b8 0f00 	cmp.w	r8, #0
    17f4:	d003      	beq.n	17fe <cbvprintf_package+0x3ce>
    17f6:	f999 2000 	ldrsb.w	r2, [r9]
    17fa:	2a00      	cmp	r2, #0
    17fc:	db17      	blt.n	182e <cbvprintf_package+0x3fe>
		if (rws_pos_en) {
    17fe:	9b01      	ldr	r3, [sp, #4]
    1800:	b1d3      	cbz	r3, 1838 <cbvprintf_package+0x408>
			*buf++ = str_ptr_arg[i];
    1802:	f81a 200b 	ldrb.w	r2, [sl, fp]
    1806:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    180a:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    180c:	9b02      	ldr	r3, [sp, #8]
    180e:	1898      	adds	r0, r3, r2
    1810:	4420      	add	r0, r4
    1812:	4286      	cmp	r6, r0
    1814:	f4ff ae23 	bcc.w	145e <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    1818:	f899 0000 	ldrb.w	r0, [r9]
    181c:	f804 0b01 	strb.w	r0, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    1820:	9900      	ldr	r1, [sp, #0]
    1822:	9203      	str	r2, [sp, #12]
    1824:	4620      	mov	r0, r4
    1826:	f009 fafa 	bl	ae1e <memcpy>
		buf += size;
    182a:	9a03      	ldr	r2, [sp, #12]
    182c:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    182e:	f10a 0a01 	add.w	sl, sl, #1
    1832:	f109 0901 	add.w	r9, r9, #1
    1836:	e7c6      	b.n	17c6 <cbvprintf_package+0x396>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    1838:	f899 2000 	ldrb.w	r2, [r9]
    183c:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    1840:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1842:	9b01      	ldr	r3, [sp, #4]
    1844:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1848:	9800      	ldr	r0, [sp, #0]
    184a:	f7ff fc67 	bl	111c <strlen>
    184e:	1c42      	adds	r2, r0, #1
    1850:	e7dc      	b.n	180c <cbvprintf_package+0x3dc>
		return -EFAULT;
    1852:	f06f 000d 	mvn.w	r0, #13
    1856:	e604      	b.n	1462 <cbvprintf_package+0x32>
    1858:	0000b6a4 	.word	0x0000b6a4
    185c:	0000c9f6 	.word	0x0000c9f6
    1860:	0000b53f 	.word	0x0000b53f
    1864:	0000b70d 	.word	0x0000b70d
    1868:	0000b722 	.word	0x0000b722

0000186c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    186c:	4b01      	ldr	r3, [pc, #4]	; (1874 <__printk_hook_install+0x8>)
    186e:	6018      	str	r0, [r3, #0]
}
    1870:	4770      	bx	lr
    1872:	bf00      	nop
    1874:	200000b0 	.word	0x200000b0

00001878 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    187c:	4604      	mov	r4, r0
    187e:	4608      	mov	r0, r1
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1880:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1882:	0719      	lsls	r1, r3, #28
{
    1884:	4615      	mov	r5, r2
	if (processing) {
    1886:	d412      	bmi.n	18ae <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1888:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    188a:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    188e:	d164      	bne.n	195a <process_event+0xe2>
			evt = process_recheck(mgr);
    1890:	4620      	mov	r0, r4
    1892:	f008 fd91 	bl	a3b8 <process_recheck>
		}

		if (evt == EVT_NOP) {
    1896:	b188      	cbz	r0, 18bc <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1898:	3801      	subs	r0, #1
    189a:	2804      	cmp	r0, #4
    189c:	f200 8134 	bhi.w	1b08 <process_event+0x290>
    18a0:	e8df f010 	tbh	[pc, r0, lsl #1]
    18a4:	0132005b 	.word	0x0132005b
    18a8:	00d10081 	.word	0x00d10081
    18ac:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    18ae:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    18b0:	bf0c      	ite	eq
    18b2:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    18b6:	f043 0120 	orrne.w	r1, r3, #32
    18ba:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    18bc:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    18be:	4620      	mov	r0, r4
    18c0:	f006 f8ea 	bl	7a98 <z_spin_unlock_valid>
    18c4:	2800      	cmp	r0, #0
    18c6:	f040 819b 	bne.w	1c00 <process_event+0x388>
    18ca:	4998      	ldr	r1, [pc, #608]	; (1b2c <process_event+0x2b4>)
    18cc:	4a98      	ldr	r2, [pc, #608]	; (1b30 <process_event+0x2b8>)
    18ce:	4899      	ldr	r0, [pc, #612]	; (1b34 <process_event+0x2bc>)
    18d0:	23c2      	movs	r3, #194	; 0xc2
    18d2:	f008 fdf8 	bl	a4c6 <assert_print>
    18d6:	4621      	mov	r1, r4
    18d8:	e0b0      	b.n	1a3c <process_event+0x1c4>
    18da:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    18de:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    18e0:	2801      	cmp	r0, #1
    18e2:	d81e      	bhi.n	1922 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    18e4:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    18e6:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    18e8:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    18ea:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    18ee:	d114      	bne.n	191a <process_event+0xa2>
		*clients = mgr->clients;
    18f0:	463a      	mov	r2, r7
    18f2:	e003      	b.n	18fc <process_event+0x84>
				mgr->refs += 1U;
    18f4:	8be0      	ldrh	r0, [r4, #30]
    18f6:	3001      	adds	r0, #1
    18f8:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    18fa:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    18fc:	2a00      	cmp	r2, #0
    18fe:	d1f9      	bne.n	18f4 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1900:	f023 0307 	bic.w	r3, r3, #7
    1904:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1908:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    190a:	4620      	mov	r0, r4
    190c:	f008 fd54 	bl	a3b8 <process_recheck>
    1910:	b390      	cbz	r0, 1978 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1912:	f042 0220 	orr.w	r2, r2, #32
    1916:	83a2      	strh	r2, [r4, #28]
    1918:	e02e      	b.n	1978 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    191a:	f023 0307 	bic.w	r3, r3, #7
    191e:	b29a      	uxth	r2, r3
}
    1920:	e7f2      	b.n	1908 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1922:	2a04      	cmp	r2, #4
    1924:	d133      	bne.n	198e <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1926:	f023 0307 	bic.w	r3, r3, #7
    192a:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    192c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    192e:	4620      	mov	r0, r4
    1930:	f008 fd42 	bl	a3b8 <process_recheck>
    1934:	b110      	cbz	r0, 193c <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1936:	f042 0220 	orr.w	r2, r2, #32
    193a:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    193c:	8ba3      	ldrh	r3, [r4, #28]
    193e:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1942:	4589      	cmp	r9, r1
    1944:	f040 80ea 	bne.w	1b1c <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1948:	8ba1      	ldrh	r1, [r4, #28]
    194a:	06ca      	lsls	r2, r1, #27
    194c:	f140 814f 	bpl.w	1bee <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1950:	f021 0310 	bic.w	r3, r1, #16
    1954:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    1956:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    195a:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    195e:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    1960:	f1b8 0f00 	cmp.w	r8, #0
    1964:	dab9      	bge.n	18da <process_event+0x62>
	list->head = NULL;
    1966:	2200      	movs	r2, #0
		*clients = mgr->clients;
    1968:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    196a:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    196e:	e9c4 2200 	strd	r2, r2, [r4]
    1972:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1976:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1978:	8ba3      	ldrh	r3, [r4, #28]
    197a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    197e:	4589      	cmp	r9, r1
    1980:	f040 80cd 	bne.w	1b1e <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    1984:	2f00      	cmp	r7, #0
    1986:	d0df      	beq.n	1948 <process_event+0xd0>
    1988:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    198a:	46b2      	mov	sl, r6
    198c:	e044      	b.n	1a18 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    198e:	496a      	ldr	r1, [pc, #424]	; (1b38 <process_event+0x2c0>)
    1990:	4a6a      	ldr	r2, [pc, #424]	; (1b3c <process_event+0x2c4>)
    1992:	4868      	ldr	r0, [pc, #416]	; (1b34 <process_event+0x2bc>)
    1994:	f240 131b 	movw	r3, #283	; 0x11b
    1998:	f008 fd95 	bl	a4c6 <assert_print>
    199c:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    19a0:	4866      	ldr	r0, [pc, #408]	; (1b3c <process_event+0x2c4>)
    19a2:	f008 fd89 	bl	a4b8 <assert_post_action>
    19a6:	b149      	cbz	r1, 19bc <process_event+0x144>
    19a8:	4965      	ldr	r1, [pc, #404]	; (1b40 <process_event+0x2c8>)
    19aa:	4a64      	ldr	r2, [pc, #400]	; (1b3c <process_event+0x2c4>)
    19ac:	4861      	ldr	r0, [pc, #388]	; (1b34 <process_event+0x2bc>)
    19ae:	f44f 73ab 	mov.w	r3, #342	; 0x156
    19b2:	f008 fd88 	bl	a4c6 <assert_print>
    19b6:	f44f 71ab 	mov.w	r1, #342	; 0x156
    19ba:	e7f1      	b.n	19a0 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    19bc:	6823      	ldr	r3, [r4, #0]
    19be:	b94b      	cbnz	r3, 19d4 <process_event+0x15c>
    19c0:	4960      	ldr	r1, [pc, #384]	; (1b44 <process_event+0x2cc>)
    19c2:	4a5e      	ldr	r2, [pc, #376]	; (1b3c <process_event+0x2c4>)
    19c4:	485b      	ldr	r0, [pc, #364]	; (1b34 <process_event+0x2bc>)
    19c6:	f240 1357 	movw	r3, #343	; 0x157
    19ca:	f008 fd7c 	bl	a4c6 <assert_print>
    19ce:	f240 1157 	movw	r1, #343	; 0x157
    19d2:	e7e5      	b.n	19a0 <process_event+0x128>
			transit = mgr->transitions->start;
    19d4:	6923      	ldr	r3, [r4, #16]
    19d6:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    19d8:	b94e      	cbnz	r6, 19ee <process_event+0x176>
    19da:	495b      	ldr	r1, [pc, #364]	; (1b48 <process_event+0x2d0>)
    19dc:	4a57      	ldr	r2, [pc, #348]	; (1b3c <process_event+0x2c4>)
    19de:	4855      	ldr	r0, [pc, #340]	; (1b34 <process_event+0x2bc>)
    19e0:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    19e4:	f008 fd6f 	bl	a4c6 <assert_print>
    19e8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    19ec:	e7d8      	b.n	19a0 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    19ee:	8ba3      	ldrh	r3, [r4, #28]
    19f0:	f023 0307 	bic.w	r3, r3, #7
    19f4:	f043 0306 	orr.w	r3, r3, #6
    19f8:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    19fa:	83a3      	strh	r3, [r4, #28]
    19fc:	460f      	mov	r7, r1
		res = 0;
    19fe:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1a00:	f04f 0906 	mov.w	r9, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1a04:	68a2      	ldr	r2, [r4, #8]
    1a06:	2a00      	cmp	r2, #0
    1a08:	f040 808b 	bne.w	1b22 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    1a0c:	2f00      	cmp	r7, #0
    1a0e:	f040 808b 	bne.w	1b28 <process_event+0x2b0>
		    || (transit != NULL)) {
    1a12:	2e00      	cmp	r6, #0
    1a14:	d098      	beq.n	1948 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1a16:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1a18:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1a1c:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
    1a20:	83a3      	strh	r3, [r4, #28]
    1a22:	4658      	mov	r0, fp
    1a24:	f006 f838 	bl	7a98 <z_spin_unlock_valid>
    1a28:	2800      	cmp	r0, #0
    1a2a:	f040 8097 	bne.w	1b5c <process_event+0x2e4>
    1a2e:	493f      	ldr	r1, [pc, #252]	; (1b2c <process_event+0x2b4>)
    1a30:	4a3f      	ldr	r2, [pc, #252]	; (1b30 <process_event+0x2b8>)
    1a32:	4840      	ldr	r0, [pc, #256]	; (1b34 <process_event+0x2bc>)
    1a34:	23c2      	movs	r3, #194	; 0xc2
    1a36:	f008 fd46 	bl	a4c6 <assert_print>
    1a3a:	4659      	mov	r1, fp
    1a3c:	4843      	ldr	r0, [pc, #268]	; (1b4c <process_event+0x2d4>)
    1a3e:	f008 fd42 	bl	a4c6 <assert_print>
    1a42:	21c2      	movs	r1, #194	; 0xc2
    1a44:	e0ae      	b.n	1ba4 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1a46:	2902      	cmp	r1, #2
    1a48:	d009      	beq.n	1a5e <process_event+0x1e6>
    1a4a:	4941      	ldr	r1, [pc, #260]	; (1b50 <process_event+0x2d8>)
    1a4c:	4a3b      	ldr	r2, [pc, #236]	; (1b3c <process_event+0x2c4>)
    1a4e:	4839      	ldr	r0, [pc, #228]	; (1b34 <process_event+0x2bc>)
    1a50:	f240 135d 	movw	r3, #349	; 0x15d
    1a54:	f008 fd37 	bl	a4c6 <assert_print>
    1a58:	f240 115d 	movw	r1, #349	; 0x15d
    1a5c:	e7a0      	b.n	19a0 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1a5e:	8be7      	ldrh	r7, [r4, #30]
    1a60:	b14f      	cbz	r7, 1a76 <process_event+0x1fe>
    1a62:	493c      	ldr	r1, [pc, #240]	; (1b54 <process_event+0x2dc>)
    1a64:	4a35      	ldr	r2, [pc, #212]	; (1b3c <process_event+0x2c4>)
    1a66:	4833      	ldr	r0, [pc, #204]	; (1b34 <process_event+0x2bc>)
    1a68:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1a6c:	f008 fd2b 	bl	a4c6 <assert_print>
    1a70:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1a74:	e794      	b.n	19a0 <process_event+0x128>
			transit = mgr->transitions->stop;
    1a76:	6923      	ldr	r3, [r4, #16]
    1a78:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1a7a:	b94e      	cbnz	r6, 1a90 <process_event+0x218>
    1a7c:	4932      	ldr	r1, [pc, #200]	; (1b48 <process_event+0x2d0>)
    1a7e:	4a2f      	ldr	r2, [pc, #188]	; (1b3c <process_event+0x2c4>)
    1a80:	482c      	ldr	r0, [pc, #176]	; (1b34 <process_event+0x2bc>)
    1a82:	f240 1361 	movw	r3, #353	; 0x161
    1a86:	f008 fd1e 	bl	a4c6 <assert_print>
    1a8a:	f240 1161 	movw	r1, #353	; 0x161
    1a8e:	e787      	b.n	19a0 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a90:	8ba3      	ldrh	r3, [r4, #28]
    1a92:	f023 0307 	bic.w	r3, r3, #7
    1a96:	f043 0304 	orr.w	r3, r3, #4
    1a9a:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1a9c:	83a3      	strh	r3, [r4, #28]
		res = 0;
    1a9e:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1aa0:	f04f 0904 	mov.w	r9, #4
    1aa4:	e7ae      	b.n	1a04 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1aa6:	2901      	cmp	r1, #1
    1aa8:	d009      	beq.n	1abe <process_event+0x246>
    1aaa:	492b      	ldr	r1, [pc, #172]	; (1b58 <process_event+0x2e0>)
    1aac:	4a23      	ldr	r2, [pc, #140]	; (1b3c <process_event+0x2c4>)
    1aae:	4821      	ldr	r0, [pc, #132]	; (1b34 <process_event+0x2bc>)
    1ab0:	f44f 73b2 	mov.w	r3, #356	; 0x164
    1ab4:	f008 fd07 	bl	a4c6 <assert_print>
    1ab8:	f44f 71b2 	mov.w	r1, #356	; 0x164
    1abc:	e770      	b.n	19a0 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1abe:	6823      	ldr	r3, [r4, #0]
    1ac0:	b94b      	cbnz	r3, 1ad6 <process_event+0x25e>
    1ac2:	4920      	ldr	r1, [pc, #128]	; (1b44 <process_event+0x2cc>)
    1ac4:	4a1d      	ldr	r2, [pc, #116]	; (1b3c <process_event+0x2c4>)
    1ac6:	481b      	ldr	r0, [pc, #108]	; (1b34 <process_event+0x2bc>)
    1ac8:	f240 1365 	movw	r3, #357	; 0x165
    1acc:	f008 fcfb 	bl	a4c6 <assert_print>
    1ad0:	f240 1165 	movw	r1, #357	; 0x165
    1ad4:	e764      	b.n	19a0 <process_event+0x128>
			transit = mgr->transitions->reset;
    1ad6:	6923      	ldr	r3, [r4, #16]
    1ad8:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    1ada:	b94e      	cbnz	r6, 1af0 <process_event+0x278>
    1adc:	491a      	ldr	r1, [pc, #104]	; (1b48 <process_event+0x2d0>)
    1ade:	4a17      	ldr	r2, [pc, #92]	; (1b3c <process_event+0x2c4>)
    1ae0:	4814      	ldr	r0, [pc, #80]	; (1b34 <process_event+0x2bc>)
    1ae2:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1ae6:	f008 fcee 	bl	a4c6 <assert_print>
    1aea:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1aee:	e757      	b.n	19a0 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1af0:	8ba3      	ldrh	r3, [r4, #28]
    1af2:	f023 0307 	bic.w	r3, r3, #7
    1af6:	f043 0305 	orr.w	r3, r3, #5
    1afa:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1afc:	2700      	movs	r7, #0
    1afe:	83a3      	strh	r3, [r4, #28]
		res = 0;
    1b00:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1b02:	f04f 0905 	mov.w	r9, #5
    1b06:	e77d      	b.n	1a04 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    1b08:	490b      	ldr	r1, [pc, #44]	; (1b38 <process_event+0x2c0>)
    1b0a:	4a0c      	ldr	r2, [pc, #48]	; (1b3c <process_event+0x2c4>)
    1b0c:	4809      	ldr	r0, [pc, #36]	; (1b34 <process_event+0x2bc>)
    1b0e:	f240 136b 	movw	r3, #363	; 0x16b
    1b12:	f008 fcd8 	bl	a4c6 <assert_print>
    1b16:	f240 116b 	movw	r1, #363	; 0x16b
    1b1a:	e741      	b.n	19a0 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    1b1c:	2700      	movs	r7, #0
    1b1e:	2600      	movs	r6, #0
    1b20:	e770      	b.n	1a04 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1b22:	f04f 0a01 	mov.w	sl, #1
    1b26:	e777      	b.n	1a18 <process_event+0x1a0>
    1b28:	4692      	mov	sl, r2
    1b2a:	e775      	b.n	1a18 <process_event+0x1a0>
    1b2c:	0000b81a 	.word	0x0000b81a
    1b30:	0000b7ed 	.word	0x0000b7ed
    1b34:	0000b53f 	.word	0x0000b53f
    1b38:	0000c9f6 	.word	0x0000c9f6
    1b3c:	0000b74a 	.word	0x0000b74a
    1b40:	0000b76c 	.word	0x0000b76c
    1b44:	0000b778 	.word	0x0000b778
    1b48:	0000b79b 	.word	0x0000b79b
    1b4c:	0000b831 	.word	0x0000b831
    1b50:	0000b7b2 	.word	0x0000b7b2
    1b54:	0000b7c8 	.word	0x0000b7c8
    1b58:	0000b7d7 	.word	0x0000b7d7
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1b5c:	f385 8811 	msr	BASEPRI, r5
    1b60:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1b64:	f1ba 0f00 	cmp.w	sl, #0
    1b68:	d11e      	bne.n	1ba8 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    1b6a:	2f00      	cmp	r7, #0
    1b6c:	d12f      	bne.n	1bce <process_event+0x356>
			if (transit != NULL) {
    1b6e:	b116      	cbz	r6, 1b76 <process_event+0x2fe>
				transit(mgr, transition_complete);
    1b70:	4926      	ldr	r1, [pc, #152]	; (1c0c <process_event+0x394>)
    1b72:	4620      	mov	r0, r4
    1b74:	47b0      	blx	r6
	__asm__ volatile(
    1b76:	f04f 0320 	mov.w	r3, #32
    1b7a:	f3ef 8511 	mrs	r5, BASEPRI
    1b7e:	f383 8812 	msr	BASEPRI_MAX, r3
    1b82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1b86:	4658      	mov	r0, fp
    1b88:	f005 ff78 	bl	7a7c <z_spin_lock_valid>
    1b8c:	bb38      	cbnz	r0, 1bde <process_event+0x366>
    1b8e:	4a20      	ldr	r2, [pc, #128]	; (1c10 <process_event+0x398>)
    1b90:	4920      	ldr	r1, [pc, #128]	; (1c14 <process_event+0x39c>)
    1b92:	4821      	ldr	r0, [pc, #132]	; (1c18 <process_event+0x3a0>)
    1b94:	2394      	movs	r3, #148	; 0x94
    1b96:	f008 fc96 	bl	a4c6 <assert_print>
    1b9a:	4659      	mov	r1, fp
    1b9c:	481f      	ldr	r0, [pc, #124]	; (1c1c <process_event+0x3a4>)
    1b9e:	f008 fc92 	bl	a4c6 <assert_print>
    1ba2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1ba4:	481a      	ldr	r0, [pc, #104]	; (1c10 <process_event+0x398>)
    1ba6:	e6fc      	b.n	19a2 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1ba8:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1baa:	2900      	cmp	r1, #0
    1bac:	d0dd      	beq.n	1b6a <process_event+0x2f2>
	return node->next;
    1bae:	680d      	ldr	r5, [r1, #0]
    1bb0:	2900      	cmp	r1, #0
    1bb2:	d0da      	beq.n	1b6a <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    1bb4:	f8d1 a004 	ldr.w	sl, [r1, #4]
    1bb8:	4643      	mov	r3, r8
    1bba:	464a      	mov	r2, r9
    1bbc:	4620      	mov	r0, r4
    1bbe:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1bc0:	b11d      	cbz	r5, 1bca <process_event+0x352>
    1bc2:	682b      	ldr	r3, [r5, #0]
    1bc4:	4629      	mov	r1, r5
    1bc6:	461d      	mov	r5, r3
    1bc8:	e7f2      	b.n	1bb0 <process_event+0x338>
    1bca:	462b      	mov	r3, r5
    1bcc:	e7fa      	b.n	1bc4 <process_event+0x34c>
    1bce:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    1bd0:	4643      	mov	r3, r8
    1bd2:	464a      	mov	r2, r9
    1bd4:	4620      	mov	r0, r4
    1bd6:	683f      	ldr	r7, [r7, #0]
    1bd8:	f008 fc1a 	bl	a410 <notify_one>
    1bdc:	e7c5      	b.n	1b6a <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    1bde:	4658      	mov	r0, fp
    1be0:	f005 ff6a 	bl	7ab8 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1be4:	8ba3      	ldrh	r3, [r4, #28]
    1be6:	f023 0308 	bic.w	r3, r3, #8
    1bea:	83a3      	strh	r3, [r4, #28]
    1bec:	e6ac      	b.n	1948 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1bee:	068b      	lsls	r3, r1, #26
    1bf0:	f57f ae64 	bpl.w	18bc <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1bf4:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1bf8:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    1bfa:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    1bfe:	e647      	b.n	1890 <process_event+0x18>
	__asm__ volatile(
    1c00:	f385 8811 	msr	BASEPRI, r5
    1c04:	f3bf 8f6f 	isb	sy
}
    1c08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c0c:	00001c21 	.word	0x00001c21
    1c10:	0000b7ed 	.word	0x0000b7ed
    1c14:	0000b846 	.word	0x0000b846
    1c18:	0000b53f 	.word	0x0000b53f
    1c1c:	0000b85b 	.word	0x0000b85b

00001c20 <transition_complete>:
{
    1c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c22:	4604      	mov	r4, r0
    1c24:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1c26:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    1c2a:	f04f 0320 	mov.w	r3, #32
    1c2e:	f3ef 8711 	mrs	r7, BASEPRI
    1c32:	f383 8812 	msr	BASEPRI_MAX, r3
    1c36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1c3a:	4630      	mov	r0, r6
    1c3c:	f005 ff1e 	bl	7a7c <z_spin_lock_valid>
    1c40:	b968      	cbnz	r0, 1c5e <transition_complete+0x3e>
    1c42:	4a0c      	ldr	r2, [pc, #48]	; (1c74 <transition_complete+0x54>)
    1c44:	490c      	ldr	r1, [pc, #48]	; (1c78 <transition_complete+0x58>)
    1c46:	480d      	ldr	r0, [pc, #52]	; (1c7c <transition_complete+0x5c>)
    1c48:	2394      	movs	r3, #148	; 0x94
    1c4a:	f008 fc3c 	bl	a4c6 <assert_print>
    1c4e:	480c      	ldr	r0, [pc, #48]	; (1c80 <transition_complete+0x60>)
    1c50:	4631      	mov	r1, r6
    1c52:	f008 fc38 	bl	a4c6 <assert_print>
    1c56:	4807      	ldr	r0, [pc, #28]	; (1c74 <transition_complete+0x54>)
    1c58:	2194      	movs	r1, #148	; 0x94
    1c5a:	f008 fc2d 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    1c5e:	4630      	mov	r0, r6
    1c60:	f005 ff2a 	bl	7ab8 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1c64:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1c66:	463a      	mov	r2, r7
    1c68:	4620      	mov	r0, r4
    1c6a:	2101      	movs	r1, #1
}
    1c6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    1c70:	f7ff be02 	b.w	1878 <process_event>
    1c74:	0000b7ed 	.word	0x0000b7ed
    1c78:	0000b846 	.word	0x0000b846
    1c7c:	0000b53f 	.word	0x0000b53f
    1c80:	0000b85b 	.word	0x0000b85b

00001c84 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1c88:	4604      	mov	r4, r0
    1c8a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1c8c:	f008 fbb0 	bl	a3f0 <validate_args>

	if (rv < 0) {
    1c90:	1e05      	subs	r5, r0, #0
    1c92:	db67      	blt.n	1d64 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1c94:	f104 0914 	add.w	r9, r4, #20
    1c98:	f04f 0320 	mov.w	r3, #32
    1c9c:	f3ef 8a11 	mrs	sl, BASEPRI
    1ca0:	f383 8812 	msr	BASEPRI_MAX, r3
    1ca4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1ca8:	4648      	mov	r0, r9
    1caa:	f005 fee7 	bl	7a7c <z_spin_lock_valid>
    1cae:	4680      	mov	r8, r0
    1cb0:	b960      	cbnz	r0, 1ccc <onoff_request+0x48>
    1cb2:	4a38      	ldr	r2, [pc, #224]	; (1d94 <onoff_request+0x110>)
    1cb4:	4938      	ldr	r1, [pc, #224]	; (1d98 <onoff_request+0x114>)
    1cb6:	4839      	ldr	r0, [pc, #228]	; (1d9c <onoff_request+0x118>)
    1cb8:	2394      	movs	r3, #148	; 0x94
    1cba:	f008 fc04 	bl	a4c6 <assert_print>
    1cbe:	4649      	mov	r1, r9
    1cc0:	4837      	ldr	r0, [pc, #220]	; (1da0 <onoff_request+0x11c>)
    1cc2:	f008 fc00 	bl	a4c6 <assert_print>
    1cc6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1cc8:	4832      	ldr	r0, [pc, #200]	; (1d94 <onoff_request+0x110>)
    1cca:	e040      	b.n	1d4e <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    1ccc:	4648      	mov	r0, r9
    1cce:	f005 fef3 	bl	7ab8 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1cd2:	8be3      	ldrh	r3, [r4, #30]
    1cd4:	8ba6      	ldrh	r6, [r4, #28]
    1cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1cda:	4293      	cmp	r3, r2
    1cdc:	f006 0607 	and.w	r6, r6, #7
    1ce0:	d043      	beq.n	1d6a <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    1ce2:	2e02      	cmp	r6, #2
    1ce4:	d113      	bne.n	1d0e <onoff_request+0x8a>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    1ce6:	3301      	adds	r3, #1
    1ce8:	83e3      	strh	r3, [r4, #30]
	rv = state;
    1cea:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1cec:	4648      	mov	r0, r9
    1cee:	f005 fed3 	bl	7a98 <z_spin_unlock_valid>
    1cf2:	2800      	cmp	r0, #0
    1cf4:	d13f      	bne.n	1d76 <onoff_request+0xf2>
    1cf6:	4a27      	ldr	r2, [pc, #156]	; (1d94 <onoff_request+0x110>)
    1cf8:	492a      	ldr	r1, [pc, #168]	; (1da4 <onoff_request+0x120>)
    1cfa:	4828      	ldr	r0, [pc, #160]	; (1d9c <onoff_request+0x118>)
    1cfc:	23c2      	movs	r3, #194	; 0xc2
    1cfe:	f008 fbe2 	bl	a4c6 <assert_print>
    1d02:	4649      	mov	r1, r9
    1d04:	4828      	ldr	r0, [pc, #160]	; (1da8 <onoff_request+0x124>)
    1d06:	f008 fbde 	bl	a4c6 <assert_print>
    1d0a:	21c2      	movs	r1, #194	; 0xc2
    1d0c:	e7dc      	b.n	1cc8 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    1d0e:	2e06      	cmp	r6, #6
    1d10:	d813      	bhi.n	1d3a <onoff_request+0xb6>
    1d12:	e8df f006 	tbb	[pc, r6]
    1d16:	2d09      	.short	0x2d09
    1d18:	04091212 	.word	0x04091212
    1d1c:	09          	.byte	0x09
    1d1d:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    1d1e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    1d22:	f04f 0800 	mov.w	r8, #0
    1d26:	e7e1      	b.n	1cec <onoff_request+0x68>
	parent->next = child;
    1d28:	2300      	movs	r3, #0
    1d2a:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    1d2c:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1d2e:	b983      	cbnz	r3, 1d52 <onoff_request+0xce>
	list->head = node;
    1d30:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    1d34:	b186      	cbz	r6, 1d58 <onoff_request+0xd4>
	rv = state;
    1d36:	4635      	mov	r5, r6
    1d38:	e7f3      	b.n	1d22 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1d3a:	491c      	ldr	r1, [pc, #112]	; (1dac <onoff_request+0x128>)
    1d3c:	4817      	ldr	r0, [pc, #92]	; (1d9c <onoff_request+0x118>)
    1d3e:	4a1c      	ldr	r2, [pc, #112]	; (1db0 <onoff_request+0x12c>)
    1d40:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    1d44:	f008 fbbf 	bl	a4c6 <assert_print>
    1d48:	4819      	ldr	r0, [pc, #100]	; (1db0 <onoff_request+0x12c>)
    1d4a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    1d4e:	f008 fbb3 	bl	a4b8 <assert_post_action>
	parent->next = child;
    1d52:	601f      	str	r7, [r3, #0]
	list->tail = node;
    1d54:	6067      	str	r7, [r4, #4]
}
    1d56:	e7ed      	b.n	1d34 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    1d58:	4652      	mov	r2, sl
    1d5a:	2102      	movs	r1, #2
    1d5c:	4620      	mov	r0, r4
    1d5e:	f7ff fd8b 	bl	1878 <process_event>
    1d62:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    1d64:	4628      	mov	r0, r5
    1d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    1d6a:	f06f 050a 	mvn.w	r5, #10
    1d6e:	e7d8      	b.n	1d22 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    1d70:	f06f 0504 	mvn.w	r5, #4
    1d74:	e7d5      	b.n	1d22 <onoff_request+0x9e>
	__asm__ volatile(
    1d76:	f38a 8811 	msr	BASEPRI, sl
    1d7a:	f3bf 8f6f 	isb	sy
		if (notify) {
    1d7e:	f1b8 0f00 	cmp.w	r8, #0
    1d82:	d0ef      	beq.n	1d64 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    1d84:	2300      	movs	r3, #0
    1d86:	4632      	mov	r2, r6
    1d88:	4639      	mov	r1, r7
    1d8a:	4620      	mov	r0, r4
    1d8c:	f008 fb40 	bl	a410 <notify_one>
    1d90:	e7e8      	b.n	1d64 <onoff_request+0xe0>
    1d92:	bf00      	nop
    1d94:	0000b7ed 	.word	0x0000b7ed
    1d98:	0000b846 	.word	0x0000b846
    1d9c:	0000b53f 	.word	0x0000b53f
    1da0:	0000b85b 	.word	0x0000b85b
    1da4:	0000b81a 	.word	0x0000b81a
    1da8:	0000b831 	.word	0x0000b831
    1dac:	0000b7d7 	.word	0x0000b7d7
    1db0:	0000b74a 	.word	0x0000b74a

00001db4 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    1db4:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    1db6:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    1db8:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
    1dba:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    1dbe:	2a02      	cmp	r2, #2
{
    1dc0:	4603      	mov	r3, r0
	switch (method) {
    1dc2:	d00a      	beq.n	1dda <sys_notify_finalize+0x26>
    1dc4:	2a03      	cmp	r2, #3
    1dc6:	f04f 0100 	mov.w	r1, #0
    1dca:	d003      	beq.n	1dd4 <sys_notify_finalize+0x20>
    1dcc:	2a01      	cmp	r2, #1
    1dce:	d10a      	bne.n	1de6 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1dd0:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    1dd2:	e006      	b.n	1de2 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    1dd4:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1dd6:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1dd8:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    1dda:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1ddc:	2200      	movs	r2, #0
    1dde:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    1de0:	b958      	cbnz	r0, 1dfa <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    1de2:	2000      	movs	r0, #0
    1de4:	e7f8      	b.n	1dd8 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    1de6:	4906      	ldr	r1, [pc, #24]	; (1e00 <sys_notify_finalize+0x4c>)
    1de8:	4806      	ldr	r0, [pc, #24]	; (1e04 <sys_notify_finalize+0x50>)
    1dea:	4a07      	ldr	r2, [pc, #28]	; (1e08 <sys_notify_finalize+0x54>)
    1dec:	2345      	movs	r3, #69	; 0x45
    1dee:	f008 fb6a 	bl	a4c6 <assert_print>
    1df2:	4805      	ldr	r0, [pc, #20]	; (1e08 <sys_notify_finalize+0x54>)
    1df4:	2145      	movs	r1, #69	; 0x45
    1df6:	f008 fb5f 	bl	a4b8 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    1dfa:	f007 fe0b 	bl	9a14 <z_impl_k_poll_signal_raise>
    1dfe:	e7f0      	b.n	1de2 <sys_notify_finalize+0x2e>
    1e00:	0000c9f6 	.word	0x0000c9f6
    1e04:	0000b53f 	.word	0x0000b53f
    1e08:	0000b873 	.word	0x0000b873

00001e0c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    1e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp) != 0) {
    1e0e:	4e09      	ldr	r6, [pc, #36]	; (1e34 <extract_decimal+0x28>)
    1e10:	6801      	ldr	r1, [r0, #0]
{
    1e12:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    1e14:	270a      	movs	r7, #10
	size_t val = 0;
    1e16:	2000      	movs	r0, #0
    1e18:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1e1a:	3101      	adds	r1, #1
    1e1c:	781c      	ldrb	r4, [r3, #0]
    1e1e:	5d35      	ldrb	r5, [r6, r4]
    1e20:	076d      	lsls	r5, r5, #29
    1e22:	d401      	bmi.n	1e28 <extract_decimal+0x1c>
	}
	*str = sp;
    1e24:	6013      	str	r3, [r2, #0]
	return val;
}
    1e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    1e28:	fb07 4300 	mla	r3, r7, r0, r4
    1e2c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    1e30:	e7f2      	b.n	1e18 <extract_decimal+0xc>
    1e32:	bf00      	nop
    1e34:	0000d5e5 	.word	0x0000d5e5

00001e38 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    1e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e3c:	4615      	mov	r5, r2
    1e3e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    1e40:	78d3      	ldrb	r3, [r2, #3]
    1e42:	4a22      	ldr	r2, [pc, #136]	; (1ecc <encode_uint+0x94>)
    1e44:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
    1e48:	2b6f      	cmp	r3, #111	; 0x6f
{
    1e4a:	4680      	mov	r8, r0
    1e4c:	460f      	mov	r7, r1
    1e4e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    1e52:	d029      	beq.n	1ea8 <encode_uint+0x70>
    1e54:	d824      	bhi.n	1ea0 <encode_uint+0x68>
		return 10;
    1e56:	2b58      	cmp	r3, #88	; 0x58
    1e58:	bf0c      	ite	eq
    1e5a:	2610      	moveq	r6, #16
    1e5c:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    1e5e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    1e62:	4632      	mov	r2, r6
    1e64:	2300      	movs	r3, #0
    1e66:	4640      	mov	r0, r8
    1e68:	4639      	mov	r1, r7
    1e6a:	f7fe ffed 	bl	e48 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    1e6e:	2a09      	cmp	r2, #9
    1e70:	b2d4      	uxtb	r4, r2
    1e72:	d81e      	bhi.n	1eb2 <encode_uint+0x7a>
    1e74:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    1e76:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    1e78:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    1e7a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    1e7e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    1e82:	d301      	bcc.n	1e88 <encode_uint+0x50>
    1e84:	45d1      	cmp	r9, sl
    1e86:	d811      	bhi.n	1eac <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    1e88:	782b      	ldrb	r3, [r5, #0]
    1e8a:	069b      	lsls	r3, r3, #26
    1e8c:	d505      	bpl.n	1e9a <encode_uint+0x62>
		if (radix == 8) {
    1e8e:	2e08      	cmp	r6, #8
    1e90:	d115      	bne.n	1ebe <encode_uint+0x86>
			conv->altform_0 = true;
    1e92:	78ab      	ldrb	r3, [r5, #2]
    1e94:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    1e98:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    1e9a:	4648      	mov	r0, r9
    1e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    1ea0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    1ea4:	2b70      	cmp	r3, #112	; 0x70
    1ea6:	e7d7      	b.n	1e58 <encode_uint+0x20>
	switch (specifier) {
    1ea8:	2608      	movs	r6, #8
    1eaa:	e7d8      	b.n	1e5e <encode_uint+0x26>
		value /= radix;
    1eac:	4680      	mov	r8, r0
    1eae:	460f      	mov	r7, r1
    1eb0:	e7d7      	b.n	1e62 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    1eb2:	f1bb 0f01 	cmp.w	fp, #1
    1eb6:	bf0c      	ite	eq
    1eb8:	3437      	addeq	r4, #55	; 0x37
    1eba:	3457      	addne	r4, #87	; 0x57
    1ebc:	e7db      	b.n	1e76 <encode_uint+0x3e>
		} else if (radix == 16) {
    1ebe:	2e10      	cmp	r6, #16
    1ec0:	d1eb      	bne.n	1e9a <encode_uint+0x62>
			conv->altform_0c = true;
    1ec2:	78ab      	ldrb	r3, [r5, #2]
    1ec4:	f043 0310 	orr.w	r3, r3, #16
    1ec8:	e7e6      	b.n	1e98 <encode_uint+0x60>
    1eca:	bf00      	nop
    1ecc:	0000d5e5 	.word	0x0000d5e5

00001ed0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    1ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ed4:	b097      	sub	sp, #92	; 0x5c
    1ed6:	468a      	mov	sl, r1
    1ed8:	9003      	str	r0, [sp, #12]
    1eda:	4616      	mov	r6, r2
    1edc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1ede:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1ee0:	7830      	ldrb	r0, [r6, #0]
    1ee2:	b908      	cbnz	r0, 1ee8 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1ee4:	4628      	mov	r0, r5
    1ee6:	e34b      	b.n	2580 <z_cbvprintf_impl+0x6b0>
			OUTC(*fp++);
    1ee8:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    1eea:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1eec:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    1eee:	d007      	beq.n	1f00 <z_cbvprintf_impl+0x30>
			OUTC('%');
    1ef0:	9b03      	ldr	r3, [sp, #12]
    1ef2:	4651      	mov	r1, sl
    1ef4:	4798      	blx	r3
    1ef6:	2800      	cmp	r0, #0
    1ef8:	f2c0 8342 	blt.w	2580 <z_cbvprintf_impl+0x6b0>
    1efc:	3501      	adds	r5, #1
		if (bps == NULL) {
    1efe:	e1f0      	b.n	22e2 <z_cbvprintf_impl+0x412>
		} state = {
    1f00:	2218      	movs	r2, #24
    1f02:	2100      	movs	r1, #0
    1f04:	a810      	add	r0, sp, #64	; 0x40
    1f06:	f008 ff98 	bl	ae3a <memset>
	if (*sp == '%') {
    1f0a:	7873      	ldrb	r3, [r6, #1]
    1f0c:	2b25      	cmp	r3, #37	; 0x25
    1f0e:	f000 80a3 	beq.w	2058 <z_cbvprintf_impl+0x188>
    1f12:	2300      	movs	r3, #0
    1f14:	1c71      	adds	r1, r6, #1
    1f16:	4698      	mov	r8, r3
    1f18:	469e      	mov	lr, r3
    1f1a:	469c      	mov	ip, r3
    1f1c:	4618      	mov	r0, r3
    1f1e:	460f      	mov	r7, r1
		switch (*sp) {
    1f20:	f811 2b01 	ldrb.w	r2, [r1], #1
    1f24:	2a2b      	cmp	r2, #43	; 0x2b
    1f26:	f000 80c6 	beq.w	20b6 <z_cbvprintf_impl+0x1e6>
    1f2a:	f200 80bd 	bhi.w	20a8 <z_cbvprintf_impl+0x1d8>
    1f2e:	2a20      	cmp	r2, #32
    1f30:	f000 80c4 	beq.w	20bc <z_cbvprintf_impl+0x1ec>
    1f34:	2a23      	cmp	r2, #35	; 0x23
    1f36:	f000 80c4 	beq.w	20c2 <z_cbvprintf_impl+0x1f2>
    1f3a:	b12b      	cbz	r3, 1f48 <z_cbvprintf_impl+0x78>
    1f3c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1f44:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1f48:	f1b8 0f00 	cmp.w	r8, #0
    1f4c:	d005      	beq.n	1f5a <z_cbvprintf_impl+0x8a>
    1f4e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1f52:	f043 0320 	orr.w	r3, r3, #32
    1f56:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1f5a:	f1be 0f00 	cmp.w	lr, #0
    1f5e:	d005      	beq.n	1f6c <z_cbvprintf_impl+0x9c>
    1f60:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1f64:	f043 0310 	orr.w	r3, r3, #16
    1f68:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1f6c:	f1bc 0f00 	cmp.w	ip, #0
    1f70:	d005      	beq.n	1f7e <z_cbvprintf_impl+0xae>
    1f72:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1f76:	f043 0308 	orr.w	r3, r3, #8
    1f7a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1f7e:	b128      	cbz	r0, 1f8c <z_cbvprintf_impl+0xbc>
    1f80:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1f84:	f043 0304 	orr.w	r3, r3, #4
    1f88:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    1f8c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1f90:	f003 0144 	and.w	r1, r3, #68	; 0x44
    1f94:	2944      	cmp	r1, #68	; 0x44
    1f96:	d103      	bne.n	1fa0 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
    1f98:	f36f 1386 	bfc	r3, #6, #1
    1f9c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    1fa0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1fa4:	9709      	str	r7, [sp, #36]	; 0x24
    1fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
    1faa:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    1fac:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    1fb0:	f040 808c 	bne.w	20cc <z_cbvprintf_impl+0x1fc>
		conv->width_star = true;
    1fb4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    1fb8:	f043 0301 	orr.w	r3, r3, #1
    1fbc:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    1fc0:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    1fc2:	781a      	ldrb	r2, [r3, #0]
    1fc4:	2a2e      	cmp	r2, #46	; 0x2e
    1fc6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1fca:	bf0c      	ite	eq
    1fcc:	2101      	moveq	r1, #1
    1fce:	2100      	movne	r1, #0
    1fd0:	f361 0241 	bfi	r2, r1, #1, #1
    1fd4:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    1fd8:	d10c      	bne.n	1ff4 <z_cbvprintf_impl+0x124>
	++sp;
    1fda:	1c5a      	adds	r2, r3, #1
    1fdc:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    1fde:	785a      	ldrb	r2, [r3, #1]
    1fe0:	2a2a      	cmp	r2, #42	; 0x2a
    1fe2:	f040 8083 	bne.w	20ec <z_cbvprintf_impl+0x21c>
		conv->prec_star = true;
    1fe6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1fea:	f042 0204 	orr.w	r2, r2, #4
    1fee:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    1ff2:	3302      	adds	r3, #2
	switch (*sp) {
    1ff4:	781a      	ldrb	r2, [r3, #0]
    1ff6:	2a6c      	cmp	r2, #108	; 0x6c
    1ff8:	f000 80a4 	beq.w	2144 <z_cbvprintf_impl+0x274>
    1ffc:	f200 8086 	bhi.w	210c <z_cbvprintf_impl+0x23c>
    2000:	2a68      	cmp	r2, #104	; 0x68
    2002:	f000 808c 	beq.w	211e <z_cbvprintf_impl+0x24e>
    2006:	2a6a      	cmp	r2, #106	; 0x6a
    2008:	f000 80a5 	beq.w	2156 <z_cbvprintf_impl+0x286>
    200c:	2a4c      	cmp	r2, #76	; 0x4c
    200e:	f000 80aa 	beq.w	2166 <z_cbvprintf_impl+0x296>
	conv->specifier = *sp++;
    2012:	461a      	mov	r2, r3
    2014:	f812 3b01 	ldrb.w	r3, [r2], #1
    2018:	9204      	str	r2, [sp, #16]
	switch (conv->specifier) {
    201a:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    201c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	conv->specifier = *sp++;
    2020:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    2024:	f200 8117 	bhi.w	2256 <z_cbvprintf_impl+0x386>
    2028:	2b6d      	cmp	r3, #109	; 0x6d
    202a:	f200 80a9 	bhi.w	2180 <z_cbvprintf_impl+0x2b0>
    202e:	2b69      	cmp	r3, #105	; 0x69
    2030:	f200 8111 	bhi.w	2256 <z_cbvprintf_impl+0x386>
    2034:	2b57      	cmp	r3, #87	; 0x57
    2036:	f200 80be 	bhi.w	21b6 <z_cbvprintf_impl+0x2e6>
    203a:	2b41      	cmp	r3, #65	; 0x41
    203c:	d003      	beq.n	2046 <z_cbvprintf_impl+0x176>
    203e:	3b45      	subs	r3, #69	; 0x45
    2040:	2b02      	cmp	r3, #2
    2042:	f200 8108 	bhi.w	2256 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_FP;
    2046:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    204a:	2204      	movs	r2, #4
    204c:	f362 0302 	bfi	r3, r2, #0, #3
    2050:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    2054:	2301      	movs	r3, #1
			break;
    2056:	e0ca      	b.n	21ee <z_cbvprintf_impl+0x31e>
		conv->specifier = *sp++;
    2058:	1cb2      	adds	r2, r6, #2
    205a:	9204      	str	r2, [sp, #16]
    205c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    2060:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2064:	07d9      	lsls	r1, r3, #31
    2066:	f140 80fd 	bpl.w	2264 <z_cbvprintf_impl+0x394>
			width = va_arg(ap, int);
    206a:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    206e:	f1b8 0f00 	cmp.w	r8, #0
    2072:	da07      	bge.n	2084 <z_cbvprintf_impl+0x1b4>
				conv->flag_dash = true;
    2074:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    2078:	f042 0204 	orr.w	r2, r2, #4
    207c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    2080:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    2084:	075a      	lsls	r2, r3, #29
    2086:	f140 80f6 	bpl.w	2276 <z_cbvprintf_impl+0x3a6>
			int arg = va_arg(ap, int);
    208a:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    208e:	f1bb 0f00 	cmp.w	fp, #0
    2092:	f280 80f5 	bge.w	2280 <z_cbvprintf_impl+0x3b0>
				conv->prec_present = false;
    2096:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    209a:	f36f 0341 	bfc	r3, #1, #1
    209e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    20a2:	f04f 3bff 	mov.w	fp, #4294967295
    20a6:	e0eb      	b.n	2280 <z_cbvprintf_impl+0x3b0>
		switch (*sp) {
    20a8:	2a2d      	cmp	r2, #45	; 0x2d
    20aa:	d00d      	beq.n	20c8 <z_cbvprintf_impl+0x1f8>
    20ac:	2a30      	cmp	r2, #48	; 0x30
    20ae:	f47f af44 	bne.w	1f3a <z_cbvprintf_impl+0x6a>
    20b2:	2301      	movs	r3, #1
	} while (loop);
    20b4:	e733      	b.n	1f1e <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    20b6:	f04f 0c01 	mov.w	ip, #1
    20ba:	e730      	b.n	1f1e <z_cbvprintf_impl+0x4e>
    20bc:	f04f 0e01 	mov.w	lr, #1
    20c0:	e72d      	b.n	1f1e <z_cbvprintf_impl+0x4e>
    20c2:	f04f 0801 	mov.w	r8, #1
    20c6:	e72a      	b.n	1f1e <z_cbvprintf_impl+0x4e>
    20c8:	2001      	movs	r0, #1
    20ca:	e728      	b.n	1f1e <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
    20cc:	a809      	add	r0, sp, #36	; 0x24
    20ce:	f7ff fe9d 	bl	1e0c <extract_decimal>
	if (sp != wp) {
    20d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    20d4:	42bb      	cmp	r3, r7
    20d6:	f43f af74 	beq.w	1fc2 <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    20da:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    20de:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    20e0:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    20e2:	f360 0241 	bfi	r2, r0, #1, #1
    20e6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    20ea:	e76a      	b.n	1fc2 <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
    20ec:	a809      	add	r0, sp, #36	; 0x24
    20ee:	f7ff fe8d 	bl	1e0c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    20f2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    20f6:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    20f8:	f3c3 0240 	ubfx	r2, r3, #1, #1
    20fc:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    2100:	f362 0341 	bfi	r3, r2, #1, #1
    2104:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    2108:	9b09      	ldr	r3, [sp, #36]	; 0x24
    210a:	e773      	b.n	1ff4 <z_cbvprintf_impl+0x124>
	switch (*sp) {
    210c:	2a74      	cmp	r2, #116	; 0x74
    210e:	d026      	beq.n	215e <z_cbvprintf_impl+0x28e>
    2110:	2a7a      	cmp	r2, #122	; 0x7a
    2112:	f47f af7e 	bne.w	2012 <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
    2116:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    211a:	2106      	movs	r1, #6
    211c:	e00c      	b.n	2138 <z_cbvprintf_impl+0x268>
		if (*++sp == 'h') {
    211e:	785a      	ldrb	r2, [r3, #1]
    2120:	2a68      	cmp	r2, #104	; 0x68
    2122:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2126:	d106      	bne.n	2136 <z_cbvprintf_impl+0x266>
			conv->length_mod = LENGTH_HH;
    2128:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    212a:	f361 02c6 	bfi	r2, r1, #3, #4
    212e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    2132:	3302      	adds	r3, #2
    2134:	e76d      	b.n	2012 <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
    2136:	2102      	movs	r1, #2
    2138:	f361 02c6 	bfi	r2, r1, #3, #4
    213c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    2140:	3301      	adds	r3, #1
    2142:	e766      	b.n	2012 <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
    2144:	785a      	ldrb	r2, [r3, #1]
    2146:	2a6c      	cmp	r2, #108	; 0x6c
    2148:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    214c:	d101      	bne.n	2152 <z_cbvprintf_impl+0x282>
			conv->length_mod = LENGTH_LL;
    214e:	2104      	movs	r1, #4
    2150:	e7eb      	b.n	212a <z_cbvprintf_impl+0x25a>
			conv->length_mod = LENGTH_L;
    2152:	2103      	movs	r1, #3
    2154:	e7f0      	b.n	2138 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_J;
    2156:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    215a:	2105      	movs	r1, #5
    215c:	e7ec      	b.n	2138 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_T;
    215e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2162:	2107      	movs	r1, #7
    2164:	e7e8      	b.n	2138 <z_cbvprintf_impl+0x268>
		conv->unsupported = true;
    2166:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    216a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    216e:	f022 0202 	bic.w	r2, r2, #2
    2172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    2176:	f042 0202 	orr.w	r2, r2, #2
    217a:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    217e:	e7df      	b.n	2140 <z_cbvprintf_impl+0x270>
	switch (conv->specifier) {
    2180:	3b6e      	subs	r3, #110	; 0x6e
    2182:	b2d9      	uxtb	r1, r3
    2184:	2301      	movs	r3, #1
    2186:	408b      	lsls	r3, r1
    2188:	f240 4182 	movw	r1, #1154	; 0x482
    218c:	420b      	tst	r3, r1
    218e:	d138      	bne.n	2202 <z_cbvprintf_impl+0x332>
    2190:	f013 0f24 	tst.w	r3, #36	; 0x24
    2194:	d152      	bne.n	223c <z_cbvprintf_impl+0x36c>
    2196:	07df      	lsls	r7, r3, #31
    2198:	d55d      	bpl.n	2256 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_PTR;
    219a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    219e:	2103      	movs	r1, #3
    21a0:	f361 0302 	bfi	r3, r1, #0, #3
    21a4:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    21a8:	f002 0378 	and.w	r3, r2, #120	; 0x78
    21ac:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
    21b0:	4243      	negs	r3, r0
    21b2:	4143      	adcs	r3, r0
    21b4:	e01b      	b.n	21ee <z_cbvprintf_impl+0x31e>
	switch (conv->specifier) {
    21b6:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    21ba:	b2c9      	uxtb	r1, r1
    21bc:	2001      	movs	r0, #1
    21be:	fa00 f101 	lsl.w	r1, r0, r1
    21c2:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    21c6:	f47f af3e 	bne.w	2046 <z_cbvprintf_impl+0x176>
    21ca:	f640 0701 	movw	r7, #2049	; 0x801
    21ce:	4239      	tst	r1, r7
    21d0:	d11d      	bne.n	220e <z_cbvprintf_impl+0x33e>
    21d2:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    21d6:	d03e      	beq.n	2256 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_SINT;
    21d8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    21dc:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    21e0:	f002 0278 	and.w	r2, r2, #120	; 0x78
    21e4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    21e6:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    21ea:	d034      	beq.n	2256 <z_cbvprintf_impl+0x386>
	bool unsupported = false;
    21ec:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    21ee:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    21f2:	f3c2 0140 	ubfx	r1, r2, #1, #1
    21f6:	430b      	orrs	r3, r1
    21f8:	f363 0241 	bfi	r2, r3, #1, #1
    21fc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    2200:	e72e      	b.n	2060 <z_cbvprintf_impl+0x190>
		conv->specifier_cat = SPECIFIER_UINT;
    2202:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2206:	2102      	movs	r1, #2
    2208:	f361 0302 	bfi	r3, r1, #0, #3
    220c:	e7e8      	b.n	21e0 <z_cbvprintf_impl+0x310>
    220e:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    2212:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    2214:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    2218:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    221c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    221e:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    2222:	bf02      	ittt	eq
    2224:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    2228:	f041 0101 	orreq.w	r1, r1, #1
    222c:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    2230:	2b63      	cmp	r3, #99	; 0x63
    2232:	d1db      	bne.n	21ec <z_cbvprintf_impl+0x31c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2234:	1e13      	subs	r3, r2, #0
    2236:	bf18      	it	ne
    2238:	2301      	movne	r3, #1
    223a:	e7d8      	b.n	21ee <z_cbvprintf_impl+0x31e>
		conv->specifier_cat = SPECIFIER_PTR;
    223c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2240:	2103      	movs	r1, #3
    2242:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    2246:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    224a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    224e:	bf14      	ite	ne
    2250:	2301      	movne	r3, #1
    2252:	2300      	moveq	r3, #0
    2254:	e7cb      	b.n	21ee <z_cbvprintf_impl+0x31e>
		conv->invalid = true;
    2256:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    225a:	f043 0301 	orr.w	r3, r3, #1
    225e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    2262:	e7c3      	b.n	21ec <z_cbvprintf_impl+0x31c>
		} else if (conv->width_present) {
    2264:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    2268:	2a00      	cmp	r2, #0
			width = conv->width_value;
    226a:	bfb4      	ite	lt
    226c:	f8dd 804c 	ldrlt.w	r8, [sp, #76]	; 0x4c
		int width = -1;
    2270:	f04f 38ff 	movge.w	r8, #4294967295
    2274:	e706      	b.n	2084 <z_cbvprintf_impl+0x1b4>
		} else if (conv->prec_present) {
    2276:	079f      	lsls	r7, r3, #30
    2278:	f57f af13 	bpl.w	20a2 <z_cbvprintf_impl+0x1d2>
			precision = conv->prec_value;
    227c:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
			= (enum length_mod_enum)conv->length_mod;
    2280:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->pad0_value = 0;
    2284:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2286:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    228a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		enum specifier_cat_enum specifier_cat
    228e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2292:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    2294:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2298:	d133      	bne.n	2302 <z_cbvprintf_impl+0x432>
			switch (length_mod) {
    229a:	1ecb      	subs	r3, r1, #3
    229c:	2b04      	cmp	r3, #4
    229e:	d804      	bhi.n	22aa <z_cbvprintf_impl+0x3da>
    22a0:	e8df f003 	tbb	[pc, r3]
    22a4:	21464621 	.word	0x21464621
    22a8:	21          	.byte	0x21
    22a9:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    22aa:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    22ac:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    22ae:	ea4f 72e3 	mov.w	r2, r3, asr #31
    22b2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    22b6:	d11c      	bne.n	22f2 <z_cbvprintf_impl+0x422>
				value->sint = (signed char)value->sint;
    22b8:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    22bc:	17da      	asrs	r2, r3, #31
    22be:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    22c2:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    22c4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    22c8:	f013 0703 	ands.w	r7, r3, #3
    22cc:	d050      	beq.n	2370 <z_cbvprintf_impl+0x4a0>
			OUTS(sp, fp);
    22ce:	9b04      	ldr	r3, [sp, #16]
    22d0:	9803      	ldr	r0, [sp, #12]
    22d2:	4632      	mov	r2, r6
    22d4:	4651      	mov	r1, sl
    22d6:	f008 f8d8 	bl	a48a <outs>
    22da:	2800      	cmp	r0, #0
    22dc:	f2c0 8150 	blt.w	2580 <z_cbvprintf_impl+0x6b0>
    22e0:	4405      	add	r5, r0
			continue;
    22e2:	9e04      	ldr	r6, [sp, #16]
    22e4:	e5fc      	b.n	1ee0 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    22e6:	f854 3b04 	ldr.w	r3, [r4], #4
    22ea:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    22ec:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    22f0:	e7e8      	b.n	22c4 <z_cbvprintf_impl+0x3f4>
			} else if (length_mod == LENGTH_H) {
    22f2:	2902      	cmp	r1, #2
    22f4:	d1e5      	bne.n	22c2 <z_cbvprintf_impl+0x3f2>
				value->sint = (short)value->sint;
    22f6:	b21a      	sxth	r2, r3
    22f8:	f343 33c0 	sbfx	r3, r3, #15, #1
    22fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    2300:	e7df      	b.n	22c2 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2302:	2b02      	cmp	r3, #2
    2304:	d124      	bne.n	2350 <z_cbvprintf_impl+0x480>
			switch (length_mod) {
    2306:	1ecb      	subs	r3, r1, #3
    2308:	2b04      	cmp	r3, #4
    230a:	d804      	bhi.n	2316 <z_cbvprintf_impl+0x446>
    230c:	e8df f003 	tbb	[pc, r3]
    2310:	18101018 	.word	0x18101018
    2314:	18          	.byte	0x18
    2315:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    2316:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    2318:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    231c:	f04f 0200 	mov.w	r2, #0
    2320:	d014      	beq.n	234c <z_cbvprintf_impl+0x47c>
			} else if (length_mod == LENGTH_H) {
    2322:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    2324:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    2328:	d1cc      	bne.n	22c4 <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned short)value->uint;
    232a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    232c:	9310      	str	r3, [sp, #64]	; 0x40
    232e:	e7c9      	b.n	22c4 <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap,
    2330:	3407      	adds	r4, #7
    2332:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    2336:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    233a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    233e:	e7c1      	b.n	22c4 <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap, size_t);
    2340:	f854 3b04 	ldr.w	r3, [r4], #4
    2344:	9310      	str	r3, [sp, #64]	; 0x40
    2346:	2300      	movs	r3, #0
    2348:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    234a:	e7bb      	b.n	22c4 <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned char)value->uint;
    234c:	b2db      	uxtb	r3, r3
    234e:	e7cd      	b.n	22ec <z_cbvprintf_impl+0x41c>
		} else if (specifier_cat == SPECIFIER_FP) {
    2350:	2b04      	cmp	r3, #4
    2352:	d108      	bne.n	2366 <z_cbvprintf_impl+0x496>
					(sint_value_type)va_arg(ap, long long);
    2354:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    2356:	f024 0407 	bic.w	r4, r4, #7
    235a:	e9d4 2300 	ldrd	r2, r3, [r4]
    235e:	3408      	adds	r4, #8
    2360:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    2364:	e7ae      	b.n	22c4 <z_cbvprintf_impl+0x3f4>
		} else if (specifier_cat == SPECIFIER_PTR) {
    2366:	2b03      	cmp	r3, #3
    2368:	d1ac      	bne.n	22c4 <z_cbvprintf_impl+0x3f4>
			value->ptr = va_arg(ap, void *);
    236a:	f854 3b04 	ldr.w	r3, [r4], #4
    236e:	e7dd      	b.n	232c <z_cbvprintf_impl+0x45c>
		switch (conv->specifier) {
    2370:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    2374:	2878      	cmp	r0, #120	; 0x78
    2376:	d8b4      	bhi.n	22e2 <z_cbvprintf_impl+0x412>
    2378:	2862      	cmp	r0, #98	; 0x62
    237a:	d81d      	bhi.n	23b8 <z_cbvprintf_impl+0x4e8>
    237c:	2825      	cmp	r0, #37	; 0x25
    237e:	f43f adb7 	beq.w	1ef0 <z_cbvprintf_impl+0x20>
    2382:	2858      	cmp	r0, #88	; 0x58
    2384:	d1ad      	bne.n	22e2 <z_cbvprintf_impl+0x412>
			bps = encode_uint(value->uint, conv, buf, bpe);
    2386:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    238a:	9300      	str	r3, [sp, #0]
    238c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2390:	ab0a      	add	r3, sp, #40	; 0x28
    2392:	aa12      	add	r2, sp, #72	; 0x48
    2394:	f7ff fd50 	bl	1e38 <encode_uint>
			if (precision >= 0) {
    2398:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    239c:	4681      	mov	r9, r0
			if (precision >= 0) {
    239e:	f280 8099 	bge.w	24d4 <z_cbvprintf_impl+0x604>
		if (bps == NULL) {
    23a2:	f1b9 0f00 	cmp.w	r9, #0
    23a6:	d09c      	beq.n	22e2 <z_cbvprintf_impl+0x412>
		size_t nj_len = (bpe - bps);
    23a8:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    23ac:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    23b0:	2f00      	cmp	r7, #0
    23b2:	d050      	beq.n	2456 <z_cbvprintf_impl+0x586>
			nj_len += 1U;
    23b4:	3301      	adds	r3, #1
    23b6:	e04e      	b.n	2456 <z_cbvprintf_impl+0x586>
		switch (conv->specifier) {
    23b8:	3863      	subs	r0, #99	; 0x63
    23ba:	2815      	cmp	r0, #21
    23bc:	d891      	bhi.n	22e2 <z_cbvprintf_impl+0x412>
    23be:	a201      	add	r2, pc, #4	; (adr r2, 23c4 <z_cbvprintf_impl+0x4f4>)
    23c0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    23c4:	00002445 	.word	0x00002445
    23c8:	000024a9 	.word	0x000024a9
    23cc:	000022e3 	.word	0x000022e3
    23d0:	000022e3 	.word	0x000022e3
    23d4:	000022e3 	.word	0x000022e3
    23d8:	000022e3 	.word	0x000022e3
    23dc:	000024a9 	.word	0x000024a9
    23e0:	000022e3 	.word	0x000022e3
    23e4:	000022e3 	.word	0x000022e3
    23e8:	000022e3 	.word	0x000022e3
    23ec:	000022e3 	.word	0x000022e3
    23f0:	00002535 	.word	0x00002535
    23f4:	000024cf 	.word	0x000024cf
    23f8:	000024f7 	.word	0x000024f7
    23fc:	000022e3 	.word	0x000022e3
    2400:	000022e3 	.word	0x000022e3
    2404:	0000241d 	.word	0x0000241d
    2408:	000022e3 	.word	0x000022e3
    240c:	000024cf 	.word	0x000024cf
    2410:	000022e3 	.word	0x000022e3
    2414:	000022e3 	.word	0x000022e3
    2418:	000024cf 	.word	0x000024cf
			if (precision >= 0) {
    241c:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    2420:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
			if (precision >= 0) {
    2424:	db0a      	blt.n	243c <z_cbvprintf_impl+0x56c>
				len = strnlen(bps, precision);
    2426:	4659      	mov	r1, fp
    2428:	4648      	mov	r0, r9
    242a:	f008 fd0e 	bl	ae4a <strnlen>
		if (bps == NULL) {
    242e:	f1b9 0f00 	cmp.w	r9, #0
    2432:	f43f af56 	beq.w	22e2 <z_cbvprintf_impl+0x412>
			bpe = bps + len;
    2436:	eb09 0600 	add.w	r6, r9, r0
    243a:	e077      	b.n	252c <z_cbvprintf_impl+0x65c>
				len = strlen(bps);
    243c:	4648      	mov	r0, r9
    243e:	f7fe fe6d 	bl	111c <strlen>
    2442:	e7f8      	b.n	2436 <z_cbvprintf_impl+0x566>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2444:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2446:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    244a:	2700      	movs	r7, #0
			bpe = buf + 1;
    244c:	f10d 0629 	add.w	r6, sp, #41	; 0x29
			bps = buf;
    2450:	f10d 0928 	add.w	r9, sp, #40	; 0x28
		size_t nj_len = (bpe - bps);
    2454:	2301      	movs	r3, #1
		if (conv->altform_0c) {
    2456:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    245a:	f011 0210 	ands.w	r2, r1, #16
    245e:	9206      	str	r2, [sp, #24]
    2460:	f000 8082 	beq.w	2568 <z_cbvprintf_impl+0x698>
			nj_len += 2U;
    2464:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    2466:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2468:	9205      	str	r2, [sp, #20]
    246a:	4413      	add	r3, r2
		if (conv->pad_fp) {
    246c:	064a      	lsls	r2, r1, #25
			nj_len += conv->pad0_pre_exp;
    246e:	bf44      	itt	mi
    2470:	9914      	ldrmi	r1, [sp, #80]	; 0x50
    2472:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    2474:	f1b8 0f00 	cmp.w	r8, #0
    2478:	f340 808f 	ble.w	259a <z_cbvprintf_impl+0x6ca>
			width -= (int)nj_len;
    247c:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    2480:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2484:	0758      	lsls	r0, r3, #29
    2486:	f3c3 0b80 	ubfx	fp, r3, #2, #1
    248a:	f100 8086 	bmi.w	259a <z_cbvprintf_impl+0x6ca>
				if (conv->flag_zero) {
    248e:	0659      	lsls	r1, r3, #25
    2490:	d579      	bpl.n	2586 <z_cbvprintf_impl+0x6b6>
					if (sign != 0) {
    2492:	b13f      	cbz	r7, 24a4 <z_cbvprintf_impl+0x5d4>
						OUTC(sign);
    2494:	9b03      	ldr	r3, [sp, #12]
    2496:	4651      	mov	r1, sl
    2498:	4638      	mov	r0, r7
    249a:	4798      	blx	r3
    249c:	2800      	cmp	r0, #0
    249e:	db6f      	blt.n	2580 <z_cbvprintf_impl+0x6b0>
    24a0:	3501      	adds	r5, #1
    24a2:	465f      	mov	r7, fp
					pad = '0';
    24a4:	2330      	movs	r3, #48	; 0x30
    24a6:	e06f      	b.n	2588 <z_cbvprintf_impl+0x6b8>
			if (conv->flag_plus) {
    24a8:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    24aa:	bf5c      	itt	pl
    24ac:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    24b0:	015f      	lslpl	r7, r3, #5
			sint = value->sint;
    24b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
				sign = '+';
    24b6:	bf48      	it	mi
    24b8:	272b      	movmi	r7, #43	; 0x2b
			if (sint < 0) {
    24ba:	2b00      	cmp	r3, #0
    24bc:	f6bf af63 	bge.w	2386 <z_cbvprintf_impl+0x4b6>
				value->uint = (uint_value_type)-sint;
    24c0:	4252      	negs	r2, r2
    24c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    24c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    24ca:	272d      	movs	r7, #45	; 0x2d
    24cc:	e75b      	b.n	2386 <z_cbvprintf_impl+0x4b6>
		switch (conv->specifier) {
    24ce:	2700      	movs	r7, #0
    24d0:	e759      	b.n	2386 <z_cbvprintf_impl+0x4b6>
		char sign = 0;
    24d2:	2700      	movs	r7, #0
				conv->flag_zero = false;
    24d4:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    24d8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    24dc:	eba3 0309 	sub.w	r3, r3, r9
				conv->flag_zero = false;
    24e0:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    24e4:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    24e6:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    24ea:	f67f af5a 	bls.w	23a2 <z_cbvprintf_impl+0x4d2>
					conv->pad0_value = precision - (int)len;
    24ee:	ebab 0303 	sub.w	r3, fp, r3
    24f2:	9313      	str	r3, [sp, #76]	; 0x4c
    24f4:	e755      	b.n	23a2 <z_cbvprintf_impl+0x4d2>
			if (value->ptr != NULL) {
    24f6:	9810      	ldr	r0, [sp, #64]	; 0x40
    24f8:	b380      	cbz	r0, 255c <z_cbvprintf_impl+0x68c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    24fa:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    24fe:	ab0a      	add	r3, sp, #40	; 0x28
    2500:	9600      	str	r6, [sp, #0]
    2502:	aa12      	add	r2, sp, #72	; 0x48
    2504:	2100      	movs	r1, #0
    2506:	f7ff fc97 	bl	1e38 <encode_uint>
				conv->altform_0c = true;
    250a:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    250e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2512:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2516:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    251a:	f1bb 0f00 	cmp.w	fp, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    251e:	4681      	mov	r9, r0
				conv->altform_0c = true;
    2520:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    2524:	dad5      	bge.n	24d2 <z_cbvprintf_impl+0x602>
		if (bps == NULL) {
    2526:	2800      	cmp	r0, #0
    2528:	f43f aedb 	beq.w	22e2 <z_cbvprintf_impl+0x412>
		size_t nj_len = (bpe - bps);
    252c:	eba6 0309 	sub.w	r3, r6, r9
		char sign = 0;
    2530:	2700      	movs	r7, #0
    2532:	e790      	b.n	2456 <z_cbvprintf_impl+0x586>
				store_count(conv, value->ptr, count);
    2534:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    2536:	2907      	cmp	r1, #7
    2538:	f63f aed3 	bhi.w	22e2 <z_cbvprintf_impl+0x412>
    253c:	e8df f001 	tbb	[pc, r1]
    2540:	0c06040c 	.word	0x0c06040c
    2544:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    2548:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    254a:	e6ca      	b.n	22e2 <z_cbvprintf_impl+0x412>
		*(short *)dp = (short)count;
    254c:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    254e:	e6c8      	b.n	22e2 <z_cbvprintf_impl+0x412>
		*(intmax_t *)dp = (intmax_t)count;
    2550:	17ea      	asrs	r2, r5, #31
    2552:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    2556:	e6c4      	b.n	22e2 <z_cbvprintf_impl+0x412>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2558:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    255a:	e6c2      	b.n	22e2 <z_cbvprintf_impl+0x412>
			bpe = bps + 5;
    255c:	4e30      	ldr	r6, [pc, #192]	; (2620 <z_cbvprintf_impl+0x750>)
		char sign = 0;
    255e:	4607      	mov	r7, r0
    2560:	f1a6 0905 	sub.w	r9, r6, #5
		size_t nj_len = (bpe - bps);
    2564:	2305      	movs	r3, #5
    2566:	e776      	b.n	2456 <z_cbvprintf_impl+0x586>
		} else if (conv->altform_0) {
    2568:	0708      	lsls	r0, r1, #28
			nj_len += 1U;
    256a:	bf48      	it	mi
    256c:	3301      	addmi	r3, #1
    256e:	e77a      	b.n	2466 <z_cbvprintf_impl+0x596>
					OUTC(pad);
    2570:	4618      	mov	r0, r3
    2572:	9307      	str	r3, [sp, #28]
    2574:	4651      	mov	r1, sl
    2576:	9b03      	ldr	r3, [sp, #12]
    2578:	4798      	blx	r3
    257a:	2800      	cmp	r0, #0
    257c:	9b07      	ldr	r3, [sp, #28]
    257e:	da04      	bge.n	258a <z_cbvprintf_impl+0x6ba>
#undef OUTS
#undef OUTC
}
    2580:	b017      	add	sp, #92	; 0x5c
    2582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2586:	2320      	movs	r3, #32
					pad = '0';
    2588:	46c3      	mov	fp, r8
				while (width-- > 0) {
    258a:	4659      	mov	r1, fp
    258c:	2900      	cmp	r1, #0
    258e:	f10b 3bff 	add.w	fp, fp, #4294967295
    2592:	dced      	bgt.n	2570 <z_cbvprintf_impl+0x6a0>
    2594:	4445      	add	r5, r8
    2596:	1a6d      	subs	r5, r5, r1
    2598:	46d8      	mov	r8, fp
		if (sign != 0) {
    259a:	b137      	cbz	r7, 25aa <z_cbvprintf_impl+0x6da>
			OUTC(sign);
    259c:	9b03      	ldr	r3, [sp, #12]
    259e:	4651      	mov	r1, sl
    25a0:	4638      	mov	r0, r7
    25a2:	4798      	blx	r3
    25a4:	2800      	cmp	r0, #0
    25a6:	dbeb      	blt.n	2580 <z_cbvprintf_impl+0x6b0>
    25a8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    25aa:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    25ae:	06da      	lsls	r2, r3, #27
    25b0:	d401      	bmi.n	25b6 <z_cbvprintf_impl+0x6e6>
    25b2:	071b      	lsls	r3, r3, #28
    25b4:	d506      	bpl.n	25c4 <z_cbvprintf_impl+0x6f4>
				OUTC('0');
    25b6:	9b03      	ldr	r3, [sp, #12]
    25b8:	4651      	mov	r1, sl
    25ba:	2030      	movs	r0, #48	; 0x30
    25bc:	4798      	blx	r3
    25be:	2800      	cmp	r0, #0
    25c0:	dbde      	blt.n	2580 <z_cbvprintf_impl+0x6b0>
    25c2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    25c4:	9b06      	ldr	r3, [sp, #24]
    25c6:	b13b      	cbz	r3, 25d8 <z_cbvprintf_impl+0x708>
				OUTC(conv->specifier);
    25c8:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    25cc:	9b03      	ldr	r3, [sp, #12]
    25ce:	4651      	mov	r1, sl
    25d0:	4798      	blx	r3
    25d2:	2800      	cmp	r0, #0
    25d4:	dbd4      	blt.n	2580 <z_cbvprintf_impl+0x6b0>
    25d6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    25d8:	9f05      	ldr	r7, [sp, #20]
    25da:	442f      	add	r7, r5
    25dc:	e006      	b.n	25ec <z_cbvprintf_impl+0x71c>
				OUTC('0');
    25de:	9b03      	ldr	r3, [sp, #12]
    25e0:	4651      	mov	r1, sl
    25e2:	2030      	movs	r0, #48	; 0x30
    25e4:	4798      	blx	r3
    25e6:	2800      	cmp	r0, #0
    25e8:	dbca      	blt.n	2580 <z_cbvprintf_impl+0x6b0>
    25ea:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    25ec:	1b7b      	subs	r3, r7, r5
    25ee:	2b00      	cmp	r3, #0
    25f0:	dcf5      	bgt.n	25de <z_cbvprintf_impl+0x70e>
			OUTS(bps, bpe);
    25f2:	9803      	ldr	r0, [sp, #12]
    25f4:	4633      	mov	r3, r6
    25f6:	464a      	mov	r2, r9
    25f8:	4651      	mov	r1, sl
    25fa:	f007 ff46 	bl	a48a <outs>
    25fe:	2800      	cmp	r0, #0
    2600:	dbbe      	blt.n	2580 <z_cbvprintf_impl+0x6b0>
    2602:	4405      	add	r5, r0
		while (width > 0) {
    2604:	44a8      	add	r8, r5
    2606:	eba8 0305 	sub.w	r3, r8, r5
    260a:	2b00      	cmp	r3, #0
    260c:	f77f ae69 	ble.w	22e2 <z_cbvprintf_impl+0x412>
			OUTC(' ');
    2610:	9b03      	ldr	r3, [sp, #12]
    2612:	4651      	mov	r1, sl
    2614:	2020      	movs	r0, #32
    2616:	4798      	blx	r3
    2618:	2800      	cmp	r0, #0
    261a:	dbb1      	blt.n	2580 <z_cbvprintf_impl+0x6b0>
    261c:	3501      	adds	r5, #1
			--width;
    261e:	e7f2      	b.n	2606 <z_cbvprintf_impl+0x736>
    2620:	0000b89b 	.word	0x0000b89b

00002624 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2624:	b508      	push	{r3, lr}
    2626:	4604      	mov	r4, r0
	__asm__ volatile(
    2628:	f04f 0220 	mov.w	r2, #32
    262c:	f3ef 8311 	mrs	r3, BASEPRI
    2630:	f382 8812 	msr	BASEPRI_MAX, r2
    2634:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    2638:	f003 f9e2 	bl	5a00 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    263c:	4620      	mov	r0, r4
    263e:	f001 fe09 	bl	4254 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2642:	4803      	ldr	r0, [pc, #12]	; (2650 <sys_reboot+0x2c>)
    2644:	f007 fea1 	bl	a38a <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2648:	f000 fee6 	bl	3418 <arch_cpu_idle>
    264c:	e7fc      	b.n	2648 <sys_reboot+0x24>
    264e:	bf00      	nop
    2650:	0000b89c 	.word	0x0000b89c

00002654 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    2654:	f003 ba2e 	b.w	5ab4 <SystemInit>

00002658 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    2658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    265c:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 275c <z_log_init.isra.0+0x104>
    2660:	4f3f      	ldr	r7, [pc, #252]	; (2760 <z_log_init.isra.0+0x108>)
    2662:	ebaa 0307 	sub.w	r3, sl, r7

	if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    2666:	2b9f      	cmp	r3, #159	; 0x9f
static uint32_t z_log_init(bool blocking, bool can_sleep)
    2668:	4681      	mov	r9, r0
    266a:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    266c:	d90b      	bls.n	2686 <z_log_init.isra.0+0x2e>
    266e:	493d      	ldr	r1, [pc, #244]	; (2764 <z_log_init.isra.0+0x10c>)
    2670:	4a3d      	ldr	r2, [pc, #244]	; (2768 <z_log_init.isra.0+0x110>)
    2672:	483e      	ldr	r0, [pc, #248]	; (276c <z_log_init.isra.0+0x114>)
    2674:	f44f 738c 	mov.w	r3, #280	; 0x118
    2678:	f007 ff25 	bl	a4c6 <assert_print>
    267c:	f44f 718c 	mov.w	r1, #280	; 0x118
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2680:	4839      	ldr	r0, [pc, #228]	; (2768 <z_log_init.isra.0+0x110>)
    2682:	f007 ff19 	bl	a4b8 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    2686:	483a      	ldr	r0, [pc, #232]	; (2770 <z_log_init.isra.0+0x118>)
    2688:	f007 ff2f 	bl	a4ea <atomic_inc>
    268c:	4606      	mov	r6, r0
    268e:	2800      	cmp	r0, #0
    2690:	d134      	bne.n	26fc <z_log_init.isra.0+0xa4>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2692:	463c      	mov	r4, r7
	uint32_t mask = 0;
    2694:	4605      	mov	r5, r0
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    2696:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    269a:	4554      	cmp	r4, sl
    269c:	d927      	bls.n	26ee <z_log_init.isra.0+0x96>
    269e:	4935      	ldr	r1, [pc, #212]	; (2774 <z_log_init.isra.0+0x11c>)
    26a0:	4a31      	ldr	r2, [pc, #196]	; (2768 <z_log_init.isra.0+0x110>)
    26a2:	4832      	ldr	r0, [pc, #200]	; (276c <z_log_init.isra.0+0x114>)
    26a4:	f240 1325 	movw	r3, #293	; 0x125
    26a8:	f007 ff0d 	bl	a4c6 <assert_print>
    26ac:	4832      	ldr	r0, [pc, #200]	; (2778 <z_log_init.isra.0+0x120>)
    26ae:	f007 ff0a 	bl	a4c6 <assert_print>
    26b2:	f240 1125 	movw	r1, #293	; 0x125
    26b6:	e7e3      	b.n	2680 <z_log_init.isra.0+0x28>
		if (backend->autostart) {
    26b8:	7b23      	ldrb	r3, [r4, #12]
    26ba:	b173      	cbz	r3, 26da <z_log_init.isra.0+0x82>
	if (backend->api->init) {
    26bc:	6823      	ldr	r3, [r4, #0]
    26be:	68db      	ldr	r3, [r3, #12]
    26c0:	b10b      	cbz	r3, 26c6 <z_log_init.isra.0+0x6e>
		backend->api->init(backend);
    26c2:	4620      	mov	r0, r4
    26c4:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    26c6:	6823      	ldr	r3, [r4, #0]
    26c8:	691b      	ldr	r3, [r3, #16]
    26ca:	b943      	cbnz	r3, 26de <z_log_init.isra.0+0x86>
				log_backend_enable(backend,
    26cc:	6863      	ldr	r3, [r4, #4]
    26ce:	2204      	movs	r2, #4
    26d0:	6819      	ldr	r1, [r3, #0]
    26d2:	4620      	mov	r0, r4
    26d4:	f000 f90c 	bl	28f0 <log_backend_enable>
			}

			i++;
    26d8:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    26da:	3410      	adds	r4, #16
    26dc:	e7dd      	b.n	269a <z_log_init.isra.0+0x42>
		return backend->api->is_ready(backend);
    26de:	4620      	mov	r0, r4
    26e0:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    26e2:	2800      	cmp	r0, #0
    26e4:	d0f2      	beq.n	26cc <z_log_init.isra.0+0x74>
				mask |= BIT(i);
    26e6:	fa0b f306 	lsl.w	r3, fp, r6
    26ea:	431d      	orrs	r5, r3
    26ec:	e7f4      	b.n	26d8 <z_log_init.isra.0+0x80>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    26ee:	d3e3      	bcc.n	26b8 <z_log_init.isra.0+0x60>
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    26f0:	f1b9 0f00 	cmp.w	r9, #0
    26f4:	d002      	beq.n	26fc <z_log_init.isra.0+0xa4>
		mask_cpy &= ~BIT(i);
    26f6:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    26fa:	b90d      	cbnz	r5, 2700 <z_log_init.isra.0+0xa8>
			}
		}
	}

	return mask;
}
    26fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2700:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    2702:	fa95 f4a5 	rbit	r4, r5
    2706:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    270a:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    270e:	0126      	lsls	r6, r4, #4
    2710:	eb07 1404 	add.w	r4, r7, r4, lsl #4
		mask_cpy &= ~BIT(i);
    2714:	ea6f 0b03 	mvn.w	fp, r3
    2718:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    271c:	7b23      	ldrb	r3, [r4, #12]
    271e:	b15b      	cbz	r3, 2738 <z_log_init.isra.0+0xe0>
	if (backend->api->is_ready != NULL) {
    2720:	59bb      	ldr	r3, [r7, r6]
    2722:	691b      	ldr	r3, [r3, #16]
    2724:	b9a3      	cbnz	r3, 2750 <z_log_init.isra.0+0xf8>
					   backend->cb->ctx,
    2726:	443e      	add	r6, r7
			log_backend_enable(backend,
    2728:	2204      	movs	r2, #4
    272a:	6873      	ldr	r3, [r6, #4]
    272c:	4620      	mov	r0, r4
    272e:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    2730:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    2734:	f000 f8dc 	bl	28f0 <log_backend_enable>
	while (mask_cpy) {
    2738:	2d00      	cmp	r5, #0
    273a:	d1e2      	bne.n	2702 <z_log_init.isra.0+0xaa>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    273c:	f1b8 0f00 	cmp.w	r8, #0
    2740:	d004      	beq.n	274c <z_log_init.isra.0+0xf4>
	return z_impl_k_sleep(timeout);
    2742:	f44f 70a4 	mov.w	r0, #328	; 0x148
    2746:	2100      	movs	r1, #0
    2748:	f006 fc5c 	bl	9004 <z_impl_k_sleep>
    274c:	464d      	mov	r5, r9
    274e:	e7d4      	b.n	26fa <z_log_init.isra.0+0xa2>
		return backend->api->is_ready(backend);
    2750:	4620      	mov	r0, r4
    2752:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2754:	2800      	cmp	r0, #0
    2756:	d1ef      	bne.n	2738 <z_log_init.isra.0+0xe0>
    2758:	e7e5      	b.n	2726 <z_log_init.isra.0+0xce>
    275a:	bf00      	nop
    275c:	0000b1d8 	.word	0x0000b1d8
    2760:	0000b1b8 	.word	0x0000b1b8
    2764:	0000b8f2 	.word	0x0000b8f2
    2768:	0000b8c5 	.word	0x0000b8c5
    276c:	0000b53f 	.word	0x0000b53f
    2770:	20000430 	.word	0x20000430
    2774:	0000b916 	.word	0x0000b916
    2778:	0000b937 	.word	0x0000b937

0000277c <log_format_func_t_get>:
}
    277c:	4b01      	ldr	r3, [pc, #4]	; (2784 <log_format_func_t_get+0x8>)
    277e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2782:	4770      	bx	lr
    2784:	0000b208 	.word	0x0000b208

00002788 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    2788:	b508      	push	{r3, lr}
    278a:	4603      	mov	r3, r0
    278c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    278e:	b12b      	cbz	r3, 279c <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    2790:	4a04      	ldr	r2, [pc, #16]	; (27a4 <log_set_timestamp_func+0x1c>)
    2792:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    2794:	f000 faf0 	bl	2d78 <log_output_timestamp_freq_set>
	}

	return 0;
    2798:	2000      	movs	r0, #0
}
    279a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    279c:	f06f 0015 	mvn.w	r0, #21
    27a0:	e7fb      	b.n	279a <log_set_timestamp_func+0x12>
    27a2:	bf00      	nop
    27a4:	200000b4 	.word	0x200000b4

000027a8 <log_core_init>:
	panic_mode = false;
    27a8:	4a05      	ldr	r2, [pc, #20]	; (27c0 <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
    27aa:	4806      	ldr	r0, [pc, #24]	; (27c4 <log_core_init+0x1c>)
	panic_mode = false;
    27ac:	2300      	movs	r3, #0
    27ae:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    27b0:	4a05      	ldr	r2, [pc, #20]	; (27c8 <log_core_init+0x20>)
    27b2:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    27b4:	4a05      	ldr	r2, [pc, #20]	; (27cc <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    27b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    27ba:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    27bc:	f7ff bfe4 	b.w	2788 <log_set_timestamp_func>
    27c0:	20000d8c 	.word	0x20000d8c
    27c4:	0000a4e7 	.word	0x0000a4e7
    27c8:	20000428 	.word	0x20000428
    27cc:	2000042c 	.word	0x2000042c

000027d0 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    27d0:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    27d2:	4d13      	ldr	r5, [pc, #76]	; (2820 <z_impl_log_panic+0x50>)
    27d4:	7829      	ldrb	r1, [r5, #0]
    27d6:	bb09      	cbnz	r1, 281c <z_impl_log_panic+0x4c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    27d8:	2001      	movs	r0, #1
    27da:	f7ff ff3d 	bl	2658 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    27de:	4c11      	ldr	r4, [pc, #68]	; (2824 <z_impl_log_panic+0x54>)
    27e0:	4e11      	ldr	r6, [pc, #68]	; (2828 <z_impl_log_panic+0x58>)
    27e2:	42b4      	cmp	r4, r6
    27e4:	d917      	bls.n	2816 <z_impl_log_panic+0x46>
    27e6:	4911      	ldr	r1, [pc, #68]	; (282c <z_impl_log_panic+0x5c>)
    27e8:	4a11      	ldr	r2, [pc, #68]	; (2830 <z_impl_log_panic+0x60>)
    27ea:	4812      	ldr	r0, [pc, #72]	; (2834 <z_impl_log_panic+0x64>)
    27ec:	f240 1387 	movw	r3, #391	; 0x187
    27f0:	f007 fe69 	bl	a4c6 <assert_print>
    27f4:	4810      	ldr	r0, [pc, #64]	; (2838 <z_impl_log_panic+0x68>)
    27f6:	f007 fe66 	bl	a4c6 <assert_print>
    27fa:	480d      	ldr	r0, [pc, #52]	; (2830 <z_impl_log_panic+0x60>)
    27fc:	f240 1187 	movw	r1, #391	; 0x187
    2800:	f007 fe5a 	bl	a4b8 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2804:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2806:	795b      	ldrb	r3, [r3, #5]
    2808:	b11b      	cbz	r3, 2812 <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    280a:	6823      	ldr	r3, [r4, #0]
    280c:	4620      	mov	r0, r4
    280e:	689b      	ldr	r3, [r3, #8]
    2810:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2812:	3410      	adds	r4, #16
    2814:	e7e5      	b.n	27e2 <z_impl_log_panic+0x12>
    2816:	d3f5      	bcc.n	2804 <z_impl_log_panic+0x34>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    2818:	2301      	movs	r3, #1
    281a:	702b      	strb	r3, [r5, #0]
}
    281c:	bd70      	pop	{r4, r5, r6, pc}
    281e:	bf00      	nop
    2820:	20000d8c 	.word	0x20000d8c
    2824:	0000b1b8 	.word	0x0000b1b8
    2828:	0000b1d8 	.word	0x0000b1d8
    282c:	0000b916 	.word	0x0000b916
    2830:	0000b8c5 	.word	0x0000b8c5
    2834:	0000b53f 	.word	0x0000b53f
    2838:	0000b937 	.word	0x0000b937

0000283c <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    283c:	b510      	push	{r4, lr}
    283e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    2840:	4808      	ldr	r0, [pc, #32]	; (2864 <z_log_dropped+0x28>)
    2842:	f007 fe52 	bl	a4ea <atomic_inc>
	if (buffered) {
    2846:	b15c      	cbz	r4, 2860 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2848:	f3bf 8f5b 	dmb	ish
    284c:	4b06      	ldr	r3, [pc, #24]	; (2868 <z_log_dropped+0x2c>)
    284e:	e853 1f00 	ldrex	r1, [r3]
    2852:	3901      	subs	r1, #1
    2854:	e843 1200 	strex	r2, r1, [r3]
    2858:	2a00      	cmp	r2, #0
    285a:	d1f8      	bne.n	284e <z_log_dropped+0x12>
    285c:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    2860:	bd10      	pop	{r4, pc}
    2862:	bf00      	nop
    2864:	20000428 	.word	0x20000428
    2868:	2000042c 	.word	0x2000042c

0000286c <z_log_msg_commit>:
#endif
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    286c:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    286e:	4b12      	ldr	r3, [pc, #72]	; (28b8 <z_log_msg_commit+0x4c>)
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2870:	4c12      	ldr	r4, [pc, #72]	; (28bc <z_log_msg_commit+0x50>)
	msg->hdr.timestamp = timestamp_func();
    2872:	681b      	ldr	r3, [r3, #0]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2874:	4e12      	ldr	r6, [pc, #72]	; (28c0 <z_log_msg_commit+0x54>)
{
    2876:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    2878:	4798      	blx	r3
    287a:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    287c:	42b4      	cmp	r4, r6
    287e:	d918      	bls.n	28b2 <z_log_msg_commit+0x46>
    2880:	4910      	ldr	r1, [pc, #64]	; (28c4 <z_log_msg_commit+0x58>)
    2882:	4a11      	ldr	r2, [pc, #68]	; (28c8 <z_log_msg_commit+0x5c>)
    2884:	4811      	ldr	r0, [pc, #68]	; (28cc <z_log_msg_commit+0x60>)
    2886:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    288a:	f007 fe1c 	bl	a4c6 <assert_print>
    288e:	4810      	ldr	r0, [pc, #64]	; (28d0 <z_log_msg_commit+0x64>)
    2890:	f007 fe19 	bl	a4c6 <assert_print>
    2894:	480c      	ldr	r0, [pc, #48]	; (28c8 <z_log_msg_commit+0x5c>)
    2896:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    289a:	f007 fe0d 	bl	a4b8 <assert_post_action>
	return backend->cb->active;
    289e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    28a0:	795b      	ldrb	r3, [r3, #5]
    28a2:	b123      	cbz	r3, 28ae <z_log_msg_commit+0x42>
	backend->api->process(backend, msg);
    28a4:	6823      	ldr	r3, [r4, #0]
    28a6:	4629      	mov	r1, r5
    28a8:	681b      	ldr	r3, [r3, #0]
    28aa:	4620      	mov	r0, r4
    28ac:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    28ae:	3410      	adds	r4, #16
    28b0:	e7e4      	b.n	287c <z_log_msg_commit+0x10>
    28b2:	d3f4      	bcc.n	289e <z_log_msg_commit+0x32>
	msg_commit(&log_buffer, msg);
}
    28b4:	bd70      	pop	{r4, r5, r6, pc}
    28b6:	bf00      	nop
    28b8:	200000b4 	.word	0x200000b4
    28bc:	0000b1b8 	.word	0x0000b1b8
    28c0:	0000b1d8 	.word	0x0000b1d8
    28c4:	0000b916 	.word	0x0000b916
    28c8:	0000b8c5 	.word	0x0000b8c5
    28cc:	0000b53f 	.word	0x0000b53f
    28d0:	0000b937 	.word	0x0000b937

000028d4 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    28d4:	4a04      	ldr	r2, [pc, #16]	; (28e8 <log_source_name_get+0x14>)
    28d6:	4b05      	ldr	r3, [pc, #20]	; (28ec <log_source_name_get+0x18>)
    28d8:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    28da:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    28de:	bf34      	ite	cc
    28e0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    28e4:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    28e6:	4770      	bx	lr
    28e8:	0000b120 	.word	0x0000b120
    28ec:	0000b1b8 	.word	0x0000b1b8

000028f0 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    28f0:	4b0e      	ldr	r3, [pc, #56]	; (292c <log_backend_enable+0x3c>)
    28f2:	1ac3      	subs	r3, r0, r3
    28f4:	111b      	asrs	r3, r3, #4
    28f6:	3301      	adds	r3, #1
{
    28f8:	b510      	push	{r4, lr}

	log_backend_id_set(backend, id);
    28fa:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    28fc:	b948      	cbnz	r0, 2912 <log_backend_enable+0x22>
    28fe:	490c      	ldr	r1, [pc, #48]	; (2930 <log_backend_enable+0x40>)
    2900:	480c      	ldr	r0, [pc, #48]	; (2934 <log_backend_enable+0x44>)
    2902:	4a0d      	ldr	r2, [pc, #52]	; (2938 <log_backend_enable+0x48>)
    2904:	23de      	movs	r3, #222	; 0xde
    2906:	f007 fdde 	bl	a4c6 <assert_print>
    290a:	480b      	ldr	r0, [pc, #44]	; (2938 <log_backend_enable+0x48>)
    290c:	21de      	movs	r1, #222	; 0xde
    290e:	f007 fdd3 	bl	a4b8 <assert_post_action>
	backend->cb->id = id;
    2912:	6844      	ldr	r4, [r0, #4]
    2914:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    2916:	6843      	ldr	r3, [r0, #4]
    2918:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    291a:	6843      	ldr	r3, [r0, #4]
    291c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    291e:	6843      	ldr	r3, [r0, #4]
    2920:	2201      	movs	r2, #1
    2922:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    2924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    2928:	f007 be01 	b.w	a52e <z_log_notify_backend_enabled>
    292c:	0000b1b8 	.word	0x0000b1b8
    2930:	0000b9da 	.word	0x0000b9da
    2934:	0000b53f 	.word	0x0000b53f
    2938:	0000b9a2 	.word	0x0000b9a2

0000293c <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    293c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2940:	b085      	sub	sp, #20
    2942:	af02      	add	r7, sp, #8
    2944:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    2948:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    294a:	4604      	mov	r4, r0
    294c:	460e      	mov	r6, r1
    294e:	4693      	mov	fp, r2
    2950:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    2952:	f1ba 0f00 	cmp.w	sl, #0
    2956:	d015      	beq.n	2984 <z_impl_z_log_msg_runtime_vcreate+0x48>
		va_list ap2;

		va_copy(ap2, ap);
    2958:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    295c:	f8cd 9000 	str.w	r9, [sp]
    2960:	2110      	movs	r1, #16
    2962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2964:	4653      	mov	r3, sl
    2966:	2000      	movs	r0, #0
    2968:	f7fe fd62 	bl	1430 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    296c:	1e01      	subs	r1, r0, #0
    296e:	da0a      	bge.n	2986 <z_impl_z_log_msg_runtime_vcreate+0x4a>
    2970:	491e      	ldr	r1, [pc, #120]	; (29ec <z_impl_z_log_msg_runtime_vcreate+0xb0>)
    2972:	4a1f      	ldr	r2, [pc, #124]	; (29f0 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    2974:	481f      	ldr	r0, [pc, #124]	; (29f4 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    2976:	2375      	movs	r3, #117	; 0x75
    2978:	f007 fda5 	bl	a4c6 <assert_print>
    297c:	2175      	movs	r1, #117	; 0x75
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
    297e:	481c      	ldr	r0, [pc, #112]	; (29f0 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    2980:	f007 fd9a 	bl	a4b8 <assert_post_action>
		plen = 0;
    2984:	4651      	mov	r1, sl
	struct log_msg_desc desc =
    2986:	4a1c      	ldr	r2, [pc, #112]	; (29f8 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    2988:	f004 0407 	and.w	r4, r4, #7
    298c:	f00b 0b07 	and.w	fp, fp, #7
    2990:	00e4      	lsls	r4, r4, #3
    2992:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    2996:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    299a:	4314      	orrs	r4, r2
    299c:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    29a0:	3517      	adds	r5, #23
    29a2:	440d      	add	r5, r1
		msg = alloca(msg_wlen * sizeof(int));
    29a4:	f025 0507 	bic.w	r5, r5, #7
    29a8:	ebad 0d05 	sub.w	sp, sp, r5
    29ac:	ad02      	add	r5, sp, #8
	if (pkg && fmt) {
    29ae:	f1ba 0f00 	cmp.w	sl, #0
    29b2:	d011      	beq.n	29d8 <z_impl_z_log_msg_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    29b4:	f8cd 9000 	str.w	r9, [sp]
    29b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    29ba:	4653      	mov	r3, sl
    29bc:	f105 0010 	add.w	r0, r5, #16
    29c0:	f7fe fd36 	bl	1430 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    29c4:	2800      	cmp	r0, #0
    29c6:	da07      	bge.n	29d8 <z_impl_z_log_msg_runtime_vcreate+0x9c>
    29c8:	4908      	ldr	r1, [pc, #32]	; (29ec <z_impl_z_log_msg_runtime_vcreate+0xb0>)
    29ca:	4a09      	ldr	r2, [pc, #36]	; (29f0 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    29cc:	4809      	ldr	r0, [pc, #36]	; (29f4 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    29ce:	238f      	movs	r3, #143	; 0x8f
    29d0:	f007 fd79 	bl	a4c6 <assert_print>
    29d4:	218f      	movs	r1, #143	; 0x8f
    29d6:	e7d2      	b.n	297e <z_impl_z_log_msg_runtime_vcreate+0x42>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    29d8:	4643      	mov	r3, r8
    29da:	4622      	mov	r2, r4
    29dc:	4631      	mov	r1, r6
    29de:	4628      	mov	r0, r5
    29e0:	f007 fda8 	bl	a534 <z_log_msg_finalize>
	}
}
    29e4:	370c      	adds	r7, #12
    29e6:	46bd      	mov	sp, r7
    29e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29ec:	0000ba26 	.word	0x0000ba26
    29f0:	0000b9fa 	.word	0x0000b9fa
    29f4:	0000b53f 	.word	0x0000b53f
    29f8:	000ffe00 	.word	0x000ffe00

000029fc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    29fc:	b40e      	push	{r1, r2, r3}
    29fe:	b503      	push	{r0, r1, lr}
    2a00:	ab03      	add	r3, sp, #12
    2a02:	4601      	mov	r1, r0
    2a04:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2a08:	4804      	ldr	r0, [pc, #16]	; (2a1c <print_formatted+0x20>)
	va_start(args, fmt);
    2a0a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2a0c:	f007 fdd4 	bl	a5b8 <cbvprintf>
	va_end(args);

	return length;
}
    2a10:	b002      	add	sp, #8
    2a12:	f85d eb04 	ldr.w	lr, [sp], #4
    2a16:	b003      	add	sp, #12
    2a18:	4770      	bx	lr
    2a1a:	bf00      	nop
    2a1c:	0000a567 	.word	0x0000a567

00002a20 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2a20:	06ca      	lsls	r2, r1, #27
    2a22:	d405      	bmi.n	2a30 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2a24:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    2a26:	bf4c      	ite	mi
    2a28:	4902      	ldrmi	r1, [pc, #8]	; (2a34 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    2a2a:	4903      	ldrpl	r1, [pc, #12]	; (2a38 <newline_print+0x18>)
    2a2c:	f7ff bfe6 	b.w	29fc <print_formatted>
	}
}
    2a30:	4770      	bx	lr
    2a32:	bf00      	nop
    2a34:	0000d077 	.word	0x0000d077
    2a38:	0000ba30 	.word	0x0000ba30

00002a3c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    2a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a40:	b089      	sub	sp, #36	; 0x24
    2a42:	469a      	mov	sl, r3
    2a44:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    2a48:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    2a4c:	9305      	str	r3, [sp, #20]
    2a4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2a50:	9e16      	ldr	r6, [sp, #88]	; 0x58
    2a52:	9206      	str	r2, [sp, #24]
    2a54:	4604      	mov	r4, r0
    2a56:	460d      	mov	r5, r1
    2a58:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    2a5a:	f1bb 0f00 	cmp.w	fp, #0
    2a5e:	f000 8085 	beq.w	2b6c <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2a62:	f006 0308 	and.w	r3, r6, #8
    2a66:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    2a68:	f007 fd62 	bl	a530 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    2a6c:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    2a70:	4602      	mov	r2, r0
    2a72:	2800      	cmp	r0, #0
    2a74:	d049      	beq.n	2b0a <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    2a76:	498d      	ldr	r1, [pc, #564]	; (2cac <log_output_process+0x270>)
    2a78:	4620      	mov	r0, r4
    2a7a:	f7ff ffbf 	bl	29fc <print_formatted>
    2a7e:	4680      	mov	r8, r0
	if (stamp) {
    2a80:	f1b9 0f00 	cmp.w	r9, #0
    2a84:	d008      	beq.n	2a98 <log_output_process+0x5c>
	if (!format) {
    2a86:	f016 0f44 	tst.w	r6, #68	; 0x44
    2a8a:	d140      	bne.n	2b0e <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    2a8c:	4988      	ldr	r1, [pc, #544]	; (2cb0 <log_output_process+0x274>)
    2a8e:	462a      	mov	r2, r5
    2a90:	4620      	mov	r0, r4
    2a92:	f7ff ffb3 	bl	29fc <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    2a96:	4480      	add	r8, r0
	if (color) {
    2a98:	f006 0301 	and.w	r3, r6, #1
    2a9c:	b153      	cbz	r3, 2ab4 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    2a9e:	4b85      	ldr	r3, [pc, #532]	; (2cb4 <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
    2aa0:	4985      	ldr	r1, [pc, #532]	; (2cb8 <log_output_process+0x27c>)
		const char *log_color = start && (colors[level] != NULL) ?
    2aa2:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    2aa6:	4b85      	ldr	r3, [pc, #532]	; (2cbc <log_output_process+0x280>)
    2aa8:	4620      	mov	r0, r4
    2aaa:	2a00      	cmp	r2, #0
    2aac:	bf08      	it	eq
    2aae:	461a      	moveq	r2, r3
    2ab0:	f7ff ffa4 	bl	29fc <print_formatted>
	if (level_on) {
    2ab4:	f006 0308 	and.w	r3, r6, #8
    2ab8:	2b00      	cmp	r3, #0
    2aba:	d054      	beq.n	2b66 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    2abc:	4b80      	ldr	r3, [pc, #512]	; (2cc0 <log_output_process+0x284>)
    2abe:	4981      	ldr	r1, [pc, #516]	; (2cc4 <log_output_process+0x288>)
    2ac0:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    2ac4:	4620      	mov	r0, r4
    2ac6:	f7ff ff99 	bl	29fc <print_formatted>
    2aca:	4605      	mov	r5, r0
	if (domain) {
    2acc:	9b06      	ldr	r3, [sp, #24]
    2ace:	b12b      	cbz	r3, 2adc <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    2ad0:	497d      	ldr	r1, [pc, #500]	; (2cc8 <log_output_process+0x28c>)
    2ad2:	461a      	mov	r2, r3
    2ad4:	4620      	mov	r0, r4
    2ad6:	f7ff ff91 	bl	29fc <print_formatted>
    2ada:	4405      	add	r5, r0
	if (source) {
    2adc:	f1ba 0f00 	cmp.w	sl, #0
    2ae0:	d005      	beq.n	2aee <log_output_process+0xb2>
		total += print_formatted(output,
    2ae2:	497a      	ldr	r1, [pc, #488]	; (2ccc <log_output_process+0x290>)
    2ae4:	4652      	mov	r2, sl
    2ae6:	4620      	mov	r0, r4
    2ae8:	f7ff ff88 	bl	29fc <print_formatted>
    2aec:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    2aee:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    2af0:	2f00      	cmp	r7, #0
    2af2:	d149      	bne.n	2b88 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    2af4:	9b04      	ldr	r3, [sp, #16]
    2af6:	2b00      	cmp	r3, #0
    2af8:	d160      	bne.n	2bbc <log_output_process+0x180>
	if (color) {
    2afa:	07f3      	lsls	r3, r6, #31
    2afc:	f100 80cf 	bmi.w	2c9e <log_output_process+0x262>
	newline_print(output, flags);
    2b00:	4631      	mov	r1, r6
    2b02:	4620      	mov	r0, r4
    2b04:	f7ff ff8c 	bl	2a20 <newline_print>
}
    2b08:	e0c3      	b.n	2c92 <log_output_process+0x256>
	uint32_t length = 0U;
    2b0a:	4680      	mov	r8, r0
    2b0c:	e7b8      	b.n	2a80 <log_output_process+0x44>
	} else if (freq != 0U) {
    2b0e:	4b70      	ldr	r3, [pc, #448]	; (2cd0 <log_output_process+0x294>)
    2b10:	6818      	ldr	r0, [r3, #0]
    2b12:	2800      	cmp	r0, #0
    2b14:	d0bf      	beq.n	2a96 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    2b16:	4b6f      	ldr	r3, [pc, #444]	; (2cd4 <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    2b18:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    2b1c:	681b      	ldr	r3, [r3, #0]
    2b1e:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    2b22:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    2b26:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    2b2a:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    2b2e:	fb09 f505 	mul.w	r5, r9, r5
		mins = seconds / 60U;
    2b32:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    2b36:	fbb3 f2f1 	udiv	r2, r3, r1
    2b3a:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2b3e:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    2b42:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2b46:	fb00 551e 	mls	r5, r0, lr, r5
				length = print_formatted(output,
    2b4a:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2b4e:	fb09 f505 	mul.w	r5, r9, r5
				length = print_formatted(output,
    2b52:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2b54:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    2b58:	495f      	ldr	r1, [pc, #380]	; (2cd8 <log_output_process+0x29c>)
    2b5a:	e9cd e501 	strd	lr, r5, [sp, #4]
    2b5e:	4620      	mov	r0, r4
    2b60:	f7ff ff4c 	bl	29fc <print_formatted>
    2b64:	e797      	b.n	2a96 <log_output_process+0x5a>
	int total = 0;
    2b66:	f006 0508 	and.w	r5, r6, #8
    2b6a:	e7af      	b.n	2acc <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2b6c:	f1ba 0f01 	cmp.w	sl, #1
    2b70:	d106      	bne.n	2b80 <log_output_process+0x144>
	if (package) {
    2b72:	b9ef      	cbnz	r7, 2bb0 <log_output_process+0x174>
	if (data_len) {
    2b74:	9b04      	ldr	r3, [sp, #16]
    2b76:	2b00      	cmp	r3, #0
    2b78:	f000 808b 	beq.w	2c92 <log_output_process+0x256>
		prefix_offset = 0;
    2b7c:	2500      	movs	r5, #0
    2b7e:	e01d      	b.n	2bbc <log_output_process+0x180>
	if (package) {
    2b80:	2f00      	cmp	r7, #0
    2b82:	d0f7      	beq.n	2b74 <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2b84:	4855      	ldr	r0, [pc, #340]	; (2cdc <log_output_process+0x2a0>)
    2b86:	e014      	b.n	2bb2 <log_output_process+0x176>
		cb = out_func;
    2b88:	4855      	ldr	r0, [pc, #340]	; (2ce0 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    2b8a:	4956      	ldr	r1, [pc, #344]	; (2ce4 <log_output_process+0x2a8>)
    2b8c:	463b      	mov	r3, r7
    2b8e:	4622      	mov	r2, r4
    2b90:	f007 fbc6 	bl	a320 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    2b94:	2800      	cmp	r0, #0
    2b96:	da0e      	bge.n	2bb6 <log_output_process+0x17a>
    2b98:	4953      	ldr	r1, [pc, #332]	; (2ce8 <log_output_process+0x2ac>)
    2b9a:	4854      	ldr	r0, [pc, #336]	; (2cec <log_output_process+0x2b0>)
    2b9c:	4a54      	ldr	r2, [pc, #336]	; (2cf0 <log_output_process+0x2b4>)
    2b9e:	f44f 7302 	mov.w	r3, #520	; 0x208
    2ba2:	f007 fc90 	bl	a4c6 <assert_print>
    2ba6:	4852      	ldr	r0, [pc, #328]	; (2cf0 <log_output_process+0x2b4>)
    2ba8:	f44f 7102 	mov.w	r1, #520	; 0x208
    2bac:	f007 fc84 	bl	a4b8 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2bb0:	484b      	ldr	r0, [pc, #300]	; (2ce0 <log_output_process+0x2a4>)
		prefix_offset = 0;
    2bb2:	465d      	mov	r5, fp
    2bb4:	e7e9      	b.n	2b8a <log_output_process+0x14e>
	if (data_len) {
    2bb6:	9b04      	ldr	r3, [sp, #16]
    2bb8:	2b00      	cmp	r3, #0
    2bba:	d066      	beq.n	2c8a <log_output_process+0x24e>
		print_formatted(output, " ");
    2bbc:	f8df 8134 	ldr.w	r8, [pc, #308]	; 2cf4 <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
    2bc0:	f8df 9134 	ldr.w	r9, [pc, #308]	; 2cf8 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2bc4:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    2bc6:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2bc8:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    2bca:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2bcc:	bf28      	it	cs
    2bce:	2710      	movcs	r7, #16
	newline_print(output, flags);
    2bd0:	f7ff ff26 	bl	2a20 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    2bd4:	f04f 0a00 	mov.w	sl, #0
    2bd8:	4555      	cmp	r5, sl
    2bda:	dc43      	bgt.n	2c64 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    2bdc:	9b05      	ldr	r3, [sp, #20]
    2bde:	4649      	mov	r1, r9
    2be0:	781a      	ldrb	r2, [r3, #0]
    2be2:	4620      	mov	r0, r4
    2be4:	f7ff ff0a 	bl	29fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2be8:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    2bec:	f01a 0f07 	tst.w	sl, #7
    2bf0:	d103      	bne.n	2bfa <log_output_process+0x1be>
			print_formatted(output, " ");
    2bf2:	4641      	mov	r1, r8
    2bf4:	4620      	mov	r0, r4
    2bf6:	f7ff ff01 	bl	29fc <print_formatted>
		if (i < length) {
    2bfa:	4557      	cmp	r7, sl
    2bfc:	d939      	bls.n	2c72 <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
    2bfe:	9b05      	ldr	r3, [sp, #20]
    2c00:	4649      	mov	r1, r9
    2c02:	f813 200a 	ldrb.w	r2, [r3, sl]
    2c06:	4620      	mov	r0, r4
    2c08:	f7ff fef8 	bl	29fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2c0c:	f10a 0a01 	add.w	sl, sl, #1
    2c10:	f1ba 0f10 	cmp.w	sl, #16
    2c14:	d1ea      	bne.n	2bec <log_output_process+0x1b0>
	print_formatted(output, "|");
    2c16:	4939      	ldr	r1, [pc, #228]	; (2cfc <log_output_process+0x2c0>)
    2c18:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2c1a:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    2c1e:	f7ff feed 	bl	29fc <print_formatted>
		if (i < length) {
    2c22:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    2c24:	9b05      	ldr	r3, [sp, #20]
    2c26:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    2c28:	4b35      	ldr	r3, [pc, #212]	; (2d00 <log_output_process+0x2c4>)
    2c2a:	5c99      	ldrb	r1, [r3, r2]
    2c2c:	f011 0f97 	tst.w	r1, #151	; 0x97
    2c30:	bf08      	it	eq
    2c32:	222e      	moveq	r2, #46	; 0x2e
    2c34:	4933      	ldr	r1, [pc, #204]	; (2d04 <log_output_process+0x2c8>)
    2c36:	4620      	mov	r0, r4
    2c38:	f7ff fee0 	bl	29fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2c3c:	f10a 0a01 	add.w	sl, sl, #1
    2c40:	f1ba 0f10 	cmp.w	sl, #16
    2c44:	d01a      	beq.n	2c7c <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
    2c46:	f01a 0f07 	tst.w	sl, #7
    2c4a:	d103      	bne.n	2c54 <log_output_process+0x218>
			print_formatted(output, " ");
    2c4c:	4641      	mov	r1, r8
    2c4e:	4620      	mov	r0, r4
    2c50:	f7ff fed4 	bl	29fc <print_formatted>
		if (i < length) {
    2c54:	4557      	cmp	r7, sl
    2c56:	4652      	mov	r2, sl
    2c58:	d8e4      	bhi.n	2c24 <log_output_process+0x1e8>
			print_formatted(output, " ");
    2c5a:	4641      	mov	r1, r8
    2c5c:	4620      	mov	r0, r4
    2c5e:	f7ff fecd 	bl	29fc <print_formatted>
    2c62:	e7eb      	b.n	2c3c <log_output_process+0x200>
		print_formatted(output, " ");
    2c64:	4641      	mov	r1, r8
    2c66:	4620      	mov	r0, r4
    2c68:	f7ff fec8 	bl	29fc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2c6c:	f10a 0a01 	add.w	sl, sl, #1
    2c70:	e7b2      	b.n	2bd8 <log_output_process+0x19c>
			print_formatted(output, "   ");
    2c72:	4925      	ldr	r1, [pc, #148]	; (2d08 <log_output_process+0x2cc>)
    2c74:	4620      	mov	r0, r4
    2c76:	f7ff fec1 	bl	29fc <print_formatted>
    2c7a:	e7c7      	b.n	2c0c <log_output_process+0x1d0>
		data += length;
    2c7c:	9b05      	ldr	r3, [sp, #20]
    2c7e:	443b      	add	r3, r7
    2c80:	9305      	str	r3, [sp, #20]
	} while (len);
    2c82:	9b04      	ldr	r3, [sp, #16]
    2c84:	1bdb      	subs	r3, r3, r7
    2c86:	9304      	str	r3, [sp, #16]
    2c88:	d19c      	bne.n	2bc4 <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    2c8a:	f1bb 0f00 	cmp.w	fp, #0
    2c8e:	f47f af34 	bne.w	2afa <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    2c92:	4620      	mov	r0, r4
}
    2c94:	b009      	add	sp, #36	; 0x24
    2c96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    2c9a:	f007 bc94 	b.w	a5c6 <log_output_flush>
		print_formatted(output, "%s", log_color);
    2c9e:	4a07      	ldr	r2, [pc, #28]	; (2cbc <log_output_process+0x280>)
    2ca0:	4905      	ldr	r1, [pc, #20]	; (2cb8 <log_output_process+0x27c>)
    2ca2:	4620      	mov	r0, r4
    2ca4:	f7ff feaa 	bl	29fc <print_formatted>
}
    2ca8:	e72a      	b.n	2b00 <log_output_process+0xc4>
    2caa:	bf00      	nop
    2cac:	0000ba38 	.word	0x0000ba38
    2cb0:	0000ba3c 	.word	0x0000ba3c
    2cb4:	0000b218 	.word	0x0000b218
    2cb8:	0000c807 	.word	0x0000c807
    2cbc:	0000ba33 	.word	0x0000ba33
    2cc0:	0000b22c 	.word	0x0000b22c
    2cc4:	0000ba61 	.word	0x0000ba61
    2cc8:	0000ba67 	.word	0x0000ba67
    2ccc:	0000ba6b 	.word	0x0000ba6b
    2cd0:	20000438 	.word	0x20000438
    2cd4:	20000434 	.word	0x20000434
    2cd8:	0000ba45 	.word	0x0000ba45
    2cdc:	0000a583 	.word	0x0000a583
    2ce0:	0000a567 	.word	0x0000a567
    2ce4:	0000a5b9 	.word	0x0000a5b9
    2ce8:	0000ba9f 	.word	0x0000ba9f
    2cec:	0000b53f 	.word	0x0000b53f
    2cf0:	0000ba70 	.word	0x0000ba70
    2cf4:	0000bab0 	.word	0x0000bab0
    2cf8:	0000baa8 	.word	0x0000baa8
    2cfc:	0000bab2 	.word	0x0000bab2
    2d00:	0000d5e5 	.word	0x0000d5e5
    2d04:	0000bab4 	.word	0x0000bab4
    2d08:	0000baae 	.word	0x0000baae

00002d0c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    2d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    2d10:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    2d12:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    2d14:	688e      	ldr	r6, [r1, #8]
    2d16:	b086      	sub	sp, #24
    2d18:	4605      	mov	r5, r0
    2d1a:	460c      	mov	r4, r1
    2d1c:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    2d1e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    2d22:	b15b      	cbz	r3, 2d3c <log_output_msg_process+0x30>
    2d24:	4a13      	ldr	r2, [pc, #76]	; (2d74 <log_output_msg_process+0x68>)
    2d26:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    2d28:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2d2c:	2900      	cmp	r1, #0
    2d2e:	db1f      	blt.n	2d70 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    2d30:	7820      	ldrb	r0, [r4, #0]
    2d32:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    2d36:	f7ff fdcd 	bl	28d4 <log_source_name_get>
    2d3a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2d3c:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    2d3e:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    2d40:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    2d44:	9700      	str	r7, [sp, #0]
    2d46:	f3c2 224a 	ubfx	r2, r2, #9, #11
    2d4a:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    2d4c:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    2d50:	f3c0 100b 	ubfx	r0, r0, #4, #12
    2d54:	bf08      	it	eq
    2d56:	2100      	moveq	r1, #0
    2d58:	e9cd 0803 	strd	r0, r8, [sp, #12]
    2d5c:	e9cd 1401 	strd	r1, r4, [sp, #4]
    2d60:	2200      	movs	r2, #0
    2d62:	4631      	mov	r1, r6
    2d64:	4628      	mov	r0, r5
    2d66:	f7ff fe69 	bl	2a3c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    2d6a:	b006      	add	sp, #24
    2d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2d70:	2300      	movs	r3, #0
    2d72:	e7e3      	b.n	2d3c <log_output_msg_process+0x30>
    2d74:	0000b120 	.word	0x0000b120

00002d78 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2d78:	4a07      	ldr	r2, [pc, #28]	; (2d98 <log_output_timestamp_freq_set+0x20>)
    2d7a:	2100      	movs	r1, #0
    2d7c:	2301      	movs	r3, #1
    2d7e:	4290      	cmp	r0, r2
    2d80:	d806      	bhi.n	2d90 <log_output_timestamp_freq_set+0x18>
    2d82:	4a06      	ldr	r2, [pc, #24]	; (2d9c <log_output_timestamp_freq_set+0x24>)
    2d84:	b901      	cbnz	r1, 2d88 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    2d86:	2301      	movs	r3, #1
    2d88:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2d8a:	4b05      	ldr	r3, [pc, #20]	; (2da0 <log_output_timestamp_freq_set+0x28>)
    2d8c:	6018      	str	r0, [r3, #0]
}
    2d8e:	4770      	bx	lr
		frequency /= 2U;
    2d90:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2d92:	005b      	lsls	r3, r3, #1
    2d94:	2101      	movs	r1, #1
    2d96:	e7f2      	b.n	2d7e <log_output_timestamp_freq_set+0x6>
    2d98:	000f4240 	.word	0x000f4240
    2d9c:	20000434 	.word	0x20000434
    2da0:	20000438 	.word	0x20000438

00002da4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2da4:	4b01      	ldr	r3, [pc, #4]	; (2dac <log_backend_rtt_init+0x8>)
    2da6:	2201      	movs	r2, #1
    2da8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2daa:	4770      	bx	lr
    2dac:	20000d8d 	.word	0x20000d8d

00002db0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2db0:	4b01      	ldr	r3, [pc, #4]	; (2db8 <format_set+0x8>)
	return 0;
}
    2db2:	2000      	movs	r0, #0
	log_format_current = log_type;
    2db4:	6019      	str	r1, [r3, #0]
}
    2db6:	4770      	bx	lr
    2db8:	20000450 	.word	0x20000450

00002dbc <panic>:
	panic_mode = true;
    2dbc:	4b02      	ldr	r3, [pc, #8]	; (2dc8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2dbe:	4803      	ldr	r0, [pc, #12]	; (2dcc <panic+0x10>)
    2dc0:	2201      	movs	r2, #1
    2dc2:	701a      	strb	r2, [r3, #0]
    2dc4:	f007 bbff 	b.w	a5c6 <log_output_flush>
    2dc8:	20000d8e 	.word	0x20000d8e
    2dcc:	0000b25c 	.word	0x0000b25c

00002dd0 <process>:
{
    2dd0:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2dd2:	4b06      	ldr	r3, [pc, #24]	; (2dec <process+0x1c>)
    2dd4:	6818      	ldr	r0, [r3, #0]
{
    2dd6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2dd8:	f7ff fcd0 	bl	277c <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    2ddc:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2dde:	4603      	mov	r3, r0
}
    2de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    2de4:	4802      	ldr	r0, [pc, #8]	; (2df0 <process+0x20>)
    2de6:	220f      	movs	r2, #15
    2de8:	4718      	bx	r3
    2dea:	bf00      	nop
    2dec:	20000450 	.word	0x20000450
    2df0:	0000b25c 	.word	0x0000b25c

00002df4 <data_out_block_mode>:
{
    2df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2df6:	4d19      	ldr	r5, [pc, #100]	; (2e5c <data_out_block_mode+0x68>)
    2df8:	4607      	mov	r7, r0
    2dfa:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2dfc:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2dfe:	4632      	mov	r2, r6
    2e00:	4639      	mov	r1, r7
    2e02:	2000      	movs	r0, #0
    2e04:	f004 fa66 	bl	72d4 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    2e08:	b1c8      	cbz	r0, 2e3e <data_out_block_mode+0x4a>
	host_present = true;
    2e0a:	2301      	movs	r3, #1
    2e0c:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    2e0e:	4b14      	ldr	r3, [pc, #80]	; (2e60 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    2e10:	781b      	ldrb	r3, [r3, #0]
    2e12:	b92b      	cbnz	r3, 2e20 <data_out_block_mode+0x2c>
}
    2e14:	4630      	mov	r0, r6
    2e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    2e18:	b95c      	cbnz	r4, 2e32 <data_out_block_mode+0x3e>
		host_present = false;
    2e1a:	702c      	strb	r4, [r5, #0]
    2e1c:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2e20:	2000      	movs	r0, #0
    2e22:	f004 fa9f 	bl	7364 <SEGGER_RTT_HasDataUp>
    2e26:	2800      	cmp	r0, #0
    2e28:	d0f4      	beq.n	2e14 <data_out_block_mode+0x20>
    2e2a:	782b      	ldrb	r3, [r5, #0]
    2e2c:	2b00      	cmp	r3, #0
    2e2e:	d1f3      	bne.n	2e18 <data_out_block_mode+0x24>
    2e30:	e7f0      	b.n	2e14 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    2e32:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    2e34:	f241 3088 	movw	r0, #5000	; 0x1388
    2e38:	f007 ff54 	bl	ace4 <z_impl_k_busy_wait>
}
    2e3c:	e7f0      	b.n	2e20 <data_out_block_mode+0x2c>
		} else if (host_present) {
    2e3e:	782b      	ldrb	r3, [r5, #0]
    2e40:	b113      	cbz	r3, 2e48 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    2e42:	3c01      	subs	r4, #1
    2e44:	d104      	bne.n	2e50 <data_out_block_mode+0x5c>
		host_present = false;
    2e46:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    2e48:	782b      	ldrb	r3, [r5, #0]
    2e4a:	2b00      	cmp	r3, #0
    2e4c:	d1d7      	bne.n	2dfe <data_out_block_mode+0xa>
    2e4e:	e7e1      	b.n	2e14 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    2e50:	f241 3088 	movw	r0, #5000	; 0x1388
    2e54:	f007 ff46 	bl	ace4 <z_impl_k_busy_wait>
    2e58:	e7f6      	b.n	2e48 <data_out_block_mode+0x54>
    2e5a:	bf00      	nop
    2e5c:	20000d8d 	.word	0x20000d8d
    2e60:	20000d8e 	.word	0x20000d8e

00002e64 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2e64:	4b01      	ldr	r3, [pc, #4]	; (2e6c <format_set+0x8>)
	return 0;
}
    2e66:	2000      	movs	r0, #0
	log_format_current = log_type;
    2e68:	6019      	str	r1, [r3, #0]
}
    2e6a:	4770      	bx	lr
    2e6c:	20000468 	.word	0x20000468

00002e70 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    2e70:	4b02      	ldr	r3, [pc, #8]	; (2e7c <panic+0xc>)
    2e72:	4803      	ldr	r0, [pc, #12]	; (2e80 <panic+0x10>)
    2e74:	2201      	movs	r2, #1
    2e76:	701a      	strb	r2, [r3, #0]
    2e78:	f007 bba5 	b.w	a5c6 <log_output_flush>
    2e7c:	20000d91 	.word	0x20000d91
    2e80:	0000b288 	.word	0x0000b288

00002e84 <process>:
{
    2e84:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2e86:	4b06      	ldr	r3, [pc, #24]	; (2ea0 <process+0x1c>)
    2e88:	6818      	ldr	r0, [r3, #0]
{
    2e8a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2e8c:	f7ff fc76 	bl	277c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    2e90:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2e92:	4603      	mov	r3, r0
}
    2e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    2e98:	4802      	ldr	r0, [pc, #8]	; (2ea4 <process+0x20>)
    2e9a:	220f      	movs	r2, #15
    2e9c:	4718      	bx	r3
    2e9e:	bf00      	nop
    2ea0:	20000468 	.word	0x20000468
    2ea4:	0000b288 	.word	0x0000b288

00002ea8 <char_out>:
{
    2ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2eaa:	4f07      	ldr	r7, [pc, #28]	; (2ec8 <char_out+0x20>)
    2eac:	460d      	mov	r5, r1
    2eae:	4604      	mov	r4, r0
    2eb0:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    2eb2:	42b4      	cmp	r4, r6
    2eb4:	d101      	bne.n	2eba <char_out+0x12>
}
    2eb6:	4628      	mov	r0, r5
    2eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    2eba:	f814 1b01 	ldrb.w	r1, [r4], #1
    2ebe:	68bb      	ldr	r3, [r7, #8]
    2ec0:	4801      	ldr	r0, [pc, #4]	; (2ec8 <char_out+0x20>)
    2ec2:	685b      	ldr	r3, [r3, #4]
    2ec4:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2ec6:	e7f4      	b.n	2eb2 <char_out+0xa>
    2ec8:	0000af34 	.word	0x0000af34

00002ecc <log_backend_uart_init>:
{
    2ecc:	b508      	push	{r3, lr}
    2ece:	4807      	ldr	r0, [pc, #28]	; (2eec <log_backend_uart_init+0x20>)
    2ed0:	f007 fe81 	bl	abd6 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    2ed4:	b948      	cbnz	r0, 2eea <log_backend_uart_init+0x1e>
    2ed6:	4906      	ldr	r1, [pc, #24]	; (2ef0 <log_backend_uart_init+0x24>)
    2ed8:	4806      	ldr	r0, [pc, #24]	; (2ef4 <log_backend_uart_init+0x28>)
    2eda:	4a07      	ldr	r2, [pc, #28]	; (2ef8 <log_backend_uart_init+0x2c>)
    2edc:	237f      	movs	r3, #127	; 0x7f
    2ede:	f007 faf2 	bl	a4c6 <assert_print>
    2ee2:	4805      	ldr	r0, [pc, #20]	; (2ef8 <log_backend_uart_init+0x2c>)
    2ee4:	217f      	movs	r1, #127	; 0x7f
    2ee6:	f007 fae7 	bl	a4b8 <assert_post_action>
}
    2eea:	bd08      	pop	{r3, pc}
    2eec:	0000af34 	.word	0x0000af34
    2ef0:	0000bb25 	.word	0x0000bb25
    2ef4:	0000b53f 	.word	0x0000b53f
    2ef8:	0000bae7 	.word	0x0000bae7

00002efc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2f00:	4605      	mov	r5, r0
    2f02:	f04f 0320 	mov.w	r3, #32
    2f06:	f3ef 8611 	mrs	r6, BASEPRI
    2f0a:	f383 8812 	msr	BASEPRI_MAX, r3
    2f0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2f12:	4820      	ldr	r0, [pc, #128]	; (2f94 <pm_state_notify+0x98>)
    2f14:	f004 fdb2 	bl	7a7c <z_spin_lock_valid>
    2f18:	b968      	cbnz	r0, 2f36 <pm_state_notify+0x3a>
    2f1a:	4a1f      	ldr	r2, [pc, #124]	; (2f98 <pm_state_notify+0x9c>)
    2f1c:	491f      	ldr	r1, [pc, #124]	; (2f9c <pm_state_notify+0xa0>)
    2f1e:	4820      	ldr	r0, [pc, #128]	; (2fa0 <pm_state_notify+0xa4>)
    2f20:	2394      	movs	r3, #148	; 0x94
    2f22:	f007 fad0 	bl	a4c6 <assert_print>
    2f26:	491b      	ldr	r1, [pc, #108]	; (2f94 <pm_state_notify+0x98>)
    2f28:	481e      	ldr	r0, [pc, #120]	; (2fa4 <pm_state_notify+0xa8>)
    2f2a:	f007 facc 	bl	a4c6 <assert_print>
    2f2e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2f30:	4819      	ldr	r0, [pc, #100]	; (2f98 <pm_state_notify+0x9c>)
    2f32:	f007 fac1 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    2f36:	4817      	ldr	r0, [pc, #92]	; (2f94 <pm_state_notify+0x98>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2f38:	4f1b      	ldr	r7, [pc, #108]	; (2fa8 <pm_state_notify+0xac>)
    2f3a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2fac <pm_state_notify+0xb0>
    2f3e:	f004 fdbb 	bl	7ab8 <z_spin_lock_set_owner>
	return list->head;
    2f42:	4b1b      	ldr	r3, [pc, #108]	; (2fb0 <pm_state_notify+0xb4>)
    2f44:	681c      	ldr	r4, [r3, #0]
    2f46:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2f4a:	b97c      	cbnz	r4, 2f6c <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2f4c:	4811      	ldr	r0, [pc, #68]	; (2f94 <pm_state_notify+0x98>)
    2f4e:	f004 fda3 	bl	7a98 <z_spin_unlock_valid>
    2f52:	b9c8      	cbnz	r0, 2f88 <pm_state_notify+0x8c>
    2f54:	4a10      	ldr	r2, [pc, #64]	; (2f98 <pm_state_notify+0x9c>)
    2f56:	4917      	ldr	r1, [pc, #92]	; (2fb4 <pm_state_notify+0xb8>)
    2f58:	4811      	ldr	r0, [pc, #68]	; (2fa0 <pm_state_notify+0xa4>)
    2f5a:	23c2      	movs	r3, #194	; 0xc2
    2f5c:	f007 fab3 	bl	a4c6 <assert_print>
    2f60:	490c      	ldr	r1, [pc, #48]	; (2f94 <pm_state_notify+0x98>)
    2f62:	4815      	ldr	r0, [pc, #84]	; (2fb8 <pm_state_notify+0xbc>)
    2f64:	f007 faaf 	bl	a4c6 <assert_print>
    2f68:	21c2      	movs	r1, #194	; 0xc2
    2f6a:	e7e1      	b.n	2f30 <pm_state_notify+0x34>
			callback = notifier->state_exit;
    2f6c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    2f70:	2d00      	cmp	r5, #0
    2f72:	bf18      	it	ne
    2f74:	4613      	movne	r3, r2
		if (callback) {
    2f76:	b12b      	cbz	r3, 2f84 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2f78:	f898 2010 	ldrb.w	r2, [r8, #16]
    2f7c:	fb09 f202 	mul.w	r2, r9, r2
    2f80:	5cb8      	ldrb	r0, [r7, r2]
    2f82:	4798      	blx	r3
	return node->next;
    2f84:	6824      	ldr	r4, [r4, #0]
    2f86:	e7e0      	b.n	2f4a <pm_state_notify+0x4e>
	__asm__ volatile(
    2f88:	f386 8811 	msr	BASEPRI, r6
    2f8c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f94:	2000046c 	.word	0x2000046c
    2f98:	0000b7ed 	.word	0x0000b7ed
    2f9c:	0000b846 	.word	0x0000b846
    2fa0:	0000b53f 	.word	0x0000b53f
    2fa4:	0000b85b 	.word	0x0000b85b
    2fa8:	20000480 	.word	0x20000480
    2fac:	20000b58 	.word	0x20000b58
    2fb0:	2000048c 	.word	0x2000048c
    2fb4:	0000b81a 	.word	0x0000b81a
    2fb8:	0000b831 	.word	0x0000b831

00002fbc <pm_system_resume>:

void pm_system_resume(void)
{
    2fbc:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    2fbe:	4b19      	ldr	r3, [pc, #100]	; (3024 <pm_system_resume+0x68>)
    2fc0:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2fc2:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2fc6:	f004 031f 	and.w	r3, r4, #31
    2fca:	2201      	movs	r2, #1
    2fcc:	409a      	lsls	r2, r3
    2fce:	4b16      	ldr	r3, [pc, #88]	; (3028 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2fd0:	0961      	lsrs	r1, r4, #5
    2fd2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2fd6:	43d0      	mvns	r0, r2
    2fd8:	e853 1f00 	ldrex	r1, [r3]
    2fdc:	ea01 0500 	and.w	r5, r1, r0
    2fe0:	e843 5600 	strex	r6, r5, [r3]
    2fe4:	2e00      	cmp	r6, #0
    2fe6:	d1f7      	bne.n	2fd8 <pm_system_resume+0x1c>
    2fe8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2fec:	420a      	tst	r2, r1
    2fee:	d013      	beq.n	3018 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    2ff0:	4b0e      	ldr	r3, [pc, #56]	; (302c <pm_system_resume+0x70>)
    2ff2:	4d0f      	ldr	r5, [pc, #60]	; (3030 <pm_system_resume+0x74>)
    2ff4:	b18b      	cbz	r3, 301a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2ff6:	230c      	movs	r3, #12
    2ff8:	4363      	muls	r3, r4
    2ffa:	18ea      	adds	r2, r5, r3
    2ffc:	5ce8      	ldrb	r0, [r5, r3]
    2ffe:	7851      	ldrb	r1, [r2, #1]
    3000:	f007 fb40 	bl	a684 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    3004:	2000      	movs	r0, #0
    3006:	f7ff ff79 	bl	2efc <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    300a:	230c      	movs	r3, #12
    300c:	435c      	muls	r4, r3
    300e:	192a      	adds	r2, r5, r4
    3010:	2300      	movs	r3, #0
    3012:	512b      	str	r3, [r5, r4]
    3014:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    3018:	bd70      	pop	{r4, r5, r6, pc}
    301a:	f383 8811 	msr	BASEPRI, r3
    301e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3022:	e7ef      	b.n	3004 <pm_system_resume+0x48>
    3024:	20000b58 	.word	0x20000b58
    3028:	20000494 	.word	0x20000494
    302c:	0000a685 	.word	0x0000a685
    3030:	20000480 	.word	0x20000480

00003034 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    3034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    3038:	4b47      	ldr	r3, [pc, #284]	; (3158 <pm_system_suspend+0x124>)
{
    303a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    303c:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    303e:	f04f 0320 	mov.w	r3, #32
    3042:	f3ef 8811 	mrs	r8, BASEPRI
    3046:	f383 8812 	msr	BASEPRI_MAX, r3
    304a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    304e:	4843      	ldr	r0, [pc, #268]	; (315c <pm_system_suspend+0x128>)
    3050:	f004 fd14 	bl	7a7c <z_spin_lock_valid>
    3054:	b968      	cbnz	r0, 3072 <pm_system_suspend+0x3e>
    3056:	4a42      	ldr	r2, [pc, #264]	; (3160 <pm_system_suspend+0x12c>)
    3058:	4942      	ldr	r1, [pc, #264]	; (3164 <pm_system_suspend+0x130>)
    305a:	4843      	ldr	r0, [pc, #268]	; (3168 <pm_system_suspend+0x134>)
    305c:	2394      	movs	r3, #148	; 0x94
    305e:	f007 fa32 	bl	a4c6 <assert_print>
    3062:	493e      	ldr	r1, [pc, #248]	; (315c <pm_system_suspend+0x128>)
    3064:	4841      	ldr	r0, [pc, #260]	; (316c <pm_system_suspend+0x138>)
    3066:	f007 fa2e 	bl	a4c6 <assert_print>
    306a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    306c:	483c      	ldr	r0, [pc, #240]	; (3160 <pm_system_suspend+0x12c>)
    306e:	f007 fa23 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    3072:	483a      	ldr	r0, [pc, #232]	; (315c <pm_system_suspend+0x128>)
    3074:	4e3e      	ldr	r6, [pc, #248]	; (3170 <pm_system_suspend+0x13c>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    3076:	240c      	movs	r4, #12
    3078:	f004 fd1e 	bl	7ab8 <z_spin_lock_set_owner>
    307c:	436c      	muls	r4, r5
    307e:	4b3d      	ldr	r3, [pc, #244]	; (3174 <pm_system_suspend+0x140>)
    3080:	5d19      	ldrb	r1, [r3, r4]
    3082:	191a      	adds	r2, r3, r4
    3084:	b1b9      	cbz	r1, 30b6 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    3086:	ca07      	ldmia	r2, {r0, r1, r2}
    3088:	eb06 0c04 	add.w	ip, r6, r4
    308c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    3090:	2200      	movs	r2, #0
    3092:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3094:	4831      	ldr	r0, [pc, #196]	; (315c <pm_system_suspend+0x128>)
    3096:	f004 fcff 	bl	7a98 <z_spin_unlock_valid>
    309a:	4604      	mov	r4, r0
    309c:	b9b0      	cbnz	r0, 30cc <pm_system_suspend+0x98>
    309e:	4a30      	ldr	r2, [pc, #192]	; (3160 <pm_system_suspend+0x12c>)
    30a0:	4935      	ldr	r1, [pc, #212]	; (3178 <pm_system_suspend+0x144>)
    30a2:	4831      	ldr	r0, [pc, #196]	; (3168 <pm_system_suspend+0x134>)
    30a4:	23c2      	movs	r3, #194	; 0xc2
    30a6:	f007 fa0e 	bl	a4c6 <assert_print>
    30aa:	492c      	ldr	r1, [pc, #176]	; (315c <pm_system_suspend+0x128>)
    30ac:	4833      	ldr	r0, [pc, #204]	; (317c <pm_system_suspend+0x148>)
    30ae:	f007 fa0a 	bl	a4c6 <assert_print>
    30b2:	21c2      	movs	r1, #194	; 0xc2
    30b4:	e7da      	b.n	306c <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    30b6:	4639      	mov	r1, r7
    30b8:	4628      	mov	r0, r5
    30ba:	f000 f869 	bl	3190 <pm_policy_next_state>
		if (info != NULL) {
    30be:	2800      	cmp	r0, #0
    30c0:	d0e8      	beq.n	3094 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
    30c2:	c807      	ldmia	r0, {r0, r1, r2}
    30c4:	4434      	add	r4, r6
    30c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    30ca:	e7e3      	b.n	3094 <pm_system_suspend+0x60>
	__asm__ volatile(
    30cc:	f388 8811 	msr	BASEPRI, r8
    30d0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    30d4:	230c      	movs	r3, #12
    30d6:	436b      	muls	r3, r5
    30d8:	18f2      	adds	r2, r6, r3
    30da:	5cf3      	ldrb	r3, [r6, r3]
    30dc:	2b00      	cmp	r3, #0
    30de:	d039      	beq.n	3154 <pm_system_suspend+0x120>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    30e0:	1c7b      	adds	r3, r7, #1
    30e2:	d00f      	beq.n	3104 <pm_system_suspend+0xd0>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    30e4:	f8d2 e008 	ldr.w	lr, [r2, #8]
    30e8:	4825      	ldr	r0, [pc, #148]	; (3180 <pm_system_suspend+0x14c>)
    30ea:	4a26      	ldr	r2, [pc, #152]	; (3184 <pm_system_suspend+0x150>)
    30ec:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    30f0:	2100      	movs	r1, #0
    30f2:	2300      	movs	r3, #0
    30f4:	fbee 010c 	umlal	r0, r1, lr, ip
    30f8:	f7fd fea6 	bl	e48 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    30fc:	2101      	movs	r1, #1
    30fe:	1a38      	subs	r0, r7, r0
    3100:	f002 fc48 	bl	5994 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3104:	f005 f944 	bl	8390 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    3108:	2001      	movs	r0, #1
    310a:	f7ff fef7 	bl	2efc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    310e:	f3bf 8f5b 	dmb	ish
    3112:	4b1d      	ldr	r3, [pc, #116]	; (3188 <pm_system_suspend+0x154>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    3114:	096a      	lsrs	r2, r5, #5
    3116:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    311a:	f005 011f 	and.w	r1, r5, #31
    311e:	2201      	movs	r2, #1
    3120:	408a      	lsls	r2, r1
    3122:	e853 0f00 	ldrex	r0, [r3]
    3126:	4310      	orrs	r0, r2
    3128:	e843 0100 	strex	r1, r0, [r3]
    312c:	2900      	cmp	r1, #0
    312e:	d1f8      	bne.n	3122 <pm_system_suspend+0xee>
    3130:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    3134:	4b15      	ldr	r3, [pc, #84]	; (318c <pm_system_suspend+0x158>)
    3136:	b133      	cbz	r3, 3146 <pm_system_suspend+0x112>
		pm_state_set(info->state, info->substate_id);
    3138:	230c      	movs	r3, #12
    313a:	436b      	muls	r3, r5
    313c:	18f2      	adds	r2, r6, r3
    313e:	5cf0      	ldrb	r0, [r6, r3]
    3140:	7851      	ldrb	r1, [r2, #1]
    3142:	f007 fa93 	bl	a66c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    3146:	f7ff ff39 	bl	2fbc <pm_system_resume>
	k_sched_unlock();
    314a:	f005 f98d 	bl	8468 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
    314e:	4620      	mov	r0, r4
    3150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    3154:	461c      	mov	r4, r3
    3156:	e7fa      	b.n	314e <pm_system_suspend+0x11a>
    3158:	20000b58 	.word	0x20000b58
    315c:	20000470 	.word	0x20000470
    3160:	0000b7ed 	.word	0x0000b7ed
    3164:	0000b846 	.word	0x0000b846
    3168:	0000b53f 	.word	0x0000b53f
    316c:	0000b85b 	.word	0x0000b85b
    3170:	20000480 	.word	0x20000480
    3174:	20000474 	.word	0x20000474
    3178:	0000b81a 	.word	0x0000b81a
    317c:	0000b831 	.word	0x0000b831
    3180:	000f423f 	.word	0x000f423f
    3184:	000f4240 	.word	0x000f4240
    3188:	20000494 	.word	0x20000494
    318c:	0000a66d 	.word	0x0000a66d

00003190 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    3190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3194:	b085      	sub	sp, #20
    3196:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3198:	a903      	add	r1, sp, #12
    319a:	f000 f843 	bl	3224 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    319e:	4b1e      	ldr	r3, [pc, #120]	; (3218 <pm_policy_next_state+0x88>)
    31a0:	9d03      	ldr	r5, [sp, #12]
    31a2:	f8d3 a000 	ldr.w	sl, [r3]
    31a6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 321c <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    31aa:	1e43      	subs	r3, r0, #1
    31ac:	b21b      	sxth	r3, r3
    31ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    31b2:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    31b4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    31b8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    31bc:	f04f 0b00 	mov.w	fp, #0
    31c0:	b924      	cbnz	r4, 31cc <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    31c2:	46a1      	mov	r9, r4
}
    31c4:	4648      	mov	r0, r9
    31c6:	b005      	add	sp, #20
    31c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31cc:	6868      	ldr	r0, [r5, #4]
    31ce:	4a14      	ldr	r2, [pc, #80]	; (3220 <pm_policy_next_state+0x90>)
    31d0:	46c4      	mov	ip, r8
    31d2:	4659      	mov	r1, fp
    31d4:	fbe0 c107 	umlal	ip, r1, r0, r7
    31d8:	2300      	movs	r3, #0
    31da:	4660      	mov	r0, ip
    31dc:	f7fd fe34 	bl	e48 <__aeabi_uldivmod>
    31e0:	9001      	str	r0, [sp, #4]
    31e2:	68a8      	ldr	r0, [r5, #8]
    31e4:	4a0e      	ldr	r2, [pc, #56]	; (3220 <pm_policy_next_state+0x90>)
    31e6:	46c4      	mov	ip, r8
    31e8:	4659      	mov	r1, fp
    31ea:	fbe0 c107 	umlal	ip, r1, r0, r7
    31ee:	2300      	movs	r3, #0
    31f0:	4660      	mov	r0, ip
    31f2:	f7fd fe29 	bl	e48 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    31f6:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    31fa:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    31fc:	d001      	beq.n	3202 <pm_policy_next_state+0x72>
    31fe:	4582      	cmp	sl, r0
    3200:	d905      	bls.n	320e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    3202:	1c73      	adds	r3, r6, #1
    3204:	d0de      	beq.n	31c4 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    3206:	9b01      	ldr	r3, [sp, #4]
    3208:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    320a:	42b0      	cmp	r0, r6
    320c:	d9da      	bls.n	31c4 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    320e:	3c01      	subs	r4, #1
    3210:	b2a4      	uxth	r4, r4
    3212:	3d0c      	subs	r5, #12
    3214:	e7d4      	b.n	31c0 <pm_policy_next_state+0x30>
    3216:	bf00      	nop
    3218:	200000b8 	.word	0x200000b8
    321c:	000f423f 	.word	0x000f423f
    3220:	000f4240 	.word	0x000f4240

00003224 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    3224:	b908      	cbnz	r0, 322a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    3226:	4b02      	ldr	r3, [pc, #8]	; (3230 <pm_state_cpu_get_all+0xc>)
    3228:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    322a:	2000      	movs	r0, #0
    322c:	4770      	bx	lr
    322e:	bf00      	nop
    3230:	0000b298 	.word	0x0000b298

00003234 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    3234:	4801      	ldr	r0, [pc, #4]	; (323c <nrf_cc3xx_platform_abort_init+0x8>)
    3236:	f006 becb 	b.w	9fd0 <nrf_cc3xx_platform_set_abort>
    323a:	bf00      	nop
    323c:	0000b298 	.word	0x0000b298

00003240 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3240:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    3242:	4604      	mov	r4, r0
    3244:	b918      	cbnz	r0, 324e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    3246:	4b0f      	ldr	r3, [pc, #60]	; (3284 <mutex_free_platform+0x44>)
    3248:	480f      	ldr	r0, [pc, #60]	; (3288 <mutex_free_platform+0x48>)
    324a:	685b      	ldr	r3, [r3, #4]
    324c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    324e:	6861      	ldr	r1, [r4, #4]
    3250:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    3254:	d00f      	beq.n	3276 <mutex_free_platform+0x36>
    3256:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    325a:	d00c      	beq.n	3276 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    325c:	4d0b      	ldr	r5, [pc, #44]	; (328c <mutex_free_platform+0x4c>)
    325e:	42a9      	cmp	r1, r5
    3260:	d009      	beq.n	3276 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3262:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    3266:	d007      	beq.n	3278 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3268:	4809      	ldr	r0, [pc, #36]	; (3290 <mutex_free_platform+0x50>)
    326a:	4621      	mov	r1, r4
    326c:	f004 fa82 	bl	7774 <k_mem_slab_free>
        mutex->mutex = NULL;
    3270:	2300      	movs	r3, #0
    3272:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3274:	6065      	str	r5, [r4, #4]
}
    3276:	bd38      	pop	{r3, r4, r5, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    3278:	6820      	ldr	r0, [r4, #0]
    327a:	2214      	movs	r2, #20
    327c:	f007 fddd 	bl	ae3a <memset>
    3280:	e7f8      	b.n	3274 <mutex_free_platform+0x34>
    3282:	bf00      	nop
    3284:	20000184 	.word	0x20000184
    3288:	0000bb5c 	.word	0x0000bb5c
    328c:	a95c5f2c 	.word	0xa95c5f2c
    3290:	20000998 	.word	0x20000998

00003294 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3294:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3296:	b320      	cbz	r0, 32e2 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    3298:	6843      	ldr	r3, [r0, #4]
    329a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    329e:	d110      	bne.n	32c2 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    32a0:	2201      	movs	r2, #1
    32a2:	6803      	ldr	r3, [r0, #0]
    32a4:	f3bf 8f5b 	dmb	ish
    32a8:	e853 1f00 	ldrex	r1, [r3]
    32ac:	2900      	cmp	r1, #0
    32ae:	d103      	bne.n	32b8 <mutex_lock_platform+0x24>
    32b0:	e843 2000 	strex	r0, r2, [r3]
    32b4:	2800      	cmp	r0, #0
    32b6:	d1f7      	bne.n	32a8 <mutex_lock_platform+0x14>
    32b8:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    32bc:	d10d      	bne.n	32da <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    32be:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    32c0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    32c2:	4a09      	ldr	r2, [pc, #36]	; (32e8 <mutex_lock_platform+0x54>)
    32c4:	4293      	cmp	r3, r2
    32c6:	d00a      	beq.n	32de <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    32c8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    32ca:	f04f 32ff 	mov.w	r2, #4294967295
    32ce:	f04f 33ff 	mov.w	r3, #4294967295
    32d2:	f004 fc2b 	bl	7b2c <z_impl_k_mutex_lock>
        if (ret == 0) {
    32d6:	2800      	cmp	r0, #0
    32d8:	d0f1      	beq.n	32be <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    32da:	4804      	ldr	r0, [pc, #16]	; (32ec <mutex_lock_platform+0x58>)
    32dc:	e7f0      	b.n	32c0 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    32de:	4804      	ldr	r0, [pc, #16]	; (32f0 <mutex_lock_platform+0x5c>)
    32e0:	e7ee      	b.n	32c0 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    32e2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    32e6:	e7eb      	b.n	32c0 <mutex_lock_platform+0x2c>
    32e8:	a95c5f2c 	.word	0xa95c5f2c
    32ec:	ffff8fe9 	.word	0xffff8fe9
    32f0:	ffff8fea 	.word	0xffff8fea

000032f4 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    32f4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    32f6:	b1d8      	cbz	r0, 3330 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    32f8:	6843      	ldr	r3, [r0, #4]
    32fa:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    32fe:	d110      	bne.n	3322 <mutex_unlock_platform+0x2e>
    3300:	2200      	movs	r2, #0
    3302:	6803      	ldr	r3, [r0, #0]
    3304:	f3bf 8f5b 	dmb	ish
    3308:	e853 1f00 	ldrex	r1, [r3]
    330c:	2901      	cmp	r1, #1
    330e:	d103      	bne.n	3318 <mutex_unlock_platform+0x24>
    3310:	e843 2000 	strex	r0, r2, [r3]
    3314:	2800      	cmp	r0, #0
    3316:	d1f7      	bne.n	3308 <mutex_unlock_platform+0x14>
    3318:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    331c:	d10b      	bne.n	3336 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    331e:	2000      	movs	r0, #0
    }
}
    3320:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3322:	4a07      	ldr	r2, [pc, #28]	; (3340 <mutex_unlock_platform+0x4c>)
    3324:	4293      	cmp	r3, r2
    3326:	d008      	beq.n	333a <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3328:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    332a:	f004 fccf 	bl	7ccc <z_impl_k_mutex_unlock>
    332e:	e7f6      	b.n	331e <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3330:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3334:	e7f4      	b.n	3320 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3336:	4803      	ldr	r0, [pc, #12]	; (3344 <mutex_unlock_platform+0x50>)
    3338:	e7f2      	b.n	3320 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    333a:	4803      	ldr	r0, [pc, #12]	; (3348 <mutex_unlock_platform+0x54>)
    333c:	e7f0      	b.n	3320 <mutex_unlock_platform+0x2c>
    333e:	bf00      	nop
    3340:	a95c5f2c 	.word	0xa95c5f2c
    3344:	ffff8fe9 	.word	0xffff8fe9
    3348:	ffff8fea 	.word	0xffff8fea

0000334c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    334c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    334e:	4604      	mov	r4, r0
    3350:	b918      	cbnz	r0, 335a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3352:	4b1d      	ldr	r3, [pc, #116]	; (33c8 <mutex_init_platform+0x7c>)
    3354:	481d      	ldr	r0, [pc, #116]	; (33cc <mutex_init_platform+0x80>)
    3356:	685b      	ldr	r3, [r3, #4]
    3358:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    335a:	6863      	ldr	r3, [r4, #4]
    335c:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3360:	d02f      	beq.n	33c2 <mutex_init_platform+0x76>
    3362:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    3366:	d02c      	beq.n	33c2 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    3368:	4a19      	ldr	r2, [pc, #100]	; (33d0 <mutex_init_platform+0x84>)
    336a:	4293      	cmp	r3, r2
    336c:	d119      	bne.n	33a2 <mutex_init_platform+0x56>
    336e:	6823      	ldr	r3, [r4, #0]
    3370:	bb03      	cbnz	r3, 33b4 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3372:	4818      	ldr	r0, [pc, #96]	; (33d4 <mutex_init_platform+0x88>)
    3374:	f04f 32ff 	mov.w	r2, #4294967295
    3378:	f04f 33ff 	mov.w	r3, #4294967295
    337c:	4621      	mov	r1, r4
    337e:	f004 f98f 	bl	76a0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3382:	b908      	cbnz	r0, 3388 <mutex_init_platform+0x3c>
    3384:	6823      	ldr	r3, [r4, #0]
    3386:	b91b      	cbnz	r3, 3390 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    3388:	4b0f      	ldr	r3, [pc, #60]	; (33c8 <mutex_init_platform+0x7c>)
    338a:	4813      	ldr	r0, [pc, #76]	; (33d8 <mutex_init_platform+0x8c>)
    338c:	685b      	ldr	r3, [r3, #4]
    338e:	4798      	blx	r3
    3390:	6820      	ldr	r0, [r4, #0]
    3392:	2214      	movs	r2, #20
    3394:	2100      	movs	r1, #0
    3396:	f007 fd50 	bl	ae3a <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    339a:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    339e:	6063      	str	r3, [r4, #4]
    33a0:	e008      	b.n	33b4 <mutex_init_platform+0x68>
    switch(flags){
    33a2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    33a6:	d80d      	bhi.n	33c4 <mutex_init_platform+0x78>
    33a8:	2b3a      	cmp	r3, #58	; 0x3a
    33aa:	d003      	beq.n	33b4 <mutex_init_platform+0x68>
    33ac:	f640 62ba 	movw	r2, #3770	; 0xeba
    33b0:	4293      	cmp	r3, r2
    33b2:	d1de      	bne.n	3372 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    33b4:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    33b6:	f007 fc6e 	bl	ac96 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    33ba:	6863      	ldr	r3, [r4, #4]
    33bc:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    33c0:	6063      	str	r3, [r4, #4]
}
    33c2:	bd10      	pop	{r4, pc}
    switch(flags){
    33c4:	4a05      	ldr	r2, [pc, #20]	; (33dc <mutex_init_platform+0x90>)
    33c6:	e7f3      	b.n	33b0 <mutex_init_platform+0x64>
    33c8:	20000184 	.word	0x20000184
    33cc:	0000bb5c 	.word	0x0000bb5c
    33d0:	a95c5f2c 	.word	0xa95c5f2c
    33d4:	20000998 	.word	0x20000998
    33d8:	0000bb82 	.word	0x0000bb82
    33dc:	3a00003a 	.word	0x3a00003a

000033e0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    33e0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    33e2:	4906      	ldr	r1, [pc, #24]	; (33fc <nrf_cc3xx_platform_mutex_init+0x1c>)
    33e4:	4806      	ldr	r0, [pc, #24]	; (3400 <nrf_cc3xx_platform_mutex_init+0x20>)
    33e6:	2340      	movs	r3, #64	; 0x40
    33e8:	2214      	movs	r2, #20
    33ea:	f007 fc29 	bl	ac40 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    33ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    33f2:	4904      	ldr	r1, [pc, #16]	; (3404 <nrf_cc3xx_platform_mutex_init+0x24>)
    33f4:	4804      	ldr	r0, [pc, #16]	; (3408 <nrf_cc3xx_platform_mutex_init+0x28>)
    33f6:	f006 be5d 	b.w	a0b4 <nrf_cc3xx_platform_set_mutexes>
    33fa:	bf00      	nop
    33fc:	20000498 	.word	0x20000498
    3400:	20000998 	.word	0x20000998
    3404:	0000b2a0 	.word	0x0000b2a0
    3408:	0000b2b4 	.word	0x0000b2b4

0000340c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    340c:	4901      	ldr	r1, [pc, #4]	; (3414 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    340e:	2210      	movs	r2, #16
	str	r2, [r1]
    3410:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3412:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3414:	e000ed10 	.word	0xe000ed10

00003418 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3418:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    341a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    341c:	f380 8811 	msr	BASEPRI, r0
	isb
    3420:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    3424:	f3bf 8f4f 	dsb	sy
    3428:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    342a:	b662      	cpsie	i
	isb
    342c:	f3bf 8f6f 	isb	sy

	bx	lr
    3430:	4770      	bx	lr
    3432:	bf00      	nop

00003434 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3434:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3436:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3438:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    343c:	f3bf 8f4f 	dsb	sy
    3440:	bf20      	wfe

	msr	BASEPRI, r0
    3442:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3446:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3448:	4770      	bx	lr
    344a:	bf00      	nop

0000344c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    344c:	b570      	push	{r4, r5, r6, lr}
    344e:	4606      	mov	r6, r0
    3450:	b086      	sub	sp, #24

	if (esf != NULL) {
    3452:	460d      	mov	r5, r1
    3454:	2900      	cmp	r1, #0
    3456:	d038      	beq.n	34ca <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3458:	688b      	ldr	r3, [r1, #8]
    345a:	9305      	str	r3, [sp, #20]
    345c:	684b      	ldr	r3, [r1, #4]
    345e:	9304      	str	r3, [sp, #16]
    3460:	680b      	ldr	r3, [r1, #0]
    3462:	9303      	str	r3, [sp, #12]
    3464:	2400      	movs	r4, #0
    3466:	4b1c      	ldr	r3, [pc, #112]	; (34d8 <z_arm_fatal_error+0x8c>)
    3468:	491c      	ldr	r1, [pc, #112]	; (34dc <z_arm_fatal_error+0x90>)
    346a:	9302      	str	r3, [sp, #8]
    346c:	2201      	movs	r2, #1
    346e:	4623      	mov	r3, r4
    3470:	4620      	mov	r0, r4
    3472:	e9cd 4400 	strd	r4, r4, [sp]
    3476:	f007 f8b7 	bl	a5e8 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    347a:	696b      	ldr	r3, [r5, #20]
    347c:	9305      	str	r3, [sp, #20]
    347e:	692b      	ldr	r3, [r5, #16]
    3480:	9304      	str	r3, [sp, #16]
    3482:	68eb      	ldr	r3, [r5, #12]
    3484:	9303      	str	r3, [sp, #12]
    3486:	4b16      	ldr	r3, [pc, #88]	; (34e0 <z_arm_fatal_error+0x94>)
    3488:	4914      	ldr	r1, [pc, #80]	; (34dc <z_arm_fatal_error+0x90>)
    348a:	9400      	str	r4, [sp, #0]
    348c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3490:	2201      	movs	r2, #1
    3492:	4623      	mov	r3, r4
    3494:	4620      	mov	r0, r4
    3496:	f007 f8a7 	bl	a5e8 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    349a:	69eb      	ldr	r3, [r5, #28]
    349c:	9303      	str	r3, [sp, #12]
    349e:	4b11      	ldr	r3, [pc, #68]	; (34e4 <z_arm_fatal_error+0x98>)
    34a0:	490e      	ldr	r1, [pc, #56]	; (34dc <z_arm_fatal_error+0x90>)
    34a2:	9400      	str	r4, [sp, #0]
    34a4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    34a8:	2201      	movs	r2, #1
    34aa:	4623      	mov	r3, r4
    34ac:	4620      	mov	r0, r4
    34ae:	f007 f89b 	bl	a5e8 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    34b2:	69ab      	ldr	r3, [r5, #24]
    34b4:	9303      	str	r3, [sp, #12]
    34b6:	4b0c      	ldr	r3, [pc, #48]	; (34e8 <z_arm_fatal_error+0x9c>)
    34b8:	4908      	ldr	r1, [pc, #32]	; (34dc <z_arm_fatal_error+0x90>)
    34ba:	9400      	str	r4, [sp, #0]
    34bc:	e9cd 4301 	strd	r4, r3, [sp, #4]
    34c0:	2201      	movs	r2, #1
    34c2:	4623      	mov	r3, r4
    34c4:	4620      	mov	r0, r4
    34c6:	f007 f88f 	bl	a5e8 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    34ca:	4629      	mov	r1, r5
    34cc:	4630      	mov	r0, r6
}
    34ce:	b006      	add	sp, #24
    34d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    34d4:	f003 bf50 	b.w	7378 <z_fatal_error>
    34d8:	0000bbaf 	.word	0x0000bbaf
    34dc:	0000b190 	.word	0x0000b190
    34e0:	0000bbde 	.word	0x0000bbde
    34e4:	0000bc0d 	.word	0x0000bc0d
    34e8:	0000bc1c 	.word	0x0000bc1c

000034ec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    34ec:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    34ee:	2800      	cmp	r0, #0
    34f0:	db07      	blt.n	3502 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    34f2:	4a04      	ldr	r2, [pc, #16]	; (3504 <arch_irq_enable+0x18>)
    34f4:	0941      	lsrs	r1, r0, #5
    34f6:	2301      	movs	r3, #1
    34f8:	f000 001f 	and.w	r0, r0, #31
    34fc:	4083      	lsls	r3, r0
    34fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3502:	4770      	bx	lr
    3504:	e000e100 	.word	0xe000e100

00003508 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3508:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    350a:	2800      	cmp	r0, #0
    350c:	db0c      	blt.n	3528 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    350e:	0943      	lsrs	r3, r0, #5
    3510:	4906      	ldr	r1, [pc, #24]	; (352c <arch_irq_disable+0x24>)
    3512:	f000 001f 	and.w	r0, r0, #31
    3516:	3320      	adds	r3, #32
    3518:	2201      	movs	r2, #1
    351a:	4082      	lsls	r2, r0
    351c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3520:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3524:	f3bf 8f6f 	isb	sy
}
    3528:	4770      	bx	lr
    352a:	bf00      	nop
    352c:	e000e100 	.word	0xe000e100

00003530 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3530:	4b05      	ldr	r3, [pc, #20]	; (3548 <arch_irq_is_enabled+0x18>)
    3532:	0942      	lsrs	r2, r0, #5
    3534:	f000 001f 	and.w	r0, r0, #31
    3538:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    353c:	2301      	movs	r3, #1
    353e:	fa03 f000 	lsl.w	r0, r3, r0
}
    3542:	4010      	ands	r0, r2
    3544:	4770      	bx	lr
    3546:	bf00      	nop
    3548:	e000e100 	.word	0xe000e100

0000354c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    354c:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    354e:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3550:	2b07      	cmp	r3, #7
{
    3552:	4604      	mov	r4, r0
    3554:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3556:	d90f      	bls.n	3578 <z_arm_irq_priority_set+0x2c>
    3558:	4a11      	ldr	r2, [pc, #68]	; (35a0 <z_arm_irq_priority_set+0x54>)
    355a:	4912      	ldr	r1, [pc, #72]	; (35a4 <z_arm_irq_priority_set+0x58>)
    355c:	4812      	ldr	r0, [pc, #72]	; (35a8 <z_arm_irq_priority_set+0x5c>)
    355e:	235b      	movs	r3, #91	; 0x5b
    3560:	f006 ffb1 	bl	a4c6 <assert_print>
    3564:	4811      	ldr	r0, [pc, #68]	; (35ac <z_arm_irq_priority_set+0x60>)
    3566:	4629      	mov	r1, r5
    3568:	2307      	movs	r3, #7
    356a:	4622      	mov	r2, r4
    356c:	f006 ffab 	bl	a4c6 <assert_print>
    3570:	480b      	ldr	r0, [pc, #44]	; (35a0 <z_arm_irq_priority_set+0x54>)
    3572:	215b      	movs	r1, #91	; 0x5b
    3574:	f006 ffa0 	bl	a4b8 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3578:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    357a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    357c:	bfac      	ite	ge
    357e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3582:	4a0b      	ldrlt	r2, [pc, #44]	; (35b0 <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3584:	ea4f 1343 	mov.w	r3, r3, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3588:	bfb8      	it	lt
    358a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    358e:	b2db      	uxtb	r3, r3
    3590:	bfaa      	itet	ge
    3592:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3596:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3598:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
    359c:	bd38      	pop	{r3, r4, r5, pc}
    359e:	bf00      	nop
    35a0:	0000bc4a 	.word	0x0000bc4a
    35a4:	0000bc80 	.word	0x0000bc80
    35a8:	0000b53f 	.word	0x0000b53f
    35ac:	0000bc9b 	.word	0x0000bc9b
    35b0:	e000ed14 	.word	0xe000ed14

000035b4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    35b4:	bf30      	wfi
    b z_SysNmiOnReset
    35b6:	f7ff bffd 	b.w	35b4 <z_SysNmiOnReset>
    35ba:	bf00      	nop

000035bc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    35bc:	4a0b      	ldr	r2, [pc, #44]	; (35ec <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    35be:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    35c0:	4b0b      	ldr	r3, [pc, #44]	; (35f0 <z_arm_prep_c+0x34>)
    35c2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    35c6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    35c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    35cc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    35d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    35d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    35d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    35dc:	f003 ff84 	bl	74e8 <z_bss_zero>
	z_data_copy();
    35e0:	f005 fe82 	bl	92e8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    35e4:	f000 fc0c 	bl	3e00 <z_arm_interrupt_init>
	z_cstart();
    35e8:	f003 ffc2 	bl	7570 <z_cstart>
    35ec:	00000000 	.word	0x00000000
    35f0:	e000ed00 	.word	0xe000ed00

000035f4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    35f4:	4a09      	ldr	r2, [pc, #36]	; (361c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    35f6:	490a      	ldr	r1, [pc, #40]	; (3620 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    35f8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    35fa:	6809      	ldr	r1, [r1, #0]
    35fc:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    35fe:	4909      	ldr	r1, [pc, #36]	; (3624 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3600:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3602:	684b      	ldr	r3, [r1, #4]
    3604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3608:	604b      	str	r3, [r1, #4]
    360a:	2300      	movs	r3, #0
    360c:	f383 8811 	msr	BASEPRI, r3
    3610:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3614:	6893      	ldr	r3, [r2, #8]
}
    3616:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    3618:	4770      	bx	lr
    361a:	bf00      	nop
    361c:	20000b58 	.word	0x20000b58
    3620:	0000b418 	.word	0x0000b418
    3624:	e000ed00 	.word	0xe000ed00

00003628 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3628:	4912      	ldr	r1, [pc, #72]	; (3674 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    362a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    362c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3630:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3632:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3636:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    363a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    363c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3640:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3644:	4f0c      	ldr	r7, [pc, #48]	; (3678 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3646:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    364a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    364c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    364e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3650:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    3652:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3654:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3656:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    365a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    365c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    365e:	f000 fc6b 	bl	3f38 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3662:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3666:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    366a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    366e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3672:	4770      	bx	lr
    ldr r1, =_kernel
    3674:	20000b58 	.word	0x20000b58
    ldr v4, =_SCS_ICSR
    3678:	e000ed04 	.word	0xe000ed04

0000367c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    367c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3680:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3682:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3686:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    368a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    368c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3690:	2902      	cmp	r1, #2
    beq _oops
    3692:	d0ff      	beq.n	3694 <_oops>

00003694 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3694:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    3696:	f006 ffb7 	bl	a608 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    369a:	bd01      	pop	{r0, pc}

0000369c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    369c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    36a0:	9b00      	ldr	r3, [sp, #0]
    36a2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    36a6:	490a      	ldr	r1, [pc, #40]	; (36d0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    36a8:	9b01      	ldr	r3, [sp, #4]
    36aa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    36ae:	9b02      	ldr	r3, [sp, #8]
    36b0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    36b4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    36b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    36bc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    36c0:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    36c4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    36c6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    36c8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    36ca:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    36cc:	4770      	bx	lr
    36ce:	bf00      	nop
    36d0:	0000a3a5 	.word	0x0000a3a5

000036d4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    36d4:	4a09      	ldr	r2, [pc, #36]	; (36fc <z_check_thread_stack_fail+0x28>)
{
    36d6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    36d8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    36da:	b170      	cbz	r0, 36fa <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    36dc:	f113 0f16 	cmn.w	r3, #22
    36e0:	6e80      	ldr	r0, [r0, #104]	; 0x68
    36e2:	d005      	beq.n	36f0 <z_check_thread_stack_fail+0x1c>
    36e4:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    36e8:	429a      	cmp	r2, r3
    36ea:	d805      	bhi.n	36f8 <z_check_thread_stack_fail+0x24>
    36ec:	4283      	cmp	r3, r0
    36ee:	d203      	bcs.n	36f8 <z_check_thread_stack_fail+0x24>
		return 0;
    36f0:	4281      	cmp	r1, r0
    36f2:	bf28      	it	cs
    36f4:	2000      	movcs	r0, #0
    36f6:	4770      	bx	lr
    36f8:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    36fa:	4770      	bx	lr
    36fc:	20000b58 	.word	0x20000b58

00003700 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3700:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3702:	4b09      	ldr	r3, [pc, #36]	; (3728 <arch_switch_to_main_thread+0x28>)
{
    3704:	460d      	mov	r5, r1
    3706:	4614      	mov	r4, r2
	_current = main_thread;
    3708:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    370a:	f000 fc15 	bl	3f38 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    370e:	4620      	mov	r0, r4
    3710:	f385 8809 	msr	PSP, r5
    3714:	2100      	movs	r1, #0
    3716:	b663      	cpsie	if
    3718:	f381 8811 	msr	BASEPRI, r1
    371c:	f3bf 8f6f 	isb	sy
    3720:	2200      	movs	r2, #0
    3722:	2300      	movs	r3, #0
    3724:	f006 fe3e 	bl	a3a4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3728:	20000b58 	.word	0x20000b58

0000372c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    372c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    372e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3730:	4a0b      	ldr	r2, [pc, #44]	; (3760 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3732:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    3734:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3736:	bf1e      	ittt	ne
	movne	r1, #0
    3738:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    373a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    373c:	f007 fa9c 	blne	ac78 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3740:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3742:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3746:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    374a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    374e:	4905      	ldr	r1, [pc, #20]	; (3764 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3750:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3752:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3754:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3756:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    375a:	4903      	ldr	r1, [pc, #12]	; (3768 <_isr_wrapper+0x3c>)
	bx r1
    375c:	4708      	bx	r1
    375e:	0000      	.short	0x0000
	ldr r2, =_kernel
    3760:	20000b58 	.word	0x20000b58
	ldr r1, =_sw_isr_table
    3764:	0000af7c 	.word	0x0000af7c
	ldr r1, =z_arm_int_exit
    3768:	0000376d 	.word	0x0000376d

0000376c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    376c:	4b04      	ldr	r3, [pc, #16]	; (3780 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    376e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3770:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    3772:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3774:	d003      	beq.n	377e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3776:	4903      	ldr	r1, [pc, #12]	; (3784 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    377c:	600a      	str	r2, [r1, #0]

0000377e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    377e:	4770      	bx	lr
	ldr r3, =_kernel
    3780:	20000b58 	.word	0x20000b58
	ldr r1, =_SCS_ICSR
    3784:	e000ed04 	.word	0xe000ed04

00003788 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3788:	b5f0      	push	{r4, r5, r6, r7, lr}
    378a:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    378c:	2400      	movs	r4, #0
    378e:	4b43      	ldr	r3, [pc, #268]	; (389c <bus_fault.constprop.0+0x114>)
    3790:	9302      	str	r3, [sp, #8]
    3792:	e9cd 4400 	strd	r4, r4, [sp]
    3796:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3798:	4607      	mov	r7, r0
    379a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    379c:	2201      	movs	r2, #1
    379e:	4940      	ldr	r1, [pc, #256]	; (38a0 <bus_fault.constprop.0+0x118>)
    37a0:	4620      	mov	r0, r4
    37a2:	f006 ff40 	bl	a626 <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    37a6:	4b3f      	ldr	r3, [pc, #252]	; (38a4 <bus_fault.constprop.0+0x11c>)
    37a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37aa:	04db      	lsls	r3, r3, #19
    37ac:	d565      	bpl.n	387a <bus_fault.constprop.0+0xf2>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    37ae:	4b3e      	ldr	r3, [pc, #248]	; (38a8 <bus_fault.constprop.0+0x120>)
    37b0:	493b      	ldr	r1, [pc, #236]	; (38a0 <bus_fault.constprop.0+0x118>)
    37b2:	9400      	str	r4, [sp, #0]
    37b4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    37b8:	4620      	mov	r0, r4
    37ba:	4623      	mov	r3, r4
    37bc:	2201      	movs	r2, #1
    37be:	f006 ff32 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    37c2:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    37c4:	4b37      	ldr	r3, [pc, #220]	; (38a4 <bus_fault.constprop.0+0x11c>)
    37c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37c8:	051d      	lsls	r5, r3, #20
    37ca:	d50a      	bpl.n	37e2 <bus_fault.constprop.0+0x5a>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    37cc:	4b37      	ldr	r3, [pc, #220]	; (38ac <bus_fault.constprop.0+0x124>)
    37ce:	9302      	str	r3, [sp, #8]
    37d0:	2300      	movs	r3, #0
    37d2:	4618      	mov	r0, r3
    37d4:	e9cd 3300 	strd	r3, r3, [sp]
    37d8:	4931      	ldr	r1, [pc, #196]	; (38a0 <bus_fault.constprop.0+0x118>)
    37da:	2201      	movs	r2, #1
    37dc:	f006 ff23 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    37e0:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    37e2:	4d30      	ldr	r5, [pc, #192]	; (38a4 <bus_fault.constprop.0+0x11c>)
    37e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    37e6:	059c      	lsls	r4, r3, #22
    37e8:	d51f      	bpl.n	382a <bus_fault.constprop.0+0xa2>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    37ea:	2400      	movs	r4, #0
    37ec:	4b30      	ldr	r3, [pc, #192]	; (38b0 <bus_fault.constprop.0+0x128>)
    37ee:	9302      	str	r3, [sp, #8]
    37f0:	2201      	movs	r2, #1
    37f2:	4623      	mov	r3, r4
    37f4:	4620      	mov	r0, r4
    37f6:	e9cd 4400 	strd	r4, r4, [sp]
    37fa:	4929      	ldr	r1, [pc, #164]	; (38a0 <bus_fault.constprop.0+0x118>)
    37fc:	f006 ff13 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3800:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3802:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3804:	0410      	lsls	r0, r2, #16
    3806:	d50f      	bpl.n	3828 <bus_fault.constprop.0+0xa0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3808:	9303      	str	r3, [sp, #12]
    380a:	4b2a      	ldr	r3, [pc, #168]	; (38b4 <bus_fault.constprop.0+0x12c>)
    380c:	4924      	ldr	r1, [pc, #144]	; (38a0 <bus_fault.constprop.0+0x118>)
    380e:	9400      	str	r4, [sp, #0]
    3810:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3814:	2201      	movs	r2, #1
    3816:	4623      	mov	r3, r4
    3818:	4620      	mov	r0, r4
    381a:	f006 ff04 	bl	a626 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    381e:	b11f      	cbz	r7, 3828 <bus_fault.constprop.0+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3820:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3822:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3826:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    3828:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    382a:	4b1e      	ldr	r3, [pc, #120]	; (38a4 <bus_fault.constprop.0+0x11c>)
    382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    382e:	0559      	lsls	r1, r3, #21
    3830:	d50a      	bpl.n	3848 <bus_fault.constprop.0+0xc0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    3832:	4b21      	ldr	r3, [pc, #132]	; (38b8 <bus_fault.constprop.0+0x130>)
    3834:	9302      	str	r3, [sp, #8]
    3836:	2300      	movs	r3, #0
    3838:	4618      	mov	r0, r3
    383a:	e9cd 3300 	strd	r3, r3, [sp]
    383e:	4918      	ldr	r1, [pc, #96]	; (38a0 <bus_fault.constprop.0+0x118>)
    3840:	2201      	movs	r2, #1
    3842:	f006 fef0 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    3846:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3848:	4a16      	ldr	r2, [pc, #88]	; (38a4 <bus_fault.constprop.0+0x11c>)
    384a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    384c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    3850:	d015      	beq.n	387e <bus_fault.constprop.0+0xf6>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    3852:	4b1a      	ldr	r3, [pc, #104]	; (38bc <bus_fault.constprop.0+0x134>)
    3854:	9302      	str	r3, [sp, #8]
    3856:	2300      	movs	r3, #0
    3858:	4618      	mov	r0, r3
    385a:	e9cd 3300 	strd	r3, r3, [sp]
    385e:	4910      	ldr	r1, [pc, #64]	; (38a0 <bus_fault.constprop.0+0x118>)
    3860:	2201      	movs	r2, #1
    3862:	f006 fee0 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    3866:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3868:	4a0e      	ldr	r2, [pc, #56]	; (38a4 <bus_fault.constprop.0+0x11c>)
    386a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    386c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3870:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3872:	2300      	movs	r3, #0
    3874:	7033      	strb	r3, [r6, #0]

	return reason;
}
    3876:	b005      	add	sp, #20
    3878:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    387a:	2016      	movs	r0, #22
    387c:	e7a2      	b.n	37c4 <bus_fault.constprop.0+0x3c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    387e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    3880:	0492      	lsls	r2, r2, #18
    3882:	d5f1      	bpl.n	3868 <bus_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3884:	4a0e      	ldr	r2, [pc, #56]	; (38c0 <bus_fault.constprop.0+0x138>)
    3886:	4906      	ldr	r1, [pc, #24]	; (38a0 <bus_fault.constprop.0+0x118>)
    3888:	9300      	str	r3, [sp, #0]
    388a:	e9cd 3201 	strd	r3, r2, [sp, #4]
    388e:	4618      	mov	r0, r3
    3890:	2201      	movs	r2, #1
    3892:	f006 fec8 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    3896:	201c      	movs	r0, #28
    3898:	e7e6      	b.n	3868 <bus_fault.constprop.0+0xe0>
    389a:	bf00      	nop
    389c:	0000bcdb 	.word	0x0000bcdb
    38a0:	0000b190 	.word	0x0000b190
    38a4:	e000ed00 	.word	0xe000ed00
    38a8:	0000bcf1 	.word	0x0000bcf1
    38ac:	0000bd02 	.word	0x0000bd02
    38b0:	0000bd15 	.word	0x0000bd15
    38b4:	0000bd2e 	.word	0x0000bd2e
    38b8:	0000bd43 	.word	0x0000bd43
    38bc:	0000bd5e 	.word	0x0000bd5e
    38c0:	0000bd76 	.word	0x0000bd76

000038c4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    38c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    38c6:	2400      	movs	r4, #0
    38c8:	4b37      	ldr	r3, [pc, #220]	; (39a8 <usage_fault.constprop.0+0xe4>)
    38ca:	9302      	str	r3, [sp, #8]
    38cc:	2201      	movs	r2, #1
    38ce:	4623      	mov	r3, r4
    38d0:	e9cd 4400 	strd	r4, r4, [sp]
    38d4:	4935      	ldr	r1, [pc, #212]	; (39ac <usage_fault.constprop.0+0xe8>)
    38d6:	4620      	mov	r0, r4
    38d8:	f006 fea5 	bl	a626 <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    38dc:	4b34      	ldr	r3, [pc, #208]	; (39b0 <usage_fault.constprop.0+0xec>)
    38de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38e0:	019a      	lsls	r2, r3, #6
    38e2:	d55e      	bpl.n	39a2 <usage_fault.constprop.0+0xde>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    38e4:	4b33      	ldr	r3, [pc, #204]	; (39b4 <usage_fault.constprop.0+0xf0>)
    38e6:	4931      	ldr	r1, [pc, #196]	; (39ac <usage_fault.constprop.0+0xe8>)
    38e8:	9400      	str	r4, [sp, #0]
    38ea:	e9cd 4301 	strd	r4, r3, [sp, #4]
    38ee:	4620      	mov	r0, r4
    38f0:	4623      	mov	r3, r4
    38f2:	2201      	movs	r2, #1
    38f4:	f006 fe97 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    38f8:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    38fa:	4b2d      	ldr	r3, [pc, #180]	; (39b0 <usage_fault.constprop.0+0xec>)
    38fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38fe:	01db      	lsls	r3, r3, #7
    3900:	d50a      	bpl.n	3918 <usage_fault.constprop.0+0x54>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    3902:	4b2d      	ldr	r3, [pc, #180]	; (39b8 <usage_fault.constprop.0+0xf4>)
    3904:	9302      	str	r3, [sp, #8]
    3906:	2300      	movs	r3, #0
    3908:	4618      	mov	r0, r3
    390a:	e9cd 3300 	strd	r3, r3, [sp]
    390e:	4927      	ldr	r1, [pc, #156]	; (39ac <usage_fault.constprop.0+0xe8>)
    3910:	2201      	movs	r2, #1
    3912:	f006 fe88 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    3916:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3918:	4b25      	ldr	r3, [pc, #148]	; (39b0 <usage_fault.constprop.0+0xec>)
    391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    391c:	031c      	lsls	r4, r3, #12
    391e:	d50a      	bpl.n	3936 <usage_fault.constprop.0+0x72>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    3920:	4b26      	ldr	r3, [pc, #152]	; (39bc <usage_fault.constprop.0+0xf8>)
    3922:	9302      	str	r3, [sp, #8]
    3924:	2300      	movs	r3, #0
    3926:	4618      	mov	r0, r3
    3928:	e9cd 3300 	strd	r3, r3, [sp]
    392c:	491f      	ldr	r1, [pc, #124]	; (39ac <usage_fault.constprop.0+0xe8>)
    392e:	2201      	movs	r2, #1
    3930:	f006 fe79 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    3934:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3936:	4b1e      	ldr	r3, [pc, #120]	; (39b0 <usage_fault.constprop.0+0xec>)
    3938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    393a:	0359      	lsls	r1, r3, #13
    393c:	d50a      	bpl.n	3954 <usage_fault.constprop.0+0x90>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    393e:	4b20      	ldr	r3, [pc, #128]	; (39c0 <usage_fault.constprop.0+0xfc>)
    3940:	9302      	str	r3, [sp, #8]
    3942:	2300      	movs	r3, #0
    3944:	4618      	mov	r0, r3
    3946:	e9cd 3300 	strd	r3, r3, [sp]
    394a:	4918      	ldr	r1, [pc, #96]	; (39ac <usage_fault.constprop.0+0xe8>)
    394c:	2201      	movs	r2, #1
    394e:	f006 fe6a 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    3952:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3954:	4b16      	ldr	r3, [pc, #88]	; (39b0 <usage_fault.constprop.0+0xec>)
    3956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3958:	039a      	lsls	r2, r3, #14
    395a:	d50a      	bpl.n	3972 <usage_fault.constprop.0+0xae>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    395c:	4b19      	ldr	r3, [pc, #100]	; (39c4 <usage_fault.constprop.0+0x100>)
    395e:	9302      	str	r3, [sp, #8]
    3960:	2300      	movs	r3, #0
    3962:	4618      	mov	r0, r3
    3964:	e9cd 3300 	strd	r3, r3, [sp]
    3968:	4910      	ldr	r1, [pc, #64]	; (39ac <usage_fault.constprop.0+0xe8>)
    396a:	2201      	movs	r2, #1
    396c:	f006 fe5b 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    3970:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3972:	4b0f      	ldr	r3, [pc, #60]	; (39b0 <usage_fault.constprop.0+0xec>)
    3974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3976:	03db      	lsls	r3, r3, #15
    3978:	d50a      	bpl.n	3990 <usage_fault.constprop.0+0xcc>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    397a:	4b13      	ldr	r3, [pc, #76]	; (39c8 <usage_fault.constprop.0+0x104>)
    397c:	9302      	str	r3, [sp, #8]
    397e:	2300      	movs	r3, #0
    3980:	4618      	mov	r0, r3
    3982:	e9cd 3300 	strd	r3, r3, [sp]
    3986:	4909      	ldr	r1, [pc, #36]	; (39ac <usage_fault.constprop.0+0xe8>)
    3988:	2201      	movs	r2, #1
    398a:	f006 fe4c 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    398e:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3990:	4a07      	ldr	r2, [pc, #28]	; (39b0 <usage_fault.constprop.0+0xec>)
    3992:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3994:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3998:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    399c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    399e:	b004      	add	sp, #16
    39a0:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    39a2:	201d      	movs	r0, #29
    39a4:	e7a9      	b.n	38fa <usage_fault.constprop.0+0x36>
    39a6:	bf00      	nop
    39a8:	0000bda5 	.word	0x0000bda5
    39ac:	0000b190 	.word	0x0000b190
    39b0:	e000ed00 	.word	0xe000ed00
    39b4:	0000bdbd 	.word	0x0000bdbd
    39b8:	0000bdd0 	.word	0x0000bdd0
    39bc:	0000bdea 	.word	0x0000bdea
    39c0:	0000be08 	.word	0x0000be08
    39c4:	0000be2d 	.word	0x0000be2d
    39c8:	0000be47 	.word	0x0000be47

000039cc <mem_manage_fault>:
{
    39cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    39d0:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    39d2:	2400      	movs	r4, #0
    39d4:	4b56      	ldr	r3, [pc, #344]	; (3b30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x98>)
    39d6:	9302      	str	r3, [sp, #8]
    39d8:	e9cd 4400 	strd	r4, r4, [sp]
    39dc:	4623      	mov	r3, r4
{
    39de:	4680      	mov	r8, r0
    39e0:	4689      	mov	r9, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    39e2:	4620      	mov	r0, r4
    39e4:	4953      	ldr	r1, [pc, #332]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
{
    39e6:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    39e8:	2201      	movs	r2, #1
    39ea:	f006 fe1c 	bl	a626 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    39ee:	4b52      	ldr	r3, [pc, #328]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    39f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    39f2:	06d8      	lsls	r0, r3, #27
    39f4:	d540      	bpl.n	3a78 <mem_manage_fault+0xac>
		PR_FAULT_INFO("  Stacking error (context area might be"
    39f6:	4b51      	ldr	r3, [pc, #324]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    39f8:	9400      	str	r4, [sp, #0]
    39fa:	e9cd 4301 	strd	r4, r3, [sp, #4]
    39fe:	4620      	mov	r0, r4
    3a00:	4623      	mov	r3, r4
    3a02:	494c      	ldr	r1, [pc, #304]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3a04:	2201      	movs	r2, #1
    3a06:	f006 fe0e 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
    3a0a:	2411      	movs	r4, #17
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3a0c:	4b4a      	ldr	r3, [pc, #296]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a10:	0719      	lsls	r1, r3, #28
    3a12:	d50a      	bpl.n	3a2a <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
    3a14:	4b4a      	ldr	r3, [pc, #296]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
    3a16:	9302      	str	r3, [sp, #8]
    3a18:	2300      	movs	r3, #0
    3a1a:	e9cd 3300 	strd	r3, r3, [sp]
    3a1e:	4945      	ldr	r1, [pc, #276]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3a20:	2201      	movs	r2, #1
    3a22:	4618      	mov	r0, r3
    3a24:	f006 fdff 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    3a28:	2412      	movs	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3a2a:	4d43      	ldr	r5, [pc, #268]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3a2c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3a2e:	079a      	lsls	r2, r3, #30
    3a30:	d524      	bpl.n	3a7c <mem_manage_fault+0xb0>
		PR_FAULT_INFO("  Data Access Violation");
    3a32:	2400      	movs	r4, #0
    3a34:	4b43      	ldr	r3, [pc, #268]	; (3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>)
    3a36:	9302      	str	r3, [sp, #8]
    3a38:	e9cd 4400 	strd	r4, r4, [sp]
    3a3c:	4623      	mov	r3, r4
    3a3e:	493d      	ldr	r1, [pc, #244]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3a40:	2201      	movs	r2, #1
    3a42:	4620      	mov	r0, r4
    3a44:	f006 fdef 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    3a48:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3a4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3a4c:	061b      	lsls	r3, r3, #24
    3a4e:	d559      	bpl.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3a50:	4b3d      	ldr	r3, [pc, #244]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3a52:	4938      	ldr	r1, [pc, #224]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3a54:	9703      	str	r7, [sp, #12]
    3a56:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3a5a:	9400      	str	r4, [sp, #0]
    3a5c:	4623      	mov	r3, r4
    3a5e:	2201      	movs	r2, #1
    3a60:	4620      	mov	r0, r4
    3a62:	f006 fde0 	bl	a626 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    3a66:	f1b9 0f00 	cmp.w	r9, #0
    3a6a:	d003      	beq.n	3a74 <mem_manage_fault+0xa8>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3a6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3a72:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    3a74:	2413      	movs	r4, #19
    3a76:	e003      	b.n	3a80 <mem_manage_fault+0xb4>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    3a78:	2410      	movs	r4, #16
    3a7a:	e7c7      	b.n	3a0c <mem_manage_fault+0x40>
	uint32_t mmfar = -EINVAL;
    3a7c:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3a80:	4b2d      	ldr	r3, [pc, #180]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a84:	07d8      	lsls	r0, r3, #31
    3a86:	d50a      	bpl.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
		PR_FAULT_INFO("  Instruction Access Violation");
    3a88:	4b30      	ldr	r3, [pc, #192]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    3a8a:	9302      	str	r3, [sp, #8]
    3a8c:	2300      	movs	r3, #0
    3a8e:	e9cd 3300 	strd	r3, r3, [sp]
    3a92:	4928      	ldr	r1, [pc, #160]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3a94:	2201      	movs	r2, #1
    3a96:	4618      	mov	r0, r3
    3a98:	f006 fdc5 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    3a9c:	2414      	movs	r4, #20
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3a9e:	4b26      	ldr	r3, [pc, #152]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3aa2:	0699      	lsls	r1, r3, #26
    3aa4:	d50a      	bpl.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
		PR_FAULT_INFO(
    3aa6:	4b2a      	ldr	r3, [pc, #168]	; (3b50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb8>)
    3aa8:	9302      	str	r3, [sp, #8]
    3aaa:	2300      	movs	r3, #0
    3aac:	e9cd 3300 	strd	r3, r3, [sp]
    3ab0:	4920      	ldr	r1, [pc, #128]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3ab2:	2201      	movs	r2, #1
    3ab4:	4618      	mov	r0, r3
    3ab6:	f006 fdb6 	bl	a626 <z_log_msg_runtime_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    3aba:	2415      	movs	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3abc:	4d1e      	ldr	r5, [pc, #120]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3abe:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3ac0:	06da      	lsls	r2, r3, #27
    3ac2:	d402      	bmi.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3ac4:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3ac6:	079b      	lsls	r3, r3, #30
    3ac8:	d50a      	bpl.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3aca:	686b      	ldr	r3, [r5, #4]
    3acc:	0518      	lsls	r0, r3, #20
    3ace:	d507      	bpl.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3ad0:	4641      	mov	r1, r8
    3ad2:	4638      	mov	r0, r7
    3ad4:	f7ff fdfe 	bl	36d4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3ad8:	b1b8      	cbz	r0, 3b0a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3ada:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3ade:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3ae0:	4b15      	ldr	r3, [pc, #84]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3ae4:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3ae6:	bf42      	ittt	mi
    3ae8:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3aea:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    3aee:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3af2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3af6:	629a      	str	r2, [r3, #40]	; 0x28
}
    3af8:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    3afa:	2300      	movs	r3, #0
    3afc:	7033      	strb	r3, [r6, #0]
}
    3afe:	b005      	add	sp, #20
    3b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t mmfar = -EINVAL;
    3b04:	f06f 0715 	mvn.w	r7, #21
    3b08:	e7b4      	b.n	3a74 <mem_manage_fault+0xa8>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    3b0a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3b0c:	06d9      	lsls	r1, r3, #27
    3b0e:	d5e7      	bpl.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
    3b10:	4910      	ldr	r1, [pc, #64]	; (3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>)
    3b12:	4a11      	ldr	r2, [pc, #68]	; (3b58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc0>)
    3b14:	4811      	ldr	r0, [pc, #68]	; (3b5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc4>)
    3b16:	f240 135b 	movw	r3, #347	; 0x15b
    3b1a:	f006 fcd4 	bl	a4c6 <assert_print>
    3b1e:	4810      	ldr	r0, [pc, #64]	; (3b60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc8>)
    3b20:	f006 fcd1 	bl	a4c6 <assert_print>
    3b24:	480c      	ldr	r0, [pc, #48]	; (3b58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc0>)
    3b26:	f240 115b 	movw	r1, #347	; 0x15b
    3b2a:	f006 fcc5 	bl	a4b8 <assert_post_action>
    3b2e:	bf00      	nop
    3b30:	0000be72 	.word	0x0000be72
    3b34:	0000b190 	.word	0x0000b190
    3b38:	e000ed00 	.word	0xe000ed00
    3b3c:	0000be88 	.word	0x0000be88
    3b40:	0000bd02 	.word	0x0000bd02
    3b44:	0000bebb 	.word	0x0000bebb
    3b48:	0000bed3 	.word	0x0000bed3
    3b4c:	0000bee9 	.word	0x0000bee9
    3b50:	0000bd76 	.word	0x0000bd76
    3b54:	0000bf42 	.word	0x0000bf42
    3b58:	0000bf08 	.word	0x0000bf08
    3b5c:	0000b53f 	.word	0x0000b53f
    3b60:	0000bf8c 	.word	0x0000bf8c

00003b64 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3b68:	4b89      	ldr	r3, [pc, #548]	; (3d90 <z_arm_fault+0x22c>)
{
    3b6a:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3b6c:	6858      	ldr	r0, [r3, #4]
{
    3b6e:	b090      	sub	sp, #64	; 0x40
    3b70:	f3c0 0608 	ubfx	r6, r0, #0, #9
    3b74:	2300      	movs	r3, #0
    3b76:	f383 8811 	msr	BASEPRI, r3
    3b7a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3b7e:	f002 457f 	and.w	r5, r2, #4278190080	; 0xff000000
    3b82:	f1b5 4f7f 	cmp.w	r5, #4278190080	; 0xff000000
    3b86:	d10c      	bne.n	3ba2 <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3b88:	f002 050c 	and.w	r5, r2, #12
    3b8c:	2d08      	cmp	r5, #8
    3b8e:	d117      	bne.n	3bc0 <z_arm_fault+0x5c>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3b90:	4a80      	ldr	r2, [pc, #512]	; (3d94 <z_arm_fault+0x230>)
    3b92:	4981      	ldr	r1, [pc, #516]	; (3d98 <z_arm_fault+0x234>)
    3b94:	9300      	str	r3, [sp, #0]
    3b96:	e9cd 3201 	strd	r3, r2, [sp, #4]
    3b9a:	4618      	mov	r0, r3
    3b9c:	2201      	movs	r2, #1
    3b9e:	f006 fd42 	bl	a626 <z_log_msg_runtime_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    3ba2:	497e      	ldr	r1, [pc, #504]	; (3d9c <z_arm_fault+0x238>)
    3ba4:	4a7e      	ldr	r2, [pc, #504]	; (3da0 <z_arm_fault+0x23c>)
    3ba6:	487f      	ldr	r0, [pc, #508]	; (3da4 <z_arm_fault+0x240>)
    3ba8:	f240 433e 	movw	r3, #1086	; 0x43e
    3bac:	f006 fc8b 	bl	a4c6 <assert_print>
    3bb0:	487d      	ldr	r0, [pc, #500]	; (3da8 <z_arm_fault+0x244>)
    3bb2:	f006 fc88 	bl	a4c6 <assert_print>
    3bb6:	f240 413e 	movw	r1, #1086	; 0x43e
			__ASSERT(0,
    3bba:	4879      	ldr	r0, [pc, #484]	; (3da0 <z_arm_fault+0x23c>)
    3bbc:	f006 fc7c 	bl	a4b8 <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3bc0:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3bc2:	bf46      	itte	mi
    3bc4:	460c      	movmi	r4, r1
	*nested_exc = false;
    3bc6:	461d      	movmi	r5, r3
			*nested_exc = true;
    3bc8:	2501      	movpl	r5, #1
	__ASSERT(esf != NULL,
    3bca:	2c00      	cmp	r4, #0
    3bcc:	d0e9      	beq.n	3ba2 <z_arm_fault+0x3e>
	*recoverable = false;
    3bce:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    3bd2:	1ef3      	subs	r3, r6, #3
	*recoverable = false;
    3bd4:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
    3bd8:	2b09      	cmp	r3, #9
    3bda:	f200 80bf 	bhi.w	3d5c <z_arm_fault+0x1f8>
    3bde:	e8df f003 	tbb	[pc, r3]
    3be2:	b305      	.short	0xb305
    3be4:	bdbd96b7 	.word	0xbdbd96b7
    3be8:	bbbdbdbd 	.word	0xbbbdbdbd
	PR_FAULT_INFO("***** HARD FAULT *****");
    3bec:	4b6f      	ldr	r3, [pc, #444]	; (3dac <z_arm_fault+0x248>)
    3bee:	496a      	ldr	r1, [pc, #424]	; (3d98 <z_arm_fault+0x234>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3bf0:	4f67      	ldr	r7, [pc, #412]	; (3d90 <z_arm_fault+0x22c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    3bf2:	f8cd 8000 	str.w	r8, [sp]
    3bf6:	e9cd 8301 	strd	r8, r3, [sp, #4]
    3bfa:	2300      	movs	r3, #0
    3bfc:	2201      	movs	r2, #1
    3bfe:	4618      	mov	r0, r3
    3c00:	f006 fd11 	bl	a626 <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
    3c04:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3c08:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    3c0a:	f016 0602 	ands.w	r6, r6, #2
    3c0e:	d005      	beq.n	3c1c <z_arm_fault+0xb8>
		PR_EXC("  Bus fault on vector table read");
    3c10:	4b67      	ldr	r3, [pc, #412]	; (3db0 <z_arm_fault+0x24c>)
	PR_FAULT_INFO(
    3c12:	f8cd 8000 	str.w	r8, [sp]
    3c16:	e9cd 8301 	strd	r8, r3, [sp, #4]
    3c1a:	e006      	b.n	3c2a <z_arm_fault+0xc6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3c1e:	2b00      	cmp	r3, #0
    3c20:	da0b      	bge.n	3c3a <z_arm_fault+0xd6>
		PR_EXC("  Debug event");
    3c22:	4b64      	ldr	r3, [pc, #400]	; (3db4 <z_arm_fault+0x250>)
    3c24:	9600      	str	r6, [sp, #0]
    3c26:	e9cd 6301 	strd	r6, r3, [sp, #4]
	PR_FAULT_INFO(
    3c2a:	2300      	movs	r3, #0
    3c2c:	495a      	ldr	r1, [pc, #360]	; (3d98 <z_arm_fault+0x234>)
    3c2e:	2201      	movs	r2, #1
    3c30:	4618      	mov	r0, r3
    3c32:	f006 fcf8 	bl	a626 <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3c36:	2200      	movs	r2, #0
    3c38:	e030      	b.n	3c9c <z_arm_fault+0x138>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3c3c:	005b      	lsls	r3, r3, #1
    3c3e:	d576      	bpl.n	3d2e <z_arm_fault+0x1ca>
		PR_EXC("  Fault escalation (see below)");
    3c40:	4b5d      	ldr	r3, [pc, #372]	; (3db8 <z_arm_fault+0x254>)
    3c42:	4955      	ldr	r1, [pc, #340]	; (3d98 <z_arm_fault+0x234>)
    3c44:	9600      	str	r6, [sp, #0]
    3c46:	e9cd 6301 	strd	r6, r3, [sp, #4]
    3c4a:	2201      	movs	r2, #1
    3c4c:	4633      	mov	r3, r6
    3c4e:	4630      	mov	r0, r6
    3c50:	f006 fce9 	bl	a626 <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3c54:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3c56:	69a2      	ldr	r2, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3c5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3c5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c62:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3c66:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    3c68:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3c70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3c72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c76:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3c7a:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3c7e:	429a      	cmp	r2, r3
    3c80:	d12c      	bne.n	3cdc <z_arm_fault+0x178>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3c82:	6823      	ldr	r3, [r4, #0]
    3c84:	9303      	str	r3, [sp, #12]
    3c86:	4b4d      	ldr	r3, [pc, #308]	; (3dbc <z_arm_fault+0x258>)
    3c88:	4943      	ldr	r1, [pc, #268]	; (3d98 <z_arm_fault+0x234>)
    3c8a:	9600      	str	r6, [sp, #0]
    3c8c:	e9cd 6301 	strd	r6, r3, [sp, #4]
    3c90:	2201      	movs	r2, #1
    3c92:	4633      	mov	r3, r6
    3c94:	4630      	mov	r0, r6
    3c96:	f006 fcc6 	bl	a626 <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
    3c9a:	6822      	ldr	r2, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3c9c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ca0:	b9cb      	cbnz	r3, 3cd6 <z_arm_fault+0x172>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3ca2:	ae08      	add	r6, sp, #32
    3ca4:	f104 0720 	add.w	r7, r4, #32
    3ca8:	6820      	ldr	r0, [r4, #0]
    3caa:	6861      	ldr	r1, [r4, #4]
    3cac:	4633      	mov	r3, r6
    3cae:	c303      	stmia	r3!, {r0, r1}
    3cb0:	3408      	adds	r4, #8
    3cb2:	42bc      	cmp	r4, r7
    3cb4:	461e      	mov	r6, r3
    3cb6:	d1f7      	bne.n	3ca8 <z_arm_fault+0x144>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3cb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3cba:	2d00      	cmp	r5, #0
    3cbc:	d062      	beq.n	3d84 <z_arm_fault+0x220>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3cbe:	f3c3 0108 	ubfx	r1, r3, #0, #9
    3cc2:	b921      	cbnz	r1, 3cce <z_arm_fault+0x16a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3cc4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3cc8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3ccc:	930f      	str	r3, [sp, #60]	; 0x3c

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    3cce:	a908      	add	r1, sp, #32
    3cd0:	4610      	mov	r0, r2
    3cd2:	f7ff fbbb 	bl	344c <z_arm_fatal_error>
}
    3cd6:	b010      	add	sp, #64	; 0x40
    3cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    3cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3cde:	b2db      	uxtb	r3, r3
    3ce0:	b13b      	cbz	r3, 3cf2 <z_arm_fault+0x18e>
			reason = mem_manage_fault(esf, 1, recoverable);
    3ce2:	f10d 021f 	add.w	r2, sp, #31
    3ce6:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3ce8:	4620      	mov	r0, r4
    3cea:	f7ff fe6f 	bl	39cc <mem_manage_fault>
    3cee:	4602      	mov	r2, r0
		break;
    3cf0:	e7d4      	b.n	3c9c <z_arm_fault+0x138>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    3cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3cf4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    3cf8:	d005      	beq.n	3d06 <z_arm_fault+0x1a2>
			reason = bus_fault(esf, 1, recoverable);
    3cfa:	f10d 011f 	add.w	r1, sp, #31
    3cfe:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3d00:	f7ff fd42 	bl	3788 <bus_fault.constprop.0>
    3d04:	e7f3      	b.n	3cee <z_arm_fault+0x18a>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    3d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3d0c:	d302      	bcc.n	3d14 <z_arm_fault+0x1b0>
		reason = usage_fault(esf);
    3d0e:	f7ff fdd9 	bl	38c4 <usage_fault.constprop.0>
    3d12:	e7ec      	b.n	3cee <z_arm_fault+0x18a>
			__ASSERT(0,
    3d14:	492a      	ldr	r1, [pc, #168]	; (3dc0 <z_arm_fault+0x25c>)
    3d16:	4a22      	ldr	r2, [pc, #136]	; (3da0 <z_arm_fault+0x23c>)
    3d18:	4822      	ldr	r0, [pc, #136]	; (3da4 <z_arm_fault+0x240>)
    3d1a:	f44f 7344 	mov.w	r3, #784	; 0x310
    3d1e:	f006 fbd2 	bl	a4c6 <assert_print>
    3d22:	4828      	ldr	r0, [pc, #160]	; (3dc4 <z_arm_fault+0x260>)
    3d24:	f006 fbcf 	bl	a4c6 <assert_print>
    3d28:	f44f 7144 	mov.w	r1, #784	; 0x310
    3d2c:	e745      	b.n	3bba <z_arm_fault+0x56>
		__ASSERT(0,
    3d2e:	4924      	ldr	r1, [pc, #144]	; (3dc0 <z_arm_fault+0x25c>)
    3d30:	4a1b      	ldr	r2, [pc, #108]	; (3da0 <z_arm_fault+0x23c>)
    3d32:	481c      	ldr	r0, [pc, #112]	; (3da4 <z_arm_fault+0x240>)
    3d34:	f44f 7345 	mov.w	r3, #788	; 0x314
    3d38:	f006 fbc5 	bl	a4c6 <assert_print>
    3d3c:	4822      	ldr	r0, [pc, #136]	; (3dc8 <z_arm_fault+0x264>)
    3d3e:	f006 fbc2 	bl	a4c6 <assert_print>
    3d42:	f44f 7145 	mov.w	r1, #788	; 0x314
    3d46:	e738      	b.n	3bba <z_arm_fault+0x56>
		reason = mem_manage_fault(esf, 0, recoverable);
    3d48:	f10d 021f 	add.w	r2, sp, #31
    3d4c:	2100      	movs	r1, #0
    3d4e:	e7cb      	b.n	3ce8 <z_arm_fault+0x184>
		reason = bus_fault(esf, 0, recoverable);
    3d50:	f10d 011f 	add.w	r1, sp, #31
    3d54:	2000      	movs	r0, #0
    3d56:	e7d3      	b.n	3d00 <z_arm_fault+0x19c>
	PR_FAULT_INFO(
    3d58:	4b1c      	ldr	r3, [pc, #112]	; (3dcc <z_arm_fault+0x268>)
    3d5a:	e75a      	b.n	3c12 <z_arm_fault+0xae>
	PR_FAULT_INFO("***** %s %d) *****",
    3d5c:	4a1c      	ldr	r2, [pc, #112]	; (3dd0 <z_arm_fault+0x26c>)
    3d5e:	4b1d      	ldr	r3, [pc, #116]	; (3dd4 <z_arm_fault+0x270>)
    3d60:	490d      	ldr	r1, [pc, #52]	; (3d98 <z_arm_fault+0x234>)
    3d62:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
    3d66:	bf18      	it	ne
    3d68:	4613      	movne	r3, r2
    3d6a:	3e10      	subs	r6, #16
    3d6c:	e9cd 3603 	strd	r3, r6, [sp, #12]
    3d70:	4b19      	ldr	r3, [pc, #100]	; (3dd8 <z_arm_fault+0x274>)
    3d72:	9302      	str	r3, [sp, #8]
    3d74:	2300      	movs	r3, #0
    3d76:	e9cd 3300 	strd	r3, r3, [sp]
    3d7a:	2201      	movs	r2, #1
    3d7c:	4618      	mov	r0, r3
    3d7e:	f006 fc52 	bl	a626 <z_log_msg_runtime_create.constprop.0>
}
    3d82:	e758      	b.n	3c36 <z_arm_fault+0xd2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3d84:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3d88:	f023 0301 	bic.w	r3, r3, #1
    3d8c:	e79e      	b.n	3ccc <z_arm_fault+0x168>
    3d8e:	bf00      	nop
    3d90:	e000ed00 	.word	0xe000ed00
    3d94:	0000bfdd 	.word	0x0000bfdd
    3d98:	0000b190 	.word	0x0000b190
    3d9c:	0000c008 	.word	0x0000c008
    3da0:	0000bf08 	.word	0x0000bf08
    3da4:	0000b53f 	.word	0x0000b53f
    3da8:	0000c01b 	.word	0x0000c01b
    3dac:	0000c059 	.word	0x0000c059
    3db0:	0000c070 	.word	0x0000c070
    3db4:	0000c091 	.word	0x0000c091
    3db8:	0000c09f 	.word	0x0000c09f
    3dbc:	0000c0be 	.word	0x0000c0be
    3dc0:	0000c9f6 	.word	0x0000c9f6
    3dc4:	0000c0da 	.word	0x0000c0da
    3dc8:	0000c0fe 	.word	0x0000c0fe
    3dcc:	0000c12e 	.word	0x0000c12e
    3dd0:	0000bfc4 	.word	0x0000bfc4
    3dd4:	0000bfaf 	.word	0x0000bfaf
    3dd8:	0000c152 	.word	0x0000c152

00003ddc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3ddc:	4a02      	ldr	r2, [pc, #8]	; (3de8 <z_arm_fault_init+0xc>)
    3dde:	6953      	ldr	r3, [r2, #20]
    3de0:	f043 0310 	orr.w	r3, r3, #16
    3de4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3de6:	4770      	bx	lr
    3de8:	e000ed00 	.word	0xe000ed00

00003dec <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3dec:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3df0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3df4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3df6:	4672      	mov	r2, lr
	bl z_arm_fault
    3df8:	f7ff feb4 	bl	3b64 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3dfc:	bd01      	pop	{r0, pc}
    3dfe:	bf00      	nop

00003e00 <z_arm_interrupt_init>:
    3e00:	4804      	ldr	r0, [pc, #16]	; (3e14 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3e02:	2300      	movs	r3, #0
    3e04:	2120      	movs	r1, #32
    3e06:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3e08:	3301      	adds	r3, #1
    3e0a:	2b30      	cmp	r3, #48	; 0x30
    3e0c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3e10:	d1f9      	bne.n	3e06 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3e12:	4770      	bx	lr
    3e14:	e000e100 	.word	0xe000e100

00003e18 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3e18:	2000      	movs	r0, #0
    msr CONTROL, r0
    3e1a:	f380 8814 	msr	CONTROL, r0
    isb
    3e1e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3e22:	f7fe fc17 	bl	2654 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3e26:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3e28:	490d      	ldr	r1, [pc, #52]	; (3e60 <__start+0x48>)
    str r0, [r1]
    3e2a:	6008      	str	r0, [r1, #0]
    dsb
    3e2c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3e30:	480c      	ldr	r0, [pc, #48]	; (3e64 <__start+0x4c>)
    msr msp, r0
    3e32:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3e36:	f000 f82b 	bl	3e90 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3e3a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3e3c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3e40:	4809      	ldr	r0, [pc, #36]	; (3e68 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3e42:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    3e46:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3e48:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3e4c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3e50:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3e52:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3e54:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3e58:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3e5c:	f7ff fbae 	bl	35bc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3e60:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3e64:	20001f80 	.word	0x20001f80
    ldr r0, =z_interrupt_stacks
    3e68:	200011c0 	.word	0x200011c0

00003e6c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3e6c:	4907      	ldr	r1, [pc, #28]	; (3e8c <z_arm_clear_arm_mpu_config+0x20>)
    3e6e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    3e72:	2300      	movs	r3, #0
	int num_regions =
    3e74:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3e78:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    3e7a:	4293      	cmp	r3, r2
    3e7c:	db00      	blt.n	3e80 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    3e7e:	4770      	bx	lr
  MPU->RNR = rnr;
    3e80:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    3e84:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3e88:	3301      	adds	r3, #1
    3e8a:	e7f6      	b.n	3e7a <z_arm_clear_arm_mpu_config+0xe>
    3e8c:	e000ed00 	.word	0xe000ed00

00003e90 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3e90:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3e92:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3e94:	2300      	movs	r3, #0
    3e96:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3e9a:	f7ff ffe7 	bl	3e6c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3e9e:	4b14      	ldr	r3, [pc, #80]	; (3ef0 <z_arm_init_arch_hw_at_boot+0x60>)
    3ea0:	f04f 32ff 	mov.w	r2, #4294967295
    3ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3eb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    3eb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3eb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3ebc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3ec0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3ec4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3ec8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3ecc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3ed0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    3ed4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3ed8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3edc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3ee0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    3ee4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3ee6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3eea:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3eee:	bd08      	pop	{r3, pc}
    3ef0:	e000e100 	.word	0xe000e100

00003ef4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3ef4:	4b08      	ldr	r3, [pc, #32]	; (3f18 <z_impl_k_thread_abort+0x24>)
    3ef6:	689b      	ldr	r3, [r3, #8]
    3ef8:	4283      	cmp	r3, r0
    3efa:	d10b      	bne.n	3f14 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3efc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3f00:	b143      	cbz	r3, 3f14 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3f02:	4b06      	ldr	r3, [pc, #24]	; (3f1c <z_impl_k_thread_abort+0x28>)
    3f04:	685a      	ldr	r2, [r3, #4]
    3f06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3f0a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3f0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3f12:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    3f14:	f005 b8b0 	b.w	9078 <z_thread_abort>
    3f18:	20000b58 	.word	0x20000b58
    3f1c:	e000ed00 	.word	0xe000ed00

00003f20 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3f20:	4b02      	ldr	r3, [pc, #8]	; (3f2c <z_arm_configure_static_mpu_regions+0xc>)
    3f22:	4a03      	ldr	r2, [pc, #12]	; (3f30 <z_arm_configure_static_mpu_regions+0x10>)
    3f24:	4803      	ldr	r0, [pc, #12]	; (3f34 <z_arm_configure_static_mpu_regions+0x14>)
    3f26:	2101      	movs	r1, #1
    3f28:	f000 b886 	b.w	4038 <arm_core_mpu_configure_static_mpu_regions>
    3f2c:	20040000 	.word	0x20040000
    3f30:	20000000 	.word	0x20000000
    3f34:	0000b2c4 	.word	0x0000b2c4

00003f38 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3f38:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3f3a:	4b05      	ldr	r3, [pc, #20]	; (3f50 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    3f3c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    3f3e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3f40:	4a04      	ldr	r2, [pc, #16]	; (3f54 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3f42:	2140      	movs	r1, #64	; 0x40
    3f44:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3f48:	4618      	mov	r0, r3
    3f4a:	2101      	movs	r1, #1
    3f4c:	f000 b89a 	b.w	4084 <arm_core_mpu_configure_dynamic_mpu_regions>
    3f50:	200009b8 	.word	0x200009b8
    3f54:	150b0000 	.word	0x150b0000

00003f58 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3f58:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3f5a:	4e28      	ldr	r6, [pc, #160]	; (3ffc <mpu_configure_regions+0xa4>)
    3f5c:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3f5e:	2500      	movs	r5, #0
    3f60:	428d      	cmp	r5, r1
    3f62:	da15      	bge.n	3f90 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    3f64:	6844      	ldr	r4, [r0, #4]
    3f66:	2c00      	cmp	r4, #0
    3f68:	d045      	beq.n	3ff6 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3f6a:	b1d3      	cbz	r3, 3fa2 <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3f6c:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3f70:	ea14 0f0c 	tst.w	r4, ip
    3f74:	d00f      	beq.n	3f96 <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3f76:	4b22      	ldr	r3, [pc, #136]	; (4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>)
    3f78:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3f7a:	9302      	str	r3, [sp, #8]
    3f7c:	2300      	movs	r3, #0
    3f7e:	2201      	movs	r2, #1
    3f80:	e9cd 3300 	strd	r3, r3, [sp]
    3f84:	491f      	ldr	r1, [pc, #124]	; (4004 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4>)
    3f86:	4618      	mov	r0, r3
    3f88:	f006 fb5d 	bl	a646 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
    3f8c:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3f90:	4610      	mov	r0, r2
    3f92:	b005      	add	sp, #20
    3f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    3f96:	2c1f      	cmp	r4, #31
    3f98:	d9ed      	bls.n	3f76 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    3f9a:	6807      	ldr	r7, [r0, #0]
		&&
    3f9c:	ea1c 0f07 	tst.w	ip, r7
    3fa0:	d1e9      	bne.n	3f76 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3fa2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3fa4:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3fa6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3faa:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    3fae:	d910      	bls.n	3fd2 <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
    3fb0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3fb4:	d80f      	bhi.n	3fd6 <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3fb6:	3c01      	subs	r4, #1
    3fb8:	fab4 f484 	clz	r4, r4
    3fbc:	f1c4 041f 	rsb	r4, r4, #31
    3fc0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3fc2:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3fc6:	ea4c 0c04 	orr.w	ip, ip, r4
    3fca:	d906      	bls.n	3fda <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3fcc:	4b0e      	ldr	r3, [pc, #56]	; (4008 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8>)
    3fce:	9203      	str	r2, [sp, #12]
    3fd0:	e7d3      	b.n	3f7a <mpu_configure_regions+0x22>
		return REGION_32B;
    3fd2:	2408      	movs	r4, #8
    3fd4:	e7f5      	b.n	3fc2 <mpu_configure_regions+0x6a>
		return REGION_4G;
    3fd6:	243e      	movs	r4, #62	; 0x3e
    3fd8:	e7f3      	b.n	3fc2 <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3fda:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    3fde:	4314      	orrs	r4, r2
    3fe0:	f044 0410 	orr.w	r4, r4, #16
    3fe4:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3fe8:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3fec:	f04c 0401 	orr.w	r4, ip, #1
    3ff0:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    3ff4:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    3ff6:	3501      	adds	r5, #1
    3ff8:	300c      	adds	r0, #12
    3ffa:	e7b1      	b.n	3f60 <mpu_configure_regions+0x8>
    3ffc:	e000ed00 	.word	0xe000ed00
    4000:	0000c169 	.word	0x0000c169
    4004:	0000b188 	.word	0x0000b188
    4008:	0000c18c 	.word	0x0000c18c

0000400c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    400c:	4b04      	ldr	r3, [pc, #16]	; (4020 <arm_core_mpu_enable+0x14>)
    400e:	2205      	movs	r2, #5
    4010:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    4014:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4018:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    401c:	4770      	bx	lr
    401e:	bf00      	nop
    4020:	e000ed00 	.word	0xe000ed00

00004024 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4024:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4028:	4b02      	ldr	r3, [pc, #8]	; (4034 <arm_core_mpu_disable+0x10>)
    402a:	2200      	movs	r2, #0
    402c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4030:	4770      	bx	lr
    4032:	bf00      	nop
    4034:	e000ed00 	.word	0xe000ed00

00004038 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4038:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    403a:	4d0d      	ldr	r5, [pc, #52]	; (4070 <arm_core_mpu_configure_static_mpu_regions+0x38>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    403c:	2301      	movs	r3, #1
    403e:	782a      	ldrb	r2, [r5, #0]
    4040:	460c      	mov	r4, r1
    4042:	f7ff ff89 	bl	3f58 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4046:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    4048:	3016      	adds	r0, #22
    404a:	d10f      	bne.n	406c <arm_core_mpu_configure_static_mpu_regions+0x34>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    404c:	4a09      	ldr	r2, [pc, #36]	; (4074 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    404e:	490a      	ldr	r1, [pc, #40]	; (4078 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    4050:	480a      	ldr	r0, [pc, #40]	; (407c <arm_core_mpu_configure_static_mpu_regions+0x44>)
    4052:	f44f 738d 	mov.w	r3, #282	; 0x11a
    4056:	f006 fa36 	bl	a4c6 <assert_print>
    405a:	4809      	ldr	r0, [pc, #36]	; (4080 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    405c:	4621      	mov	r1, r4
    405e:	f006 fa32 	bl	a4c6 <assert_print>
    4062:	4804      	ldr	r0, [pc, #16]	; (4074 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    4064:	f44f 718d 	mov.w	r1, #282	; 0x11a
    4068:	f006 fa26 	bl	a4b8 <assert_post_action>
			regions_num);
	}
}
    406c:	bd38      	pop	{r3, r4, r5, pc}
    406e:	bf00      	nop
    4070:	20000d92 	.word	0x20000d92
    4074:	0000c1b2 	.word	0x0000c1b2
    4078:	0000c9f6 	.word	0x0000c9f6
    407c:	0000b53f 	.word	0x0000b53f
    4080:	0000c1e9 	.word	0x0000c1e9

00004084 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    4084:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4086:	4a12      	ldr	r2, [pc, #72]	; (40d0 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    4088:	2300      	movs	r3, #0
    408a:	7812      	ldrb	r2, [r2, #0]
    408c:	460c      	mov	r4, r1
    408e:	f7ff ff63 	bl	3f58 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4092:	f110 0f16 	cmn.w	r0, #22
    4096:	d004      	beq.n	40a2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
  MPU->RNR = rnr;
    4098:	4b0e      	ldr	r3, [pc, #56]	; (40d4 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    409a:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    409c:	2807      	cmp	r0, #7
    409e:	dd10      	ble.n	40c2 <arm_core_mpu_configure_dynamic_mpu_regions+0x3e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    40a0:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    40a2:	4a0d      	ldr	r2, [pc, #52]	; (40d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    40a4:	490d      	ldr	r1, [pc, #52]	; (40dc <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    40a6:	480e      	ldr	r0, [pc, #56]	; (40e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    40a8:	f240 1339 	movw	r3, #313	; 0x139
    40ac:	f006 fa0b 	bl	a4c6 <assert_print>
    40b0:	480c      	ldr	r0, [pc, #48]	; (40e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    40b2:	4621      	mov	r1, r4
    40b4:	f006 fa07 	bl	a4c6 <assert_print>
    40b8:	4807      	ldr	r0, [pc, #28]	; (40d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    40ba:	f240 1139 	movw	r1, #313	; 0x139
    40be:	f006 f9fb 	bl	a4b8 <assert_post_action>
  MPU->RNR = rnr;
    40c2:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    40c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    40ca:	3001      	adds	r0, #1
    40cc:	e7e6      	b.n	409c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
    40ce:	bf00      	nop
    40d0:	20000d92 	.word	0x20000d92
    40d4:	e000ed00 	.word	0xe000ed00
    40d8:	0000c1b2 	.word	0x0000c1b2
    40dc:	0000c9f6 	.word	0x0000c9f6
    40e0:	0000b53f 	.word	0x0000b53f
    40e4:	0000c215 	.word	0x0000c215

000040e8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    40e8:	4925      	ldr	r1, [pc, #148]	; (4180 <z_arm_mpu_init+0x98>)
{
    40ea:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    40ec:	680c      	ldr	r4, [r1, #0]
    40ee:	2c08      	cmp	r4, #8
    40f0:	d910      	bls.n	4114 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    40f2:	4a24      	ldr	r2, [pc, #144]	; (4184 <z_arm_mpu_init+0x9c>)
    40f4:	4924      	ldr	r1, [pc, #144]	; (4188 <z_arm_mpu_init+0xa0>)
    40f6:	4825      	ldr	r0, [pc, #148]	; (418c <z_arm_mpu_init+0xa4>)
    40f8:	f240 1351 	movw	r3, #337	; 0x151
    40fc:	f006 f9e3 	bl	a4c6 <assert_print>
    4100:	4621      	mov	r1, r4
    4102:	4823      	ldr	r0, [pc, #140]	; (4190 <z_arm_mpu_init+0xa8>)
    4104:	2208      	movs	r2, #8
    4106:	f006 f9de 	bl	a4c6 <assert_print>
    410a:	f240 1151 	movw	r1, #337	; 0x151

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    410e:	481d      	ldr	r0, [pc, #116]	; (4184 <z_arm_mpu_init+0x9c>)
    4110:	f006 f9d2 	bl	a4b8 <assert_post_action>
	arm_core_mpu_disable();
    4114:	f7ff ff86 	bl	4024 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4118:	6848      	ldr	r0, [r1, #4]
    411a:	491e      	ldr	r1, [pc, #120]	; (4194 <z_arm_mpu_init+0xac>)
    411c:	2200      	movs	r2, #0
    411e:	4294      	cmp	r4, r2
    4120:	f100 000c 	add.w	r0, r0, #12
    4124:	d116      	bne.n	4154 <z_arm_mpu_init+0x6c>
	static_regions_num = mpu_config.num_regions;
    4126:	4b1c      	ldr	r3, [pc, #112]	; (4198 <z_arm_mpu_init+0xb0>)
    4128:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    412a:	f7ff ff6f 	bl	400c <arm_core_mpu_enable>
	__ASSERT(
    412e:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    4132:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4136:	2b08      	cmp	r3, #8
    4138:	d01f      	beq.n	417a <z_arm_mpu_init+0x92>
    413a:	4918      	ldr	r1, [pc, #96]	; (419c <z_arm_mpu_init+0xb4>)
    413c:	4a11      	ldr	r2, [pc, #68]	; (4184 <z_arm_mpu_init+0x9c>)
    413e:	4813      	ldr	r0, [pc, #76]	; (418c <z_arm_mpu_init+0xa4>)
    4140:	f240 13b7 	movw	r3, #439	; 0x1b7
    4144:	f006 f9bf 	bl	a4c6 <assert_print>
    4148:	4815      	ldr	r0, [pc, #84]	; (41a0 <z_arm_mpu_init+0xb8>)
    414a:	f006 f9bc 	bl	a4c6 <assert_print>
    414e:	f240 11b7 	movw	r1, #439	; 0x1b7
    4152:	e7dc      	b.n	410e <z_arm_mpu_init+0x26>
    4154:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4158:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    415c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4160:	4313      	orrs	r3, r2
    4162:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4166:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    416a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    416e:	f043 0301 	orr.w	r3, r3, #1
    4172:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4176:	3201      	adds	r2, #1
    4178:	e7d1      	b.n	411e <z_arm_mpu_init+0x36>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    417a:	2000      	movs	r0, #0
    417c:	bd10      	pop	{r4, pc}
    417e:	bf00      	nop
    4180:	0000b2d0 	.word	0x0000b2d0
    4184:	0000c1b2 	.word	0x0000c1b2
    4188:	0000c9f6 	.word	0x0000c9f6
    418c:	0000b53f 	.word	0x0000b53f
    4190:	0000c242 	.word	0x0000c242
    4194:	e000ed00 	.word	0xe000ed00
    4198:	20000d92 	.word	0x20000d92
    419c:	0000c276 	.word	0x0000c276
    41a0:	0000c2c6 	.word	0x0000c2c6

000041a4 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(void)
{
    41a4:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    41a6:	4b0b      	ldr	r3, [pc, #44]	; (41d4 <malloc_prepare+0x30>)
    41a8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    41ac:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    41b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    41b4:	d20c      	bcs.n	41d0 <malloc_prepare+0x2c>
    41b6:	4908      	ldr	r1, [pc, #32]	; (41d8 <malloc_prepare+0x34>)
    41b8:	4a08      	ldr	r2, [pc, #32]	; (41dc <malloc_prepare+0x38>)
    41ba:	4809      	ldr	r0, [pc, #36]	; (41e0 <malloc_prepare+0x3c>)
    41bc:	2380      	movs	r3, #128	; 0x80
    41be:	f006 f982 	bl	a4c6 <assert_print>
    41c2:	4808      	ldr	r0, [pc, #32]	; (41e4 <malloc_prepare+0x40>)
    41c4:	f006 f97f 	bl	a4c6 <assert_print>
    41c8:	4804      	ldr	r0, [pc, #16]	; (41dc <malloc_prepare+0x38>)
    41ca:	2180      	movs	r1, #128	; 0x80
    41cc:	f006 f974 	bl	a4b8 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    41d0:	2000      	movs	r0, #0
    41d2:	bd08      	pop	{r3, pc}
    41d4:	20002400 	.word	0x20002400
    41d8:	0000c317 	.word	0x0000c317
    41dc:	0000c2e7 	.word	0x0000c2e7
    41e0:	0000b53f 	.word	0x0000b53f
    41e4:	0000c35e 	.word	0x0000c35e

000041e8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    41e8:	4b01      	ldr	r3, [pc, #4]	; (41f0 <__stdout_hook_install+0x8>)
    41ea:	6018      	str	r0, [r3, #0]
}
    41ec:	4770      	bx	lr
    41ee:	bf00      	nop
    41f0:	200000dc 	.word	0x200000dc

000041f4 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
    41f4:	b510      	push	{r4, lr}
	__asm__ volatile(
    41f6:	f04f 0320 	mov.w	r3, #32
    41fa:	f3ef 8011 	mrs	r0, BASEPRI
    41fe:	f383 8812 	msr	BASEPRI_MAX, r3
    4202:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4206:	4a11      	ldr	r2, [pc, #68]	; (424c <nordicsemi_nrf52_init+0x58>)
    4208:	2301      	movs	r3, #1
    420a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    420e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4212:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    4216:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    421a:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    421e:	2c08      	cmp	r4, #8
    4220:	d108      	bne.n	4234 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4222:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    4226:	2905      	cmp	r1, #5
    4228:	d804      	bhi.n	4234 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    422a:	4c09      	ldr	r4, [pc, #36]	; (4250 <nordicsemi_nrf52_init+0x5c>)
    422c:	5c61      	ldrb	r1, [r4, r1]
    422e:	b109      	cbz	r1, 4234 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    4230:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    4234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4238:	2201      	movs	r2, #1
    423a:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    423e:	f380 8811 	msr	BASEPRI, r0
    4242:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4246:	2000      	movs	r0, #0
    4248:	bd10      	pop	{r4, pc}
    424a:	bf00      	nop
    424c:	4001e000 	.word	0x4001e000
    4250:	0000c3f4 	.word	0x0000c3f4

00004254 <sys_arch_reboot>:
    *p_gpregret = val;
    4254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4258:	b2c0      	uxtb	r0, r0
    425a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    425e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4262:	4905      	ldr	r1, [pc, #20]	; (4278 <sys_arch_reboot+0x24>)
    4264:	4b05      	ldr	r3, [pc, #20]	; (427c <sys_arch_reboot+0x28>)
    4266:	68ca      	ldr	r2, [r1, #12]
    4268:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    426c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    426e:	60cb      	str	r3, [r1, #12]
    4270:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4274:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4276:	e7fd      	b.n	4274 <sys_arch_reboot+0x20>
    4278:	e000ed00 	.word	0xe000ed00
    427c:	05fa0004 	.word	0x05fa0004

00004280 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4280:	b120      	cbz	r0, 428c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4282:	4b03      	ldr	r3, [pc, #12]	; (4290 <arch_busy_wait+0x10>)
    4284:	0180      	lsls	r0, r0, #6
    4286:	f043 0301 	orr.w	r3, r3, #1
    428a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    428c:	4770      	bx	lr
    428e:	bf00      	nop
    4290:	0000b1f0 	.word	0x0000b1f0

00004294 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    4294:	4b05      	ldr	r3, [pc, #20]	; (42ac <adc_context_start_sampling+0x18>)
    4296:	2201      	movs	r2, #1
    4298:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    429c:	f890 108e 	ldrb.w	r1, [r0, #142]	; 0x8e
    42a0:	b109      	cbz	r1, 42a6 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42a2:	60da      	str	r2, [r3, #12]
}
    42a4:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42a6:	601a      	str	r2, [r3, #0]
    42a8:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    42aa:	4770      	bx	lr
    42ac:	40007000 	.word	0x40007000

000042b0 <adc_nrfx_channel_setup>:
{
    42b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    42b2:	790d      	ldrb	r5, [r1, #4]
    42b4:	f005 041f 	and.w	r4, r5, #31
	if (channel_id >= SAADC_CH_NUM) {
    42b8:	2c07      	cmp	r4, #7
    42ba:	d825      	bhi.n	4308 <adc_nrfx_channel_setup+0x58>
	switch (channel_cfg->gain) {
    42bc:	780a      	ldrb	r2, [r1, #0]
    42be:	2a0b      	cmp	r2, #11
    42c0:	d818      	bhi.n	42f4 <adc_nrfx_channel_setup+0x44>
    42c2:	e8df f002 	tbb	[pc, r2]
    42c6:	0707      	.short	0x0707
    42c8:	06170707 	.word	0x06170707
    42cc:	13111717 	.word	0x13111717
    42d0:	1517      	.short	0x1517
		config.gain = NRF_SAADC_GAIN1_2;
    42d2:	2204      	movs	r2, #4
	switch (channel_cfg->reference) {
    42d4:	784b      	ldrb	r3, [r1, #1]
    42d6:	2b03      	cmp	r3, #3
    42d8:	d01a      	beq.n	4310 <adc_nrfx_channel_setup+0x60>
    42da:	2b04      	cmp	r3, #4
    42dc:	f04f 0300 	mov.w	r3, #0
    42e0:	d017      	beq.n	4312 <adc_nrfx_channel_setup+0x62>
		LOG_ERR("Selected ADC reference is not valid");
    42e2:	4a30      	ldr	r2, [pc, #192]	; (43a4 <adc_nrfx_channel_setup+0xf4>)
    42e4:	9202      	str	r2, [sp, #8]
    42e6:	e008      	b.n	42fa <adc_nrfx_channel_setup+0x4a>
		config.gain = NRF_SAADC_GAIN1;
    42e8:	2205      	movs	r2, #5
		break;
    42ea:	e7f3      	b.n	42d4 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
    42ec:	2206      	movs	r2, #6
		break;
    42ee:	e7f1      	b.n	42d4 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
    42f0:	2207      	movs	r2, #7
		break;
    42f2:	e7ef      	b.n	42d4 <adc_nrfx_channel_setup+0x24>
		LOG_ERR("Selected ADC gain is not valid");
    42f4:	4b2c      	ldr	r3, [pc, #176]	; (43a8 <adc_nrfx_channel_setup+0xf8>)
    42f6:	9302      	str	r3, [sp, #8]
    42f8:	2300      	movs	r3, #0
    42fa:	e9cd 3300 	strd	r3, r3, [sp]
    42fe:	492b      	ldr	r1, [pc, #172]	; (43ac <adc_nrfx_channel_setup+0xfc>)
    4300:	2201      	movs	r2, #1
    4302:	4618      	mov	r0, r3
    4304:	f006 f9c4 	bl	a690 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    4308:	f06f 0015 	mvn.w	r0, #21
}
    430c:	b004      	add	sp, #16
    430e:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
    4310:	2301      	movs	r3, #1
	switch (channel_cfg->acquisition_time) {
    4312:	8848      	ldrh	r0, [r1, #2]
    4314:	f244 060a 	movw	r6, #16394	; 0x400a
    4318:	42b0      	cmp	r0, r6
    431a:	d03d      	beq.n	4398 <adc_nrfx_channel_setup+0xe8>
    431c:	d80a      	bhi.n	4334 <adc_nrfx_channel_setup+0x84>
    431e:	f244 0603 	movw	r6, #16387	; 0x4003
    4322:	42b0      	cmp	r0, r6
    4324:	d014      	beq.n	4350 <adc_nrfx_channel_setup+0xa0>
    4326:	f244 0605 	movw	r6, #16389	; 0x4005
    432a:	42b0      	cmp	r0, r6
    432c:	d032      	beq.n	4394 <adc_nrfx_channel_setup+0xe4>
    432e:	b398      	cbz	r0, 4398 <adc_nrfx_channel_setup+0xe8>
		LOG_ERR("Selected ADC acquisition time is not valid");
    4330:	4b1f      	ldr	r3, [pc, #124]	; (43b0 <adc_nrfx_channel_setup+0x100>)
    4332:	e7e0      	b.n	42f6 <adc_nrfx_channel_setup+0x46>
	switch (channel_cfg->acquisition_time) {
    4334:	f244 0614 	movw	r6, #16404	; 0x4014
    4338:	42b0      	cmp	r0, r6
    433a:	d02f      	beq.n	439c <adc_nrfx_channel_setup+0xec>
    433c:	f244 0628 	movw	r6, #16424	; 0x4028
    4340:	42b0      	cmp	r0, r6
    4342:	d02d      	beq.n	43a0 <adc_nrfx_channel_setup+0xf0>
    4344:	f244 060f 	movw	r6, #16399	; 0x400f
    4348:	42b0      	cmp	r0, r6
    434a:	d1f1      	bne.n	4330 <adc_nrfx_channel_setup+0x80>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    434c:	2003      	movs	r0, #3
    434e:	e000      	b.n	4352 <adc_nrfx_channel_setup+0xa2>
	nrf_saadc_channel_config_t config = {
    4350:	2000      	movs	r0, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    4352:	f3c5 1540 	ubfx	r5, r5, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    4356:	0212      	lsls	r2, r2, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    4358:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
    435c:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
    p_reg->CH[channel].CONFIG =
    4360:	0123      	lsls	r3, r4, #4
    4362:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4366:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    436a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    p_reg->CH[channel].CONFIG =
    436e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    4372:	0123      	lsls	r3, r4, #4
    4374:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4378:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    437c:	798a      	ldrb	r2, [r1, #6]
    437e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    4382:	2000      	movs	r0, #0
    4384:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    4388:	4b0a      	ldr	r3, [pc, #40]	; (43b4 <adc_nrfx_channel_setup+0x104>)
    438a:	794a      	ldrb	r2, [r1, #5]
    438c:	4423      	add	r3, r4
    438e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return 0;
    4392:	e7bb      	b.n	430c <adc_nrfx_channel_setup+0x5c>
	switch (channel_cfg->acquisition_time) {
    4394:	2001      	movs	r0, #1
    4396:	e7dc      	b.n	4352 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    4398:	2002      	movs	r0, #2
    439a:	e7da      	b.n	4352 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    439c:	2004      	movs	r0, #4
    439e:	e7d8      	b.n	4352 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    43a0:	2005      	movs	r0, #5
    43a2:	e7d6      	b.n	4352 <adc_nrfx_channel_setup+0xa2>
    43a4:	0000c41d 	.word	0x0000c41d
    43a8:	0000c3fe 	.word	0x0000c3fe
    43ac:	0000b150 	.word	0x0000b150
    43b0:	0000c441 	.word	0x0000c441
    43b4:	20000000 	.word	0x20000000

000043b8 <start_read.constprop.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
    43b8:	b5f0      	push	{r4, r5, r6, r7, lr}
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
    43ba:	6846      	ldr	r6, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    43bc:	1e73      	subs	r3, r6, #1
    43be:	2bfe      	cmp	r3, #254	; 0xfe
static int start_read(const struct device *dev,
    43c0:	b087      	sub	sp, #28
    43c2:	4604      	mov	r4, r0
    43c4:	f04f 0300 	mov.w	r3, #0
	if (!selected_channels ||
    43c8:	d909      	bls.n	43de <start_read.constprop.0+0x26>
	    (selected_channels & ~BIT_MASK(SAADC_CH_NUM))) {
		LOG_ERR("Invalid selection of channels");
    43ca:	4a6b      	ldr	r2, [pc, #428]	; (4578 <start_read.constprop.0+0x1c0>)
    43cc:	9202      	str	r2, [sp, #8]
		LOG_ERR(
    43ce:	e9cd 3300 	strd	r3, r3, [sp]
    43d2:	496a      	ldr	r1, [pc, #424]	; (457c <start_read.constprop.0+0x1c4>)
    43d4:	2201      	movs	r2, #1
    43d6:	4618      	mov	r0, r3
    43d8:	f006 f95a 	bl	a690 <z_log_msg_runtime_create.constprop.0>
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
	if (error) {
    43dc:	e014      	b.n	4408 <start_read.constprop.0+0x50>
    p_reg->CH[channel].PSELP = pselp;
    43de:	4d68      	ldr	r5, [pc, #416]	; (4580 <start_read.constprop.0+0x1c8>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    43e0:	4f68      	ldr	r7, [pc, #416]	; (4584 <start_read.constprop.0+0x1cc>)
    43e2:	461a      	mov	r2, r3
	active_channels = 0U;
    43e4:	4618      	mov	r0, r3
		if (selected_channels & BIT(channel_id)) {
    43e6:	fa26 f302 	lsr.w	r3, r6, r2
    43ea:	f013 0301 	ands.w	r3, r3, #1
    43ee:	d035      	beq.n	445c <start_read.constprop.0+0xa4>
			if (m_data.positive_inputs[channel_id] == 0U) {
    43f0:	5cbb      	ldrb	r3, [r7, r2]
    43f2:	b96b      	cbnz	r3, 4410 <start_read.constprop.0+0x58>
				LOG_ERR("Channel %u not configured",
    43f4:	9203      	str	r2, [sp, #12]
    43f6:	4a64      	ldr	r2, [pc, #400]	; (4588 <start_read.constprop.0+0x1d0>)
    43f8:	9202      	str	r2, [sp, #8]
    43fa:	e9cd 3300 	strd	r3, r3, [sp]
    43fe:	495f      	ldr	r1, [pc, #380]	; (457c <start_read.constprop.0+0x1c4>)
    4400:	2201      	movs	r2, #1
    4402:	4618      	mov	r0, r3
    4404:	f006 f944 	bl	a690 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    4408:	f06f 0015 	mvn.w	r0, #21

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    440c:	b007      	add	sp, #28
    440e:	bdf0      	pop	{r4, r5, r6, r7, pc}

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    4410:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    4414:	f894 c011 	ldrb.w	ip, [r4, #17]
    4418:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
    441c:	f1bc 0c00 	subs.w	ip, ip, #0
    4420:	bf18      	it	ne
    4422:	f04f 0c01 	movne.w	ip, #1
    4426:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
    442a:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
    442e:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    4432:	f102 0151 	add.w	r1, r2, #81	; 0x51
    4436:	0109      	lsls	r1, r1, #4
			++active_channels;
    4438:	3001      	adds	r0, #1
    443a:	506b      	str	r3, [r5, r1]
    443c:	b2c0      	uxtb	r0, r0
	} while (++channel_id < SAADC_CH_NUM);
    443e:	3201      	adds	r2, #1
    4440:	2a08      	cmp	r2, #8
    4442:	d1d0      	bne.n	43e6 <start_read.constprop.0+0x2e>
	error = set_resolution(sequence);
    4444:	7c22      	ldrb	r2, [r4, #16]
	switch (sequence->resolution) {
    4446:	f1a2 0108 	sub.w	r1, r2, #8
    444a:	2300      	movs	r3, #0
    444c:	2906      	cmp	r1, #6
    444e:	d818      	bhi.n	4482 <start_read.constprop.0+0xca>
    4450:	e8df f001 	tbb	[pc, r1]
    4454:	1720171e 	.word	0x1720171e
    4458:	1709      	.short	0x1709
    445a:	15          	.byte	0x15
    445b:	00          	.byte	0x00
    445c:	f102 0151 	add.w	r1, r2, #81	; 0x51
    4460:	0109      	lsls	r1, r1, #4
    4462:	506b      	str	r3, [r5, r1]
}
    4464:	e7eb      	b.n	443e <start_read.constprop.0+0x86>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    4466:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
    4468:	4a45      	ldr	r2, [pc, #276]	; (4580 <start_read.constprop.0+0x1c8>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    446a:	2801      	cmp	r0, #1
    446c:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    4470:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    4472:	d911      	bls.n	4498 <start_read.constprop.0+0xe0>
    4474:	b193      	cbz	r3, 449c <start_read.constprop.0+0xe4>
		LOG_ERR(
    4476:	4b45      	ldr	r3, [pc, #276]	; (458c <start_read.constprop.0+0x1d4>)
    4478:	9302      	str	r3, [sp, #8]
    447a:	2300      	movs	r3, #0
    447c:	e7a7      	b.n	43ce <start_read.constprop.0+0x16>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    447e:	2303      	movs	r3, #3
		break;
    4480:	e7f2      	b.n	4468 <start_read.constprop.0+0xb0>
	switch (sequence->resolution) {
    4482:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
    4484:	4a42      	ldr	r2, [pc, #264]	; (4590 <start_read.constprop.0+0x1d8>)
    4486:	9300      	str	r3, [sp, #0]
    4488:	e9cd 3201 	strd	r3, r2, [sp, #4]
    448c:	2300      	movs	r3, #0
    448e:	e7b6      	b.n	43fe <start_read.constprop.0+0x46>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    4490:	2300      	movs	r3, #0
    4492:	e7e9      	b.n	4468 <start_read.constprop.0+0xb0>
	switch (sequence->resolution) {
    4494:	2301      	movs	r3, #1
    4496:	e7e7      	b.n	4468 <start_read.constprop.0+0xb0>
	switch (sequence->oversampling) {
    4498:	2b08      	cmp	r3, #8
    449a:	d816      	bhi.n	44ca <start_read.constprop.0+0x112>
    p_reg->OVERSAMPLE = oversample;
    449c:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
    44a0:	6822      	ldr	r2, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    44a2:	0043      	lsls	r3, r0, #1
	if (sequence->options) {
    44a4:	b9b2      	cbnz	r2, 44d4 <start_read.constprop.0+0x11c>
	if (sequence->buffer_size < needed_buffer_size) {
    44a6:	68e2      	ldr	r2, [r4, #12]
    44a8:	429a      	cmp	r2, r3
    44aa:	d217      	bcs.n	44dc <start_read.constprop.0+0x124>
		LOG_ERR("Provided buffer is too small (%u/%u)",
    44ac:	e9cd 2303 	strd	r2, r3, [sp, #12]
    44b0:	4b38      	ldr	r3, [pc, #224]	; (4594 <start_read.constprop.0+0x1dc>)
    44b2:	9302      	str	r3, [sp, #8]
    44b4:	2300      	movs	r3, #0
    44b6:	4618      	mov	r0, r3
    44b8:	e9cd 3300 	strd	r3, r3, [sp]
    44bc:	492f      	ldr	r1, [pc, #188]	; (457c <start_read.constprop.0+0x1c4>)
    44be:	2201      	movs	r2, #1
    44c0:	f006 f8e6 	bl	a690 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
    44c4:	f06f 000b 	mvn.w	r0, #11
    44c8:	e7a0      	b.n	440c <start_read.constprop.0+0x54>
	switch (sequence->oversampling) {
    44ca:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
    44cc:	4b32      	ldr	r3, [pc, #200]	; (4598 <start_read.constprop.0+0x1e0>)
    44ce:	9302      	str	r3, [sp, #8]
    44d0:	2300      	movs	r3, #0
    44d2:	e792      	b.n	43fa <start_read.constprop.0+0x42>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    44d4:	8992      	ldrh	r2, [r2, #12]
    44d6:	fb02 3303 	mla	r3, r2, r3, r3
    44da:	e7e4      	b.n	44a6 <start_read.constprop.0+0xee>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    44dc:	4b28      	ldr	r3, [pc, #160]	; (4580 <start_read.constprop.0+0x1c8>)
    44de:	68a2      	ldr	r2, [r4, #8]
    44e0:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    44e4:	4626      	mov	r6, r4
    p_reg->RESULT.MAXCNT = size;
    44e6:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
    44ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    44ec:	4f2b      	ldr	r7, [pc, #172]	; (459c <start_read.constprop.0+0x1e4>)
    44ee:	f107 057c 	add.w	r5, r7, #124	; 0x7c
    44f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    44f4:	6833      	ldr	r3, [r6, #0]
    44f6:	602b      	str	r3, [r5, #0]
	ctx->status = 0;
    44f8:	2500      	movs	r5, #0
    44fa:	673d      	str	r5, [r7, #112]	; 0x70

	if (sequence->options) {
    44fc:	6823      	ldr	r3, [r4, #0]
    44fe:	463e      	mov	r6, r7
    4500:	b3a3      	cbz	r3, 456c <start_read.constprop.0+0x1b4>
		ctx->options = *sequence->options;
    4502:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4504:	f107 0490 	add.w	r4, r7, #144	; 0x90
    4508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    450c:	67fc      	str	r4, [r7, #124]	; 0x7c
		ctx->sampling_index = 0U;
    450e:	f8a7 50a0 	strh.w	r5, [r7, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    4512:	b358      	cbz	r0, 456c <start_read.constprop.0+0x1b4>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4514:	f3bf 8f5b 	dmb	ish
    4518:	e856 3f00 	ldrex	r3, [r6]
    451c:	e846 5200 	strex	r2, r5, [r6]
    4520:	2a00      	cmp	r2, #0
    4522:	d1f9      	bne.n	4518 <start_read.constprop.0+0x160>
    4524:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    4528:	491d      	ldr	r1, [pc, #116]	; (45a0 <start_read.constprop.0+0x1e8>)
    452a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
    452e:	4a1d      	ldr	r2, [pc, #116]	; (45a4 <start_read.constprop.0+0x1ec>)
    4530:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    4534:	460e      	mov	r6, r1
    4536:	4629      	mov	r1, r5
    4538:	fbe4 6100 	umlal	r6, r1, r4, r0
    453c:	2300      	movs	r3, #0
    453e:	4630      	mov	r0, r6
    4540:	f7fc fc82 	bl	e48 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    4544:	2200      	movs	r2, #0
    4546:	e9cd 0100 	strd	r0, r1, [sp]
    454a:	2300      	movs	r3, #0
    454c:	f107 0008 	add.w	r0, r7, #8
    4550:	f005 fa30 	bl	99b4 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
    4554:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
    4558:	b963      	cbnz	r3, 4574 <start_read.constprop.0+0x1bc>
	return z_impl_k_sem_take(sem, timeout);
    455a:	4813      	ldr	r0, [pc, #76]	; (45a8 <start_read.constprop.0+0x1f0>)
    455c:	f04f 32ff 	mov.w	r2, #4294967295
    4560:	f04f 33ff 	mov.w	r3, #4294967295
    4564:	f003 fc84 	bl	7e70 <z_impl_k_sem_take>
	return ctx->status;
    4568:	6f38      	ldr	r0, [r7, #112]	; 0x70
    456a:	e74f      	b.n	440c <start_read.constprop.0+0x54>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    456c:	480b      	ldr	r0, [pc, #44]	; (459c <start_read.constprop.0+0x1e4>)
    456e:	f7ff fe91 	bl	4294 <adc_context_start_sampling>
    4572:	e7ef      	b.n	4554 <start_read.constprop.0+0x19c>
		return 0;
    4574:	2000      	movs	r0, #0
	return error;
    4576:	e749      	b.n	440c <start_read.constprop.0+0x54>
    4578:	0000c46c 	.word	0x0000c46c
    457c:	0000b150 	.word	0x0000b150
    4580:	40007000 	.word	0x40007000
    4584:	200000a8 	.word	0x200000a8
    4588:	0000c48a 	.word	0x0000c48a
    458c:	0000c4c9 	.word	0x0000c4c9
    4590:	0000c4a4 	.word	0x0000c4a4
    4594:	0000c51e 	.word	0x0000c51e
    4598:	0000c4fb 	.word	0x0000c4fb
    459c:	20000000 	.word	0x20000000
    45a0:	000f423f 	.word	0x000f423f
    45a4:	000f4240 	.word	0x000f4240
    45a8:	20000058 	.word	0x20000058

000045ac <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    45ac:	b570      	push	{r4, r5, r6, lr}
    45ae:	460c      	mov	r4, r1
    45b0:	4616      	mov	r6, r2
	ctx->asynchronous = asynchronous;
    45b2:	4d0c      	ldr	r5, [pc, #48]	; (45e4 <adc_nrfx_read_async+0x38>)
    45b4:	480c      	ldr	r0, [pc, #48]	; (45e8 <adc_nrfx_read_async+0x3c>)
    45b6:	f04f 32ff 	mov.w	r2, #4294967295
    45ba:	f04f 33ff 	mov.w	r3, #4294967295
    45be:	f003 fc57 	bl	7e70 <z_impl_k_sem_take>
    45c2:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    45c4:	4620      	mov	r0, r4
    45c6:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    45ca:	676e      	str	r6, [r5, #116]	; 0x74
    45cc:	f7ff fef4 	bl	43b8 <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
    45d0:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    45d4:	4604      	mov	r4, r0
    45d6:	b103      	cbz	r3, 45da <adc_nrfx_read_async+0x2e>
    45d8:	b110      	cbz	r0, 45e0 <adc_nrfx_read_async+0x34>
	z_impl_k_sem_give(sem);
    45da:	4803      	ldr	r0, [pc, #12]	; (45e8 <adc_nrfx_read_async+0x3c>)
    45dc:	f003 fc04 	bl	7de8 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    45e0:	4620      	mov	r0, r4
    45e2:	bd70      	pop	{r4, r5, r6, pc}
    45e4:	20000000 	.word	0x20000000
    45e8:	20000040 	.word	0x20000040

000045ec <adc_nrfx_read>:
{
    45ec:	b538      	push	{r3, r4, r5, lr}
    45ee:	460c      	mov	r4, r1
	ctx->asynchronous = asynchronous;
    45f0:	4d0c      	ldr	r5, [pc, #48]	; (4624 <adc_nrfx_read+0x38>)
	return z_impl_k_sem_take(sem, timeout);
    45f2:	480d      	ldr	r0, [pc, #52]	; (4628 <adc_nrfx_read+0x3c>)
    45f4:	f04f 32ff 	mov.w	r2, #4294967295
    45f8:	f04f 33ff 	mov.w	r3, #4294967295
    45fc:	f003 fc38 	bl	7e70 <z_impl_k_sem_take>
    4600:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
    4602:	4620      	mov	r0, r4
    4604:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    4608:	676b      	str	r3, [r5, #116]	; 0x74
    460a:	f7ff fed5 	bl	43b8 <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
    460e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    4612:	4604      	mov	r4, r0
    4614:	b103      	cbz	r3, 4618 <adc_nrfx_read+0x2c>
    4616:	b110      	cbz	r0, 461e <adc_nrfx_read+0x32>
	z_impl_k_sem_give(sem);
    4618:	4803      	ldr	r0, [pc, #12]	; (4628 <adc_nrfx_read+0x3c>)
    461a:	f003 fbe5 	bl	7de8 <z_impl_k_sem_give>
}
    461e:	4620      	mov	r0, r4
    4620:	bd38      	pop	{r3, r4, r5, pc}
    4622:	bf00      	nop
    4624:	20000000 	.word	0x20000000
    4628:	20000040 	.word	0x20000040

0000462c <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    462c:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    462e:	4b0e      	ldr	r3, [pc, #56]	; (4668 <init_saadc+0x3c>)
    4630:	2400      	movs	r4, #0
    4632:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4636:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    463a:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    463e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    4642:	2212      	movs	r2, #18
    4644:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    4648:	2007      	movs	r0, #7
    464a:	f7fe ff4f 	bl	34ec <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    464e:	4622      	mov	r2, r4
    4650:	2101      	movs	r1, #1
    4652:	2007      	movs	r0, #7
    4654:	f7fe ff7a 	bl	354c <z_arm_irq_priority_set>
	return sem->count;
    4658:	4804      	ldr	r0, [pc, #16]	; (466c <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
    465a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    465c:	b913      	cbnz	r3, 4664 <init_saadc+0x38>
    465e:	3040      	adds	r0, #64	; 0x40
    4660:	f003 fbc2 	bl	7de8 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    4664:	2000      	movs	r0, #0
    4666:	bd10      	pop	{r4, pc}
    4668:	40007000 	.word	0x40007000
    466c:	20000000 	.word	0x20000000

00004670 <saadc_irq_handler>:
{
    4670:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4672:	4b34      	ldr	r3, [pc, #208]	; (4744 <saadc_irq_handler+0xd4>)
    4674:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    4678:	2a00      	cmp	r2, #0
    467a:	d056      	beq.n	472a <saadc_irq_handler+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    467c:	2200      	movs	r2, #0
    467e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4682:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    4686:	4c30      	ldr	r4, [pc, #192]	; (4748 <saadc_irq_handler+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4688:	2101      	movs	r1, #1
    468a:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    468c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    4690:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    4692:	4625      	mov	r5, r4
    4694:	b3d3      	cbz	r3, 470c <saadc_irq_handler+0x9c>
		adc_sequence_callback callback = ctx->options.callback;
    4696:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
    469a:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
		if (callback) {
    469e:	b133      	cbz	r3, 46ae <saadc_irq_handler+0x3e>
			action = callback(dev,
    46a0:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    46a4:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    46a6:	2801      	cmp	r0, #1
    46a8:	d014      	beq.n	46d4 <saadc_irq_handler+0x64>
    46aa:	2802      	cmp	r0, #2
    46ac:	d028      	beq.n	4700 <saadc_irq_handler+0x90>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    46ae:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    46b2:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    46b6:	429a      	cmp	r2, r3
    46b8:	d922      	bls.n	4700 <saadc_irq_handler+0x90>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    46ba:	3301      	adds	r3, #1
    46bc:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    46c0:	4b20      	ldr	r3, [pc, #128]	; (4744 <saadc_irq_handler+0xd4>)
    46c2:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    46c6:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    46ca:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    46cc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    46d0:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    46d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    46d8:	b923      	cbnz	r3, 46e4 <saadc_irq_handler+0x74>
}
    46da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
    46de:	481a      	ldr	r0, [pc, #104]	; (4748 <saadc_irq_handler+0xd8>)
    46e0:	f7ff bdd8 	b.w	4294 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    46e4:	f3bf 8f5b 	dmb	ish
    46e8:	e855 3f00 	ldrex	r3, [r5]
    46ec:	1e5a      	subs	r2, r3, #1
    46ee:	e845 2100 	strex	r1, r2, [r5]
    46f2:	2900      	cmp	r1, #0
    46f4:	d1f8      	bne.n	46e8 <saadc_irq_handler+0x78>
    46f6:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    46fa:	2b01      	cmp	r3, #1
    46fc:	dced      	bgt.n	46da <saadc_irq_handler+0x6a>
    46fe:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    4700:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    4704:	b113      	cbz	r3, 470c <saadc_irq_handler+0x9c>
	z_impl_k_timer_stop(timer);
    4706:	4811      	ldr	r0, [pc, #68]	; (474c <saadc_irq_handler+0xdc>)
    4708:	f006 faf0 	bl	acec <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
    470c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    4710:	b14b      	cbz	r3, 4726 <saadc_irq_handler+0xb6>
		if (ctx->signal) {
    4712:	6f60      	ldr	r0, [r4, #116]	; 0x74
    4714:	b110      	cbz	r0, 471c <saadc_irq_handler+0xac>
	return z_impl_k_poll_signal_raise(sig, result);
    4716:	2100      	movs	r1, #0
    4718:	f005 f97c 	bl	9a14 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    471c:	480c      	ldr	r0, [pc, #48]	; (4750 <saadc_irq_handler+0xe0>)
    471e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4722:	f003 bb61 	b.w	7de8 <z_impl_k_sem_give>
    4726:	480b      	ldr	r0, [pc, #44]	; (4754 <saadc_irq_handler+0xe4>)
    4728:	e7f9      	b.n	471e <saadc_irq_handler+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    472a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    472e:	2900      	cmp	r1, #0
    4730:	d0e5      	beq.n	46fe <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4732:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    4736:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    473a:	2201      	movs	r2, #1
    473c:	609a      	str	r2, [r3, #8]
    473e:	601a      	str	r2, [r3, #0]
    4740:	605a      	str	r2, [r3, #4]
}
    4742:	e7dc      	b.n	46fe <saadc_irq_handler+0x8e>
    4744:	40007000 	.word	0x40007000
    4748:	20000000 	.word	0x20000000
    474c:	20000008 	.word	0x20000008
    4750:	20000040 	.word	0x20000040
    4754:	20000058 	.word	0x20000058

00004758 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4758:	b537      	push	{r0, r1, r2, r4, r5, lr}
    475a:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    475c:	490a      	ldr	r1, [pc, #40]	; (4788 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    475e:	4a0b      	ldr	r2, [pc, #44]	; (478c <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    4760:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4762:	2340      	movs	r3, #64	; 0x40
    4764:	9300      	str	r3, [sp, #0]
    4766:	1149      	asrs	r1, r1, #5
{
    4768:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    476a:	4623      	mov	r3, r4
    476c:	4808      	ldr	r0, [pc, #32]	; (4790 <onoff_start+0x38>)
    476e:	f005 ffc9 	bl	a704 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4772:	1e01      	subs	r1, r0, #0
    4774:	da05      	bge.n	4782 <onoff_start+0x2a>
		notify(mgr, err);
    4776:	4628      	mov	r0, r5
    4778:	4623      	mov	r3, r4
	}
}
    477a:	b003      	add	sp, #12
    477c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    4780:	4718      	bx	r3
}
    4782:	b003      	add	sp, #12
    4784:	bd30      	pop	{r4, r5, pc}
    4786:	bf00      	nop
    4788:	200009d8 	.word	0x200009d8
    478c:	0000a76f 	.word	0x0000a76f
    4790:	0000aeec 	.word	0x0000aeec

00004794 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4794:	b2c9      	uxtb	r1, r1
    4796:	2901      	cmp	r1, #1
{
    4798:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    479a:	d909      	bls.n	47b0 <get_status+0x1c>
    479c:	4908      	ldr	r1, [pc, #32]	; (47c0 <get_status+0x2c>)
    479e:	4809      	ldr	r0, [pc, #36]	; (47c4 <get_status+0x30>)
    47a0:	4a09      	ldr	r2, [pc, #36]	; (47c8 <get_status+0x34>)
    47a2:	237a      	movs	r3, #122	; 0x7a
    47a4:	f005 fe8f 	bl	a4c6 <assert_print>
    47a8:	4807      	ldr	r0, [pc, #28]	; (47c8 <get_status+0x34>)
    47aa:	217a      	movs	r1, #122	; 0x7a
    47ac:	f005 fe84 	bl	a4b8 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    47b0:	6903      	ldr	r3, [r0, #16]
    47b2:	220c      	movs	r2, #12
    47b4:	fb01 3302 	mla	r3, r1, r2, r3
    47b8:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    47ba:	f000 0007 	and.w	r0, r0, #7
    47be:	bd08      	pop	{r3, pc}
    47c0:	0000c59c 	.word	0x0000c59c
    47c4:	0000b53f 	.word	0x0000b53f
    47c8:	0000c55f 	.word	0x0000c55f

000047cc <stop>:
{
    47cc:	b570      	push	{r4, r5, r6, lr}
    47ce:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    47d0:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
    47d2:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    47d4:	d90b      	bls.n	47ee <stop+0x22>
    47d6:	4919      	ldr	r1, [pc, #100]	; (483c <stop+0x70>)
    47d8:	4819      	ldr	r0, [pc, #100]	; (4840 <stop+0x74>)
    47da:	4a1a      	ldr	r2, [pc, #104]	; (4844 <stop+0x78>)
    47dc:	f240 135d 	movw	r3, #349	; 0x15d
    47e0:	f005 fe71 	bl	a4c6 <assert_print>
    47e4:	4817      	ldr	r0, [pc, #92]	; (4844 <stop+0x78>)
    47e6:	f240 115d 	movw	r1, #349	; 0x15d
    47ea:	f005 fe65 	bl	a4b8 <assert_post_action>
	__asm__ volatile(
    47ee:	f04f 0420 	mov.w	r4, #32
    47f2:	f3ef 8511 	mrs	r5, BASEPRI
    47f6:	f384 8812 	msr	BASEPRI_MAX, r4
    47fa:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    47fe:	260c      	movs	r6, #12
    4800:	fb06 3401 	mla	r4, r6, r1, r3
    4804:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4806:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    480a:	d008      	beq.n	481e <stop+0x52>
    480c:	42a2      	cmp	r2, r4
    480e:	d006      	beq.n	481e <stop+0x52>
	__asm__ volatile(
    4810:	f385 8811 	msr	BASEPRI, r5
    4814:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    4818:	f04f 30ff 	mov.w	r0, #4294967295
}
    481c:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    481e:	4371      	muls	r1, r6
    4820:	440b      	add	r3, r1
    4822:	2201      	movs	r2, #1
    4824:	649a      	str	r2, [r3, #72]	; 0x48
    4826:	f385 8811 	msr	BASEPRI, r5
    482a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    482e:	6843      	ldr	r3, [r0, #4]
    4830:	440b      	add	r3, r1
    4832:	685b      	ldr	r3, [r3, #4]
    4834:	4798      	blx	r3
	return 0;
    4836:	2000      	movs	r0, #0
    4838:	e7f0      	b.n	481c <stop+0x50>
    483a:	bf00      	nop
    483c:	0000c59c 	.word	0x0000c59c
    4840:	0000b53f 	.word	0x0000b53f
    4844:	0000c55f 	.word	0x0000c55f

00004848 <onoff_stop>:
{
    4848:	b570      	push	{r4, r5, r6, lr}
    484a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    484c:	4906      	ldr	r1, [pc, #24]	; (4868 <onoff_stop+0x20>)
    484e:	1a41      	subs	r1, r0, r1
{
    4850:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4852:	1149      	asrs	r1, r1, #5
    4854:	4805      	ldr	r0, [pc, #20]	; (486c <onoff_stop+0x24>)
    4856:	2240      	movs	r2, #64	; 0x40
    4858:	f7ff ffb8 	bl	47cc <stop>
	notify(mgr, res);
    485c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    485e:	4601      	mov	r1, r0
	notify(mgr, res);
    4860:	4620      	mov	r0, r4
}
    4862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4866:	4718      	bx	r3
    4868:	200009d8 	.word	0x200009d8
    486c:	0000aeec 	.word	0x0000aeec

00004870 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4870:	2200      	movs	r2, #0
{
    4872:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4874:	2101      	movs	r1, #1
{
    4876:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4878:	4610      	mov	r0, r2
    487a:	f7fe fe67 	bl	354c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    487e:	480f      	ldr	r0, [pc, #60]	; (48bc <clk_init+0x4c>)
    4880:	f001 fab4 	bl	5dec <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4884:	4b0e      	ldr	r3, [pc, #56]	; (48c0 <clk_init+0x50>)
    4886:	4298      	cmp	r0, r3
    4888:	d115      	bne.n	48b6 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    488a:	f001 fad3 	bl	5e34 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    488e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4890:	490c      	ldr	r1, [pc, #48]	; (48c4 <clk_init+0x54>)
    4892:	4630      	mov	r0, r6
    4894:	f005 fdd2 	bl	a43c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4898:	2800      	cmp	r0, #0
    489a:	db0b      	blt.n	48b4 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    489c:	2501      	movs	r5, #1
    489e:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
    48a0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    48a2:	4908      	ldr	r1, [pc, #32]	; (48c4 <clk_init+0x54>)
    48a4:	f104 0020 	add.w	r0, r4, #32
    48a8:	f005 fdc8 	bl	a43c <onoff_manager_init>
		if (err < 0) {
    48ac:	2800      	cmp	r0, #0
    48ae:	db01      	blt.n	48b4 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    48b0:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    48b2:	2000      	movs	r0, #0
}
    48b4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    48b6:	f06f 0004 	mvn.w	r0, #4
    48ba:	e7fb      	b.n	48b4 <clk_init+0x44>
    48bc:	000048fd 	.word	0x000048fd
    48c0:	0bad0000 	.word	0x0bad0000
    48c4:	0000b300 	.word	0x0000b300

000048c8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    48c8:	b570      	push	{r4, r5, r6, lr}
    48ca:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    48cc:	230c      	movs	r3, #12
    48ce:	4809      	ldr	r0, [pc, #36]	; (48f4 <clkstarted_handle.constprop.0+0x2c>)
    48d0:	434b      	muls	r3, r1
    48d2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    48d4:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    48d8:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    48da:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    48dc:	4418      	add	r0, r3
	sub_data->cb = NULL;
    48de:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    48e0:	f005 fefd 	bl	a6de <set_on_state>
	if (callback) {
    48e4:	b12d      	cbz	r5, 48f2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    48e6:	4632      	mov	r2, r6
    48e8:	462b      	mov	r3, r5
    48ea:	4803      	ldr	r0, [pc, #12]	; (48f8 <clkstarted_handle.constprop.0+0x30>)
}
    48ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    48f0:	4718      	bx	r3
}
    48f2:	bd70      	pop	{r4, r5, r6, pc}
    48f4:	200009d8 	.word	0x200009d8
    48f8:	0000aeec 	.word	0x0000aeec

000048fc <clock_event_handler>:
	switch (event) {
    48fc:	2801      	cmp	r0, #1
{
    48fe:	b508      	push	{r3, lr}
	switch (event) {
    4900:	d006      	beq.n	4910 <clock_event_handler+0x14>
    4902:	2803      	cmp	r0, #3
    4904:	d008      	beq.n	4918 <clock_event_handler+0x1c>
    4906:	b998      	cbnz	r0, 4930 <clock_event_handler+0x34>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4908:	4b0f      	ldr	r3, [pc, #60]	; (4948 <clock_event_handler+0x4c>)
    490a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    490c:	075b      	lsls	r3, r3, #29
    490e:	d119      	bne.n	4944 <clock_event_handler+0x48>
}
    4910:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4914:	f7ff bfd8 	b.w	48c8 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    4918:	490c      	ldr	r1, [pc, #48]	; (494c <clock_event_handler+0x50>)
    491a:	4a0d      	ldr	r2, [pc, #52]	; (4950 <clock_event_handler+0x54>)
    491c:	480d      	ldr	r0, [pc, #52]	; (4954 <clock_event_handler+0x58>)
    491e:	f240 236e 	movw	r3, #622	; 0x26e
    4922:	f005 fdd0 	bl	a4c6 <assert_print>
    4926:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
    492a:	4809      	ldr	r0, [pc, #36]	; (4950 <clock_event_handler+0x54>)
    492c:	f005 fdc4 	bl	a4b8 <assert_post_action>
    4930:	4906      	ldr	r1, [pc, #24]	; (494c <clock_event_handler+0x50>)
    4932:	4a07      	ldr	r2, [pc, #28]	; (4950 <clock_event_handler+0x54>)
    4934:	4807      	ldr	r0, [pc, #28]	; (4954 <clock_event_handler+0x58>)
    4936:	f240 2372 	movw	r3, #626	; 0x272
    493a:	f005 fdc4 	bl	a4c6 <assert_print>
    493e:	f240 2172 	movw	r1, #626	; 0x272
    4942:	e7f2      	b.n	492a <clock_event_handler+0x2e>
}
    4944:	bd08      	pop	{r3, pc}
    4946:	bf00      	nop
    4948:	200009d8 	.word	0x200009d8
    494c:	0000c9f6 	.word	0x0000c9f6
    4950:	0000c55f 	.word	0x0000c55f
    4954:	0000b53f 	.word	0x0000b53f

00004958 <generic_hfclk_start>:
{
    4958:	b508      	push	{r3, lr}
	__asm__ volatile(
    495a:	f04f 0320 	mov.w	r3, #32
    495e:	f3ef 8111 	mrs	r1, BASEPRI
    4962:	f383 8812 	msr	BASEPRI_MAX, r3
    4966:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    496a:	4a12      	ldr	r2, [pc, #72]	; (49b4 <generic_hfclk_start+0x5c>)
    496c:	6813      	ldr	r3, [r2, #0]
    496e:	f043 0002 	orr.w	r0, r3, #2
    4972:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4974:	07da      	lsls	r2, r3, #31
    4976:	d408      	bmi.n	498a <generic_hfclk_start+0x32>
	__asm__ volatile(
    4978:	f381 8811 	msr	BASEPRI, r1
    497c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4980:	2001      	movs	r0, #1
}
    4982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4986:	f001 ba79 	b.w	5e7c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    498a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    498e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4992:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4996:	07d3      	lsls	r3, r2, #31
    4998:	d5ee      	bpl.n	4978 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    499a:	4807      	ldr	r0, [pc, #28]	; (49b8 <generic_hfclk_start+0x60>)
    499c:	f005 fe9f 	bl	a6de <set_on_state>
    49a0:	f381 8811 	msr	BASEPRI, r1
    49a4:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    49a8:	2000      	movs	r0, #0
}
    49aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    49ae:	f7ff bf8b 	b.w	48c8 <clkstarted_handle.constprop.0>
    49b2:	bf00      	nop
    49b4:	20000a30 	.word	0x20000a30
    49b8:	20000a20 	.word	0x20000a20

000049bc <api_blocking_start>:
{
    49bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    49be:	2200      	movs	r2, #0
    49c0:	2301      	movs	r3, #1
    49c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    49c6:	ab04      	add	r3, sp, #16
    49c8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    49cc:	4a09      	ldr	r2, [pc, #36]	; (49f4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    49ce:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    49d2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    49d4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    49d8:	f005 fec2 	bl	a760 <api_start>
	if (err < 0) {
    49dc:	2800      	cmp	r0, #0
    49de:	db05      	blt.n	49ec <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    49e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    49e4:	2300      	movs	r3, #0
    49e6:	4668      	mov	r0, sp
    49e8:	f003 fa42 	bl	7e70 <z_impl_k_sem_take>
}
    49ec:	b007      	add	sp, #28
    49ee:	f85d fb04 	ldr.w	pc, [sp], #4
    49f2:	bf00      	nop
    49f4:	0000a787 	.word	0x0000a787

000049f8 <generic_hfclk_stop>:
{
    49f8:	b510      	push	{r4, lr}
	__asm__ volatile(
    49fa:	f04f 0320 	mov.w	r3, #32
    49fe:	f3ef 8411 	mrs	r4, BASEPRI
    4a02:	f383 8812 	msr	BASEPRI_MAX, r3
    4a06:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    4a0a:	4a07      	ldr	r2, [pc, #28]	; (4a28 <generic_hfclk_stop+0x30>)
    4a0c:	6813      	ldr	r3, [r2, #0]
    4a0e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    4a12:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    4a14:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    4a16:	d402      	bmi.n	4a1e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4a18:	2001      	movs	r0, #1
    4a1a:	f001 fa8d 	bl	5f38 <nrfx_clock_stop>
	__asm__ volatile(
    4a1e:	f384 8811 	msr	BASEPRI, r4
    4a22:	f3bf 8f6f 	isb	sy
}
    4a26:	bd10      	pop	{r4, pc}
    4a28:	20000a30 	.word	0x20000a30

00004a2c <z_nrf_clock_control_lf_on>:
{
    4a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4a30:	4945      	ldr	r1, [pc, #276]	; (4b48 <z_nrf_clock_control_lf_on+0x11c>)
    4a32:	f3bf 8f5b 	dmb	ish
    4a36:	4606      	mov	r6, r0
    4a38:	2201      	movs	r2, #1
    4a3a:	e851 3f00 	ldrex	r3, [r1]
    4a3e:	e841 2000 	strex	r0, r2, [r1]
    4a42:	2800      	cmp	r0, #0
    4a44:	d1f9      	bne.n	4a3a <z_nrf_clock_control_lf_on+0xe>
    4a46:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4a4a:	b9a3      	cbnz	r3, 4a76 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4a4c:	493f      	ldr	r1, [pc, #252]	; (4b4c <z_nrf_clock_control_lf_on+0x120>)
		err = onoff_request(mgr, &cli);
    4a4e:	4840      	ldr	r0, [pc, #256]	; (4b50 <z_nrf_clock_control_lf_on+0x124>)
    4a50:	604b      	str	r3, [r1, #4]
    4a52:	60cb      	str	r3, [r1, #12]
    4a54:	608a      	str	r2, [r1, #8]
    4a56:	f7fd f915 	bl	1c84 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    4a5a:	2800      	cmp	r0, #0
    4a5c:	da0b      	bge.n	4a76 <z_nrf_clock_control_lf_on+0x4a>
    4a5e:	493d      	ldr	r1, [pc, #244]	; (4b54 <z_nrf_clock_control_lf_on+0x128>)
    4a60:	4a3d      	ldr	r2, [pc, #244]	; (4b58 <z_nrf_clock_control_lf_on+0x12c>)
    4a62:	483e      	ldr	r0, [pc, #248]	; (4b5c <z_nrf_clock_control_lf_on+0x130>)
    4a64:	f44f 730c 	mov.w	r3, #560	; 0x230
    4a68:	f005 fd2d 	bl	a4c6 <assert_print>
    4a6c:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
    4a70:	4839      	ldr	r0, [pc, #228]	; (4b58 <z_nrf_clock_control_lf_on+0x12c>)
    4a72:	f005 fd21 	bl	a4b8 <assert_post_action>
	switch (start_mode) {
    4a76:	b376      	cbz	r6, 4ad6 <z_nrf_clock_control_lf_on+0xaa>
    4a78:	1e73      	subs	r3, r6, #1
    4a7a:	2b01      	cmp	r3, #1
    4a7c:	d859      	bhi.n	4b32 <z_nrf_clock_control_lf_on+0x106>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4a7e:	2e01      	cmp	r6, #1
    4a80:	d107      	bne.n	4a92 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4a82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a86:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4a8a:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4a8e:	2b01      	cmp	r3, #1
    4a90:	d021      	beq.n	4ad6 <z_nrf_clock_control_lf_on+0xaa>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4a92:	f006 f8e4 	bl	ac5e <k_is_in_isr>
    4a96:	4605      	mov	r5, r0
    4a98:	b9f8      	cbnz	r0, 4ada <z_nrf_clock_control_lf_on+0xae>
	return !z_sys_post_kernel;
    4a9a:	4b31      	ldr	r3, [pc, #196]	; (4b60 <z_nrf_clock_control_lf_on+0x134>)
    4a9c:	781b      	ldrb	r3, [r3, #0]
    4a9e:	b1e3      	cbz	r3, 4ada <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENCLR = mask;
    4aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4aa4:	2202      	movs	r2, #2
    4aa6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4aaa:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4aac:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 4b64 <z_nrf_clock_control_lf_on+0x138>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4ab0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4ab4:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4ab8:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    4abc:	03d2      	lsls	r2, r2, #15
    4abe:	d516      	bpl.n	4aee <z_nrf_clock_control_lf_on+0xc2>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4ac0:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4ac4:	2b01      	cmp	r3, #1
    4ac6:	d001      	beq.n	4acc <z_nrf_clock_control_lf_on+0xa0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4ac8:	2e01      	cmp	r6, #1
    4aca:	d110      	bne.n	4aee <z_nrf_clock_control_lf_on+0xc2>
	if (isr_mode) {
    4acc:	b35d      	cbz	r5, 4b26 <z_nrf_clock_control_lf_on+0xfa>
    4ace:	f387 8811 	msr	BASEPRI, r7
    4ad2:	f3bf 8f6f 	isb	sy
}
    4ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    4ada:	f04f 0320 	mov.w	r3, #32
    4ade:	f3ef 8711 	mrs	r7, BASEPRI
    4ae2:	f383 8812 	msr	BASEPRI_MAX, r3
    4ae6:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4aea:	2501      	movs	r5, #1
    4aec:	e7de      	b.n	4aac <z_nrf_clock_control_lf_on+0x80>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4aee:	b1ad      	cbz	r5, 4b1c <z_nrf_clock_control_lf_on+0xf0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4af0:	4638      	mov	r0, r7
    4af2:	f7fe fc9f 	bl	3434 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4af6:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4afa:	2b00      	cmp	r3, #0
    4afc:	d1da      	bne.n	4ab4 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4afe:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4b02:	2a00      	cmp	r2, #0
    4b04:	d0d6      	beq.n	4ab4 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b06:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4b0a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4b0e:	2301      	movs	r3, #1
    4b10:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    4b14:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b18:	60a3      	str	r3, [r4, #8]
}
    4b1a:	e7cb      	b.n	4ab4 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
    4b1c:	2100      	movs	r1, #0
    4b1e:	2021      	movs	r0, #33	; 0x21
    4b20:	f004 fa70 	bl	9004 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4b24:	e7e7      	b.n	4af6 <z_nrf_clock_control_lf_on+0xca>
    p_reg->INTENSET = mask;
    4b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b2a:	2202      	movs	r2, #2
    4b2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4b30:	e7d1      	b.n	4ad6 <z_nrf_clock_control_lf_on+0xaa>
		__ASSERT_NO_MSG(false);
    4b32:	490d      	ldr	r1, [pc, #52]	; (4b68 <z_nrf_clock_control_lf_on+0x13c>)
    4b34:	4a08      	ldr	r2, [pc, #32]	; (4b58 <z_nrf_clock_control_lf_on+0x12c>)
    4b36:	4809      	ldr	r0, [pc, #36]	; (4b5c <z_nrf_clock_control_lf_on+0x130>)
    4b38:	f240 2342 	movw	r3, #578	; 0x242
    4b3c:	f005 fcc3 	bl	a4c6 <assert_print>
    4b40:	f240 2142 	movw	r1, #578	; 0x242
    4b44:	e794      	b.n	4a70 <z_nrf_clock_control_lf_on+0x44>
    4b46:	bf00      	nop
    4b48:	200009d4 	.word	0x200009d4
    4b4c:	200009c4 	.word	0x200009c4
    4b50:	200009f8 	.word	0x200009f8
    4b54:	0000ba9f 	.word	0x0000ba9f
    4b58:	0000c55f 	.word	0x0000c55f
    4b5c:	0000b53f 	.word	0x0000b53f
    4b60:	200011a5 	.word	0x200011a5
    4b64:	e000e100 	.word	0xe000e100
    4b68:	0000c9f6 	.word	0x0000c9f6

00004b6c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    4b6c:	b508      	push	{r3, lr}
    4b6e:	4807      	ldr	r0, [pc, #28]	; (4b8c <uart_console_init+0x20>)
    4b70:	f006 f831 	bl	abd6 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    4b74:	b138      	cbz	r0, 4b86 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    4b76:	4806      	ldr	r0, [pc, #24]	; (4b90 <uart_console_init+0x24>)
    4b78:	f7ff fb36 	bl	41e8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4b7c:	4804      	ldr	r0, [pc, #16]	; (4b90 <uart_console_init+0x24>)
    4b7e:	f7fc fe75 	bl	186c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    4b82:	2000      	movs	r0, #0
}
    4b84:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4b86:	f06f 0012 	mvn.w	r0, #18
    4b8a:	e7fb      	b.n	4b84 <uart_console_init+0x18>
    4b8c:	0000af34 	.word	0x0000af34
    4b90:	00004b95 	.word	0x00004b95

00004b94 <console_out>:
	if ('\n' == c) {
    4b94:	280a      	cmp	r0, #10
{
    4b96:	b538      	push	{r3, r4, r5, lr}
    4b98:	4d07      	ldr	r5, [pc, #28]	; (4bb8 <console_out+0x24>)
    4b9a:	4604      	mov	r4, r0
	if ('\n' == c) {
    4b9c:	d104      	bne.n	4ba8 <console_out+0x14>
    4b9e:	68ab      	ldr	r3, [r5, #8]
    4ba0:	210d      	movs	r1, #13
    4ba2:	685b      	ldr	r3, [r3, #4]
    4ba4:	4628      	mov	r0, r5
    4ba6:	4798      	blx	r3
    4ba8:	68ab      	ldr	r3, [r5, #8]
    4baa:	4803      	ldr	r0, [pc, #12]	; (4bb8 <console_out+0x24>)
    4bac:	685b      	ldr	r3, [r3, #4]
    4bae:	b2e1      	uxtb	r1, r4
    4bb0:	4798      	blx	r3
}
    4bb2:	4620      	mov	r0, r4
    4bb4:	bd38      	pop	{r3, r4, r5, pc}
    4bb6:	bf00      	nop
    4bb8:	0000af34 	.word	0x0000af34

00004bbc <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    4bbc:	b510      	push	{r4, lr}
	return port->data;
    4bbe:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    4bc0:	b961      	cbnz	r1, 4bdc <gpio_nrfx_manage_callback+0x20>
    4bc2:	4920      	ldr	r1, [pc, #128]	; (4c44 <gpio_nrfx_manage_callback+0x88>)
    4bc4:	4a20      	ldr	r2, [pc, #128]	; (4c48 <gpio_nrfx_manage_callback+0x8c>)
    4bc6:	4821      	ldr	r0, [pc, #132]	; (4c4c <gpio_nrfx_manage_callback+0x90>)
    4bc8:	232a      	movs	r3, #42	; 0x2a
    4bca:	f005 fc7c 	bl	a4c6 <assert_print>
    4bce:	4820      	ldr	r0, [pc, #128]	; (4c50 <gpio_nrfx_manage_callback+0x94>)
    4bd0:	f005 fc79 	bl	a4c6 <assert_print>
    4bd4:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
    4bd6:	481c      	ldr	r0, [pc, #112]	; (4c48 <gpio_nrfx_manage_callback+0x8c>)
    4bd8:	f005 fc6e 	bl	a4b8 <assert_post_action>
    4bdc:	6848      	ldr	r0, [r1, #4]
    4bde:	b950      	cbnz	r0, 4bf6 <gpio_nrfx_manage_callback+0x3a>
    4be0:	491c      	ldr	r1, [pc, #112]	; (4c54 <gpio_nrfx_manage_callback+0x98>)
    4be2:	4a19      	ldr	r2, [pc, #100]	; (4c48 <gpio_nrfx_manage_callback+0x8c>)
    4be4:	4819      	ldr	r0, [pc, #100]	; (4c4c <gpio_nrfx_manage_callback+0x90>)
    4be6:	232b      	movs	r3, #43	; 0x2b
    4be8:	f005 fc6d 	bl	a4c6 <assert_print>
    4bec:	481a      	ldr	r0, [pc, #104]	; (4c58 <gpio_nrfx_manage_callback+0x9c>)
    4bee:	f005 fc6a 	bl	a4c6 <assert_print>
    4bf2:	212b      	movs	r1, #43	; 0x2b
    4bf4:	e7ef      	b.n	4bd6 <gpio_nrfx_manage_callback+0x1a>
	return list->head;
    4bf6:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
    4bf8:	b1f8      	cbz	r0, 4c3a <gpio_nrfx_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4bfa:	4288      	cmp	r0, r1
    4bfc:	d119      	bne.n	4c32 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
    4bfe:	689c      	ldr	r4, [r3, #8]
	return node->next;
    4c00:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    4c02:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4c04:	42a1      	cmp	r1, r4
    4c06:	d100      	bne.n	4c0a <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
    4c08:	6098      	str	r0, [r3, #8]
	parent->next = child;
    4c0a:	2000      	movs	r0, #0
    4c0c:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
    4c0e:	b12a      	cbz	r2, 4c1c <gpio_nrfx_manage_callback+0x60>
	return list->head;
    4c10:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    4c12:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    4c14:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    4c16:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    4c18:	b902      	cbnz	r2, 4c1c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    4c1a:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4c1c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4c1e:	e010      	b.n	4c42 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4c20:	4281      	cmp	r1, r0
    4c22:	d106      	bne.n	4c32 <gpio_nrfx_manage_callback+0x76>
	return node->next;
    4c24:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    4c26:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    4c28:	6898      	ldr	r0, [r3, #8]
    4c2a:	4281      	cmp	r1, r0
    4c2c:	d1ed      	bne.n	4c0a <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
    4c2e:	609c      	str	r4, [r3, #8]
}
    4c30:	e7eb      	b.n	4c0a <gpio_nrfx_manage_callback+0x4e>
	return node->next;
    4c32:	4604      	mov	r4, r0
    4c34:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4c36:	2800      	cmp	r0, #0
    4c38:	d1f2      	bne.n	4c20 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    4c3a:	2a00      	cmp	r2, #0
    4c3c:	d1e8      	bne.n	4c10 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
    4c3e:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
    4c42:	bd10      	pop	{r4, pc}
    4c44:	0000c625 	.word	0x0000c625
    4c48:	0000c5e9 	.word	0x0000c5e9
    4c4c:	0000b53f 	.word	0x0000b53f
    4c50:	0000c62e 	.word	0x0000c62e
    4c54:	0000c63d 	.word	0x0000c63d
    4c58:	0000c64f 	.word	0x0000c64f

00004c5c <gpio_nrfx_pin_interrupt_configure>:
{
    4c5c:	b530      	push	{r4, r5, lr}
	return port->config;
    4c5e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4c60:	7b05      	ldrb	r5, [r0, #12]
    4c62:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    4c66:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    4c6a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4c6c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4c70:	d105      	bne.n	4c7e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    4c72:	4620      	mov	r0, r4
    4c74:	f001 fc72 	bl	655c <nrfx_gpiote_trigger_disable>
		return 0;
    4c78:	2000      	movs	r0, #0
}
    4c7a:	b005      	add	sp, #20
    4c7c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c7e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    4c80:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c84:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4c88:	d114      	bne.n	4cb4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4c8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c8e:	bf0c      	ite	eq
    4c90:	2304      	moveq	r3, #4
    4c92:	2305      	movne	r3, #5
    4c94:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4c98:	2300      	movs	r3, #0
    4c9a:	4619      	mov	r1, r3
    4c9c:	aa02      	add	r2, sp, #8
    4c9e:	4620      	mov	r0, r4
    4ca0:	f001 fa66 	bl	6170 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4ca4:	4b2b      	ldr	r3, [pc, #172]	; (4d54 <gpio_nrfx_pin_interrupt_configure+0xf8>)
    4ca6:	4298      	cmp	r0, r3
    4ca8:	d151      	bne.n	4d4e <gpio_nrfx_pin_interrupt_configure+0xf2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4caa:	2101      	movs	r1, #1
    4cac:	4620      	mov	r0, r4
    4cae:	f001 fbe9 	bl	6484 <nrfx_gpiote_trigger_enable>
	return 0;
    4cb2:	e7e1      	b.n	4c78 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4cb4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4cb8:	d024      	beq.n	4d04 <gpio_nrfx_pin_interrupt_configure+0xa8>
    4cba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4cbe:	bf14      	ite	ne
    4cc0:	2301      	movne	r3, #1
    4cc2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4cc4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4cc8:	6883      	ldr	r3, [r0, #8]
    4cca:	40cb      	lsrs	r3, r1
    4ccc:	07d8      	lsls	r0, r3, #31
    4cce:	d4e3      	bmi.n	4c98 <gpio_nrfx_pin_interrupt_configure+0x3c>
    4cd0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    4cd4:	d1e0      	bne.n	4c98 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    4cd6:	0962      	lsrs	r2, r4, #5
    4cd8:	f004 031f 	and.w	r3, r4, #31
    4cdc:	d014      	beq.n	4d08 <gpio_nrfx_pin_interrupt_configure+0xac>
    4cde:	2a01      	cmp	r2, #1
    4ce0:	d104      	bne.n	4cec <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
    4ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4ce6:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4ce8:	07d1      	lsls	r1, r2, #31
    4cea:	d415      	bmi.n	4d18 <gpio_nrfx_pin_interrupt_configure+0xbc>
    4cec:	491a      	ldr	r1, [pc, #104]	; (4d58 <gpio_nrfx_pin_interrupt_configure+0xfc>)
    4cee:	481b      	ldr	r0, [pc, #108]	; (4d5c <gpio_nrfx_pin_interrupt_configure+0x100>)
    4cf0:	4a1b      	ldr	r2, [pc, #108]	; (4d60 <gpio_nrfx_pin_interrupt_configure+0x104>)
    4cf2:	f240 2347 	movw	r3, #583	; 0x247
    4cf6:	f005 fbe6 	bl	a4c6 <assert_print>
    4cfa:	4819      	ldr	r0, [pc, #100]	; (4d60 <gpio_nrfx_pin_interrupt_configure+0x104>)
    4cfc:	f240 2147 	movw	r1, #583	; 0x247
    4d00:	f005 fbda 	bl	a4b8 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4d04:	2303      	movs	r3, #3
    4d06:	e7dd      	b.n	4cc4 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
    4d08:	f04f 32ff 	mov.w	r2, #4294967295
    4d0c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d0e:	07d2      	lsls	r2, r2, #31
    4d10:	d5ec      	bpl.n	4cec <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
    4d12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4d16:	e000      	b.n	4d1a <gpio_nrfx_pin_interrupt_configure+0xbe>
        case 1: return NRF_P1;
    4d18:	4a12      	ldr	r2, [pc, #72]	; (4d64 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4d1a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4d22:	07db      	lsls	r3, r3, #31
    4d24:	d4b8      	bmi.n	4c98 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4d26:	f10d 0507 	add.w	r5, sp, #7
    4d2a:	4629      	mov	r1, r5
    4d2c:	4620      	mov	r0, r4
    4d2e:	f001 fb43 	bl	63b8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4d32:	4b0d      	ldr	r3, [pc, #52]	; (4d68 <gpio_nrfx_pin_interrupt_configure+0x10c>)
    4d34:	4298      	cmp	r0, r3
    4d36:	d001      	beq.n	4d3c <gpio_nrfx_pin_interrupt_configure+0xe0>
		trigger_config.p_in_channel = &ch;
    4d38:	9503      	str	r5, [sp, #12]
    4d3a:	e7ad      	b.n	4c98 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
    4d3c:	4628      	mov	r0, r5
    4d3e:	f001 fb9b 	bl	6478 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4d42:	4b04      	ldr	r3, [pc, #16]	; (4d54 <gpio_nrfx_pin_interrupt_configure+0xf8>)
    4d44:	4298      	cmp	r0, r3
    4d46:	d0f7      	beq.n	4d38 <gpio_nrfx_pin_interrupt_configure+0xdc>
				return -ENOMEM;
    4d48:	f06f 000b 	mvn.w	r0, #11
    4d4c:	e795      	b.n	4c7a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    4d4e:	f06f 0015 	mvn.w	r0, #21
    4d52:	e792      	b.n	4c7a <gpio_nrfx_pin_interrupt_configure+0x1e>
    4d54:	0bad0000 	.word	0x0bad0000
    4d58:	0000c699 	.word	0x0000c699
    4d5c:	0000b53f 	.word	0x0000b53f
    4d60:	0000c666 	.word	0x0000c666
    4d64:	50000300 	.word	0x50000300
    4d68:	0bad0004 	.word	0x0bad0004

00004d6c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4d6c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4d6e:	f001 fb73 	bl	6458 <nrfx_gpiote_is_init>
    4d72:	4604      	mov	r4, r0
    4d74:	b968      	cbnz	r0, 4d92 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    4d76:	f001 fb47 	bl	6408 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4d7a:	4b08      	ldr	r3, [pc, #32]	; (4d9c <gpio_nrfx_init+0x30>)
    4d7c:	4298      	cmp	r0, r3
    4d7e:	d10a      	bne.n	4d96 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4d80:	4807      	ldr	r0, [pc, #28]	; (4da0 <gpio_nrfx_init+0x34>)
    4d82:	4621      	mov	r1, r4
    4d84:	f001 fb12 	bl	63ac <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4d88:	4622      	mov	r2, r4
    4d8a:	2105      	movs	r1, #5
    4d8c:	2006      	movs	r0, #6
    4d8e:	f7fe fbdd 	bl	354c <z_arm_irq_priority_set>
		return 0;
    4d92:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4d94:	bd10      	pop	{r4, pc}
		return -EIO;
    4d96:	f06f 0004 	mvn.w	r0, #4
    4d9a:	e7fb      	b.n	4d94 <gpio_nrfx_init+0x28>
    4d9c:	0bad0000 	.word	0x0bad0000
    4da0:	00004da5 	.word	0x00004da5

00004da4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4da4:	0942      	lsrs	r2, r0, #5
{
    4da6:	b570      	push	{r4, r5, r6, lr}
    4da8:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4daa:	d002      	beq.n	4db2 <nrfx_gpio_handler+0xe>
    4dac:	2a01      	cmp	r2, #1
    4dae:	d01e      	beq.n	4dee <nrfx_gpio_handler+0x4a>
}
    4db0:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4db2:	4e14      	ldr	r6, [pc, #80]	; (4e04 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
    4db4:	6932      	ldr	r2, [r6, #16]
    4db6:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4db8:	2900      	cmp	r1, #0
    4dba:	d0f9      	beq.n	4db0 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4dbc:	f003 031f 	and.w	r3, r3, #31
    4dc0:	2501      	movs	r5, #1
	return node->next;
    4dc2:	680c      	ldr	r4, [r1, #0]
    4dc4:	409d      	lsls	r5, r3
    4dc6:	2900      	cmp	r1, #0
    4dc8:	d0f2      	beq.n	4db0 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    4dca:	688a      	ldr	r2, [r1, #8]
    4dcc:	402a      	ands	r2, r5
    4dce:	d012      	beq.n	4df6 <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
    4dd0:	684b      	ldr	r3, [r1, #4]
    4dd2:	b973      	cbnz	r3, 4df2 <nrfx_gpio_handler+0x4e>
    4dd4:	490c      	ldr	r1, [pc, #48]	; (4e08 <nrfx_gpio_handler+0x64>)
    4dd6:	4a0d      	ldr	r2, [pc, #52]	; (4e0c <nrfx_gpio_handler+0x68>)
    4dd8:	480d      	ldr	r0, [pc, #52]	; (4e10 <nrfx_gpio_handler+0x6c>)
    4dda:	234d      	movs	r3, #77	; 0x4d
    4ddc:	f005 fb73 	bl	a4c6 <assert_print>
    4de0:	480c      	ldr	r0, [pc, #48]	; (4e14 <nrfx_gpio_handler+0x70>)
    4de2:	f005 fb70 	bl	a4c6 <assert_print>
    4de6:	4809      	ldr	r0, [pc, #36]	; (4e0c <nrfx_gpio_handler+0x68>)
    4de8:	214d      	movs	r1, #77	; 0x4d
    4dea:	f005 fb65 	bl	a4b8 <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4dee:	4e0a      	ldr	r6, [pc, #40]	; (4e18 <nrfx_gpio_handler+0x74>)
    4df0:	e7e0      	b.n	4db4 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
    4df2:	4630      	mov	r0, r6
    4df4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4df6:	b11c      	cbz	r4, 4e00 <nrfx_gpio_handler+0x5c>
    4df8:	6823      	ldr	r3, [r4, #0]
    4dfa:	4621      	mov	r1, r4
    4dfc:	461c      	mov	r4, r3
    4dfe:	e7e2      	b.n	4dc6 <nrfx_gpio_handler+0x22>
    4e00:	4623      	mov	r3, r4
    4e02:	e7fa      	b.n	4dfa <nrfx_gpio_handler+0x56>
    4e04:	0000af1c 	.word	0x0000af1c
    4e08:	0000c6bc 	.word	0x0000c6bc
    4e0c:	0000c5e9 	.word	0x0000c5e9
    4e10:	0000b53f 	.word	0x0000b53f
    4e14:	0000c64f 	.word	0x0000c64f
    4e18:	0000af04 	.word	0x0000af04

00004e1c <gpio_nrfx_pin_configure>:
{
    4e1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    4e20:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4e24:	f898 300c 	ldrb.w	r3, [r8, #12]
    4e28:	f001 051f 	and.w	r5, r1, #31
    4e2c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    4e30:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4e32:	4628      	mov	r0, r5
    4e34:	f10d 0103 	add.w	r1, sp, #3
{
    4e38:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4e3a:	f001 fabd 	bl	63b8 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    4e3e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4e42:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    4e44:	d115      	bne.n	4e72 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    4e46:	4628      	mov	r0, r5
    4e48:	f001 fbb2 	bl	65b0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    4e4c:	4b49      	ldr	r3, [pc, #292]	; (4f74 <gpio_nrfx_pin_configure+0x158>)
    4e4e:	429e      	cmp	r6, r3
    4e50:	d171      	bne.n	4f36 <gpio_nrfx_pin_configure+0x11a>
			err = nrfx_gpiote_channel_free(ch);
    4e52:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4e56:	f001 fb09 	bl	646c <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    4e5a:	42b0      	cmp	r0, r6
    4e5c:	d06b      	beq.n	4f36 <gpio_nrfx_pin_configure+0x11a>
    4e5e:	4946      	ldr	r1, [pc, #280]	; (4f78 <gpio_nrfx_pin_configure+0x15c>)
    4e60:	4a46      	ldr	r2, [pc, #280]	; (4f7c <gpio_nrfx_pin_configure+0x160>)
    4e62:	4847      	ldr	r0, [pc, #284]	; (4f80 <gpio_nrfx_pin_configure+0x164>)
    4e64:	236a      	movs	r3, #106	; 0x6a
    4e66:	f005 fb2e 	bl	a4c6 <assert_print>
    4e6a:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    4e6c:	4843      	ldr	r0, [pc, #268]	; (4f7c <gpio_nrfx_pin_configure+0x160>)
    4e6e:	f005 fb23 	bl	a4b8 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4e72:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4e74:	4619      	mov	r1, r3
    4e76:	aa02      	add	r2, sp, #8
    4e78:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    4e7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4e7e:	f001 f977 	bl	6170 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4e82:	4b3c      	ldr	r3, [pc, #240]	; (4f74 <gpio_nrfx_pin_configure+0x158>)
    4e84:	4298      	cmp	r0, r3
    4e86:	d004      	beq.n	4e92 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
    4e88:	f06f 0015 	mvn.w	r0, #21
}
    4e8c:	b004      	add	sp, #16
    4e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    4e92:	4286      	cmp	r6, r0
    4e94:	d10d      	bne.n	4eb2 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
    4e96:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4e9a:	f001 fae7 	bl	646c <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    4e9e:	42b0      	cmp	r0, r6
    4ea0:	d007      	beq.n	4eb2 <gpio_nrfx_pin_configure+0x96>
    4ea2:	4935      	ldr	r1, [pc, #212]	; (4f78 <gpio_nrfx_pin_configure+0x15c>)
    4ea4:	4a35      	ldr	r2, [pc, #212]	; (4f7c <gpio_nrfx_pin_configure+0x160>)
    4ea6:	4836      	ldr	r0, [pc, #216]	; (4f80 <gpio_nrfx_pin_configure+0x164>)
    4ea8:	237c      	movs	r3, #124	; 0x7c
    4eaa:	f005 fb0c 	bl	a4c6 <assert_print>
    4eae:	217c      	movs	r1, #124	; 0x7c
    4eb0:	e7dc      	b.n	4e6c <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
    4eb2:	03a6      	lsls	r6, r4, #14
    4eb4:	d54e      	bpl.n	4f54 <gpio_nrfx_pin_configure+0x138>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4eb6:	f240 3306 	movw	r3, #774	; 0x306
    4eba:	4023      	ands	r3, r4
    4ebc:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    4ec0:	d019      	beq.n	4ef6 <gpio_nrfx_pin_configure+0xda>
    4ec2:	d80c      	bhi.n	4ede <gpio_nrfx_pin_configure+0xc2>
    4ec4:	2b06      	cmp	r3, #6
    4ec6:	d017      	beq.n	4ef8 <gpio_nrfx_pin_configure+0xdc>
    4ec8:	d804      	bhi.n	4ed4 <gpio_nrfx_pin_configure+0xb8>
    4eca:	b1ab      	cbz	r3, 4ef8 <gpio_nrfx_pin_configure+0xdc>
    4ecc:	2b02      	cmp	r3, #2
    4ece:	d1db      	bne.n	4e88 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
    4ed0:	2304      	movs	r3, #4
    4ed2:	e011      	b.n	4ef8 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4ed8:	d1d6      	bne.n	4e88 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
    4eda:	2301      	movs	r3, #1
    4edc:	e00c      	b.n	4ef8 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4ede:	f240 2202 	movw	r2, #514	; 0x202
    4ee2:	4293      	cmp	r3, r2
    4ee4:	d029      	beq.n	4f3a <gpio_nrfx_pin_configure+0x11e>
    4ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    4eea:	d028      	beq.n	4f3e <gpio_nrfx_pin_configure+0x122>
    4eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4ef0:	d1ca      	bne.n	4e88 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
    4ef2:	2302      	movs	r3, #2
    4ef4:	e000      	b.n	4ef8 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
    4ef6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    4ef8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4efc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    4f00:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    4f04:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4f06:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    4f0a:	bf54      	ite	pl
    4f0c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4f10:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4f12:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    4f14:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4f18:	d513      	bpl.n	4f42 <gpio_nrfx_pin_configure+0x126>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4f1a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4f1e:	2301      	movs	r3, #1
    4f20:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
    4f22:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4f26:	2200      	movs	r2, #0
    4f28:	a901      	add	r1, sp, #4
    4f2a:	4628      	mov	r0, r5
    4f2c:	f001 f9ca 	bl	62c4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4f30:	4b10      	ldr	r3, [pc, #64]	; (4f74 <gpio_nrfx_pin_configure+0x158>)
    4f32:	4298      	cmp	r0, r3
    4f34:	d1a8      	bne.n	4e88 <gpio_nrfx_pin_configure+0x6c>
    4f36:	2000      	movs	r0, #0
    4f38:	e7a8      	b.n	4e8c <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
    4f3a:	2305      	movs	r3, #5
    4f3c:	e7dc      	b.n	4ef8 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4f3e:	2303      	movs	r3, #3
    4f40:	e7da      	b.n	4ef8 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4f42:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4f44:	bf41      	itttt	mi
    4f46:	2301      	movmi	r3, #1
    4f48:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
    4f4c:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
    4f4e:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    4f52:	e7e8      	b.n	4f26 <gpio_nrfx_pin_configure+0x10a>
	if (flags & GPIO_PULL_UP) {
    4f54:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4f56:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    4f5a:	bf54      	ite	pl
    4f5c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4f60:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4f62:	461a      	mov	r2, r3
    4f64:	a901      	add	r1, sp, #4
    4f66:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    4f68:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4f6c:	f001 f900 	bl	6170 <nrfx_gpiote_input_configure>
    4f70:	e7de      	b.n	4f30 <gpio_nrfx_pin_configure+0x114>
    4f72:	bf00      	nop
    4f74:	0bad0000 	.word	0x0bad0000
    4f78:	0000c6f4 	.word	0x0000c6f4
    4f7c:	0000c6c8 	.word	0x0000c6c8
    4f80:	0000b53f 	.word	0x0000b53f

00004f84 <nrf_gpio_pin_port_decode>:
{
    4f84:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4f86:	6803      	ldr	r3, [r0, #0]
    switch (port)
    4f88:	095a      	lsrs	r2, r3, #5
    4f8a:	d00d      	beq.n	4fa8 <nrf_gpio_pin_port_decode+0x24>
    4f8c:	2a01      	cmp	r2, #1
    4f8e:	d014      	beq.n	4fba <nrf_gpio_pin_port_decode+0x36>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4f90:	490f      	ldr	r1, [pc, #60]	; (4fd0 <nrf_gpio_pin_port_decode+0x4c>)
    4f92:	4810      	ldr	r0, [pc, #64]	; (4fd4 <nrf_gpio_pin_port_decode+0x50>)
    4f94:	4a10      	ldr	r2, [pc, #64]	; (4fd8 <nrf_gpio_pin_port_decode+0x54>)
    4f96:	f240 2347 	movw	r3, #583	; 0x247
    4f9a:	f005 fa94 	bl	a4c6 <assert_print>
    4f9e:	480e      	ldr	r0, [pc, #56]	; (4fd8 <nrf_gpio_pin_port_decode+0x54>)
    4fa0:	f240 2147 	movw	r1, #583	; 0x247
    4fa4:	f005 fa88 	bl	a4b8 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
    4fa8:	f04f 32ff 	mov.w	r2, #4294967295
    4fac:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4fb0:	07d9      	lsls	r1, r3, #31
    4fb2:	d5ed      	bpl.n	4f90 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
    4fb4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    4fb8:	e008      	b.n	4fcc <nrf_gpio_pin_port_decode+0x48>
    pin_number &= 0x1F;
    4fba:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4fc2:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4fc4:	07d2      	lsls	r2, r2, #31
    4fc6:	d5e3      	bpl.n	4f90 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
    4fc8:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
    4fca:	4804      	ldr	r0, [pc, #16]	; (4fdc <nrf_gpio_pin_port_decode+0x58>)
}
    4fcc:	bd08      	pop	{r3, pc}
    4fce:	bf00      	nop
    4fd0:	0000c699 	.word	0x0000c699
    4fd4:	0000b53f 	.word	0x0000b53f
    4fd8:	0000c666 	.word	0x0000c666
    4fdc:	50000300 	.word	0x50000300

00004fe0 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    4fe0:	4802      	ldr	r0, [pc, #8]	; (4fec <pwm_nrfx_get_cycles_per_sec+0xc>)
    4fe2:	2100      	movs	r1, #0
    4fe4:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    4fe8:	2000      	movs	r0, #0
    4fea:	4770      	bx	lr
    4fec:	00f42400 	.word	0x00f42400

00004ff0 <nrf_pwm_pin_get>:
    }
}

NRF_STATIC_INLINE uint32_t nrf_pwm_pin_get(NRF_PWM_Type const * p_reg, uint8_t channel)
{
    NRFX_ASSERT(channel < NRF_PWM_CHANNEL_COUNT);
    4ff0:	2903      	cmp	r1, #3
{
    4ff2:	b508      	push	{r3, lr}
    NRFX_ASSERT(channel < NRF_PWM_CHANNEL_COUNT);
    4ff4:	d90b      	bls.n	500e <nrf_pwm_pin_get+0x1e>
    4ff6:	4908      	ldr	r1, [pc, #32]	; (5018 <nrf_pwm_pin_get+0x28>)
    4ff8:	4808      	ldr	r0, [pc, #32]	; (501c <nrf_pwm_pin_get+0x2c>)
    4ffa:	4a09      	ldr	r2, [pc, #36]	; (5020 <nrf_pwm_pin_get+0x30>)
    4ffc:	f44f 7327 	mov.w	r3, #668	; 0x29c
    5000:	f005 fa61 	bl	a4c6 <assert_print>
    5004:	4806      	ldr	r0, [pc, #24]	; (5020 <nrf_pwm_pin_get+0x30>)
    5006:	f44f 7127 	mov.w	r1, #668	; 0x29c
    500a:	f005 fa55 	bl	a4b8 <assert_post_action>
    return p_reg->PSEL.OUT[channel];
    500e:	f501 71ac 	add.w	r1, r1, #344	; 0x158
    5012:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
}
    5016:	bd08      	pop	{r3, pc}
    5018:	0000c756 	.word	0x0000c756
    501c:	0000b53f 	.word	0x0000b53f
    5020:	0000c724 	.word	0x0000c724

00005024 <nrf_gpio_pin_port_decode>:
{
    5024:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5026:	6803      	ldr	r3, [r0, #0]
    switch (port)
    5028:	095a      	lsrs	r2, r3, #5
    502a:	d00d      	beq.n	5048 <nrf_gpio_pin_port_decode+0x24>
    502c:	2a01      	cmp	r2, #1
    502e:	d014      	beq.n	505a <nrf_gpio_pin_port_decode+0x36>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5030:	490f      	ldr	r1, [pc, #60]	; (5070 <nrf_gpio_pin_port_decode+0x4c>)
    5032:	4810      	ldr	r0, [pc, #64]	; (5074 <nrf_gpio_pin_port_decode+0x50>)
    5034:	4a10      	ldr	r2, [pc, #64]	; (5078 <nrf_gpio_pin_port_decode+0x54>)
    5036:	f240 2347 	movw	r3, #583	; 0x247
    503a:	f005 fa44 	bl	a4c6 <assert_print>
    503e:	480e      	ldr	r0, [pc, #56]	; (5078 <nrf_gpio_pin_port_decode+0x54>)
    5040:	f240 2147 	movw	r1, #583	; 0x247
    5044:	f005 fa38 	bl	a4b8 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
    5048:	f04f 32ff 	mov.w	r2, #4294967295
    504c:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5050:	07d9      	lsls	r1, r3, #31
    5052:	d5ed      	bpl.n	5030 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
    5054:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    5058:	e008      	b.n	506c <nrf_gpio_pin_port_decode+0x48>
    pin_number &= 0x1F;
    505a:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    505e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5062:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5064:	07d2      	lsls	r2, r2, #31
    5066:	d5e3      	bpl.n	5030 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
    5068:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
    506a:	4804      	ldr	r0, [pc, #16]	; (507c <nrf_gpio_pin_port_decode+0x58>)
}
    506c:	bd08      	pop	{r3, pc}
    506e:	bf00      	nop
    5070:	0000c699 	.word	0x0000c699
    5074:	0000b53f 	.word	0x0000b53f
    5078:	0000c666 	.word	0x0000c666
    507c:	50000300 	.word	0x50000300

00005080 <pwm_nrfx_set_cycles>:
{
    5080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5084:	b08b      	sub	sp, #44	; 0x2c
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
    5086:	2903      	cmp	r1, #3
    5088:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
	const struct pwm_nrfx_config *config = dev->config;
    508c:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    508e:	6905      	ldr	r5, [r0, #16]
{
    5090:	4688      	mov	r8, r1
    5092:	4616      	mov	r6, r2
    5094:	461c      	mov	r4, r3
    5096:	f00a 0a01 	and.w	sl, sl, #1
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
    509a:	d90b      	bls.n	50b4 <pwm_nrfx_set_cycles+0x34>
		LOG_ERR("Invalid channel: %u.", channel);
    509c:	4b5b      	ldr	r3, [pc, #364]	; (520c <pwm_nrfx_set_cycles+0x18c>)
    509e:	9103      	str	r1, [sp, #12]
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
    50a0:	9302      	str	r3, [sp, #8]
    50a2:	2300      	movs	r3, #0
    50a4:	e9cd 3300 	strd	r3, r3, [sp]
    50a8:	4959      	ldr	r1, [pc, #356]	; (5210 <pwm_nrfx_set_cycles+0x190>)
    50aa:	2201      	movs	r2, #1
    50ac:	4618      	mov	r0, r3
    50ae:	f005 fc5e 	bl	a96e <z_log_msg_runtime_create.constprop.0>
	return false;
    50b2:	e01b      	b.n	50ec <pwm_nrfx_set_cycles+0x6c>
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    50b4:	7bbb      	ldrb	r3, [r7, #14]
    50b6:	2b01      	cmp	r3, #1
		period_cycles /= 2;
    50b8:	bf04      	itt	eq
    50ba:	0856      	lsreq	r6, r2, #1
		pulse_cycles /= 2;
    50bc:	0864      	lsreq	r4, r4, #1
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
    50be:	2201      	movs	r2, #1
    50c0:	fa02 f901 	lsl.w	r9, r2, r1
	if (pulse_cycles == 0) {
    50c4:	2c00      	cmp	r4, #0
    50c6:	d076      	beq.n	51b6 <pwm_nrfx_set_cycles+0x136>
	} else if (pulse_cycles >= period_cycles) {
    50c8:	42a6      	cmp	r6, r4
    50ca:	d977      	bls.n	51bc <pwm_nrfx_set_cycles+0x13c>
	if (period_cycles == data->period_cycles) {
    50cc:	682b      	ldr	r3, [r5, #0]
    50ce:	429e      	cmp	r6, r3
    50d0:	d01f      	beq.n	5112 <pwm_nrfx_set_cycles+0x92>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
    50d2:	7b2b      	ldrb	r3, [r5, #12]
    50d4:	ea33 0309 	bics.w	r3, r3, r9
    50d8:	d00d      	beq.n	50f6 <pwm_nrfx_set_cycles+0x76>
		LOG_ERR("Incompatible period.");
    50da:	4b4e      	ldr	r3, [pc, #312]	; (5214 <pwm_nrfx_set_cycles+0x194>)
    50dc:	9302      	str	r3, [sp, #8]
    50de:	2300      	movs	r3, #0
    50e0:	e9cd 3300 	strd	r3, r3, [sp]
    50e4:	494a      	ldr	r1, [pc, #296]	; (5210 <pwm_nrfx_set_cycles+0x190>)
    50e6:	4618      	mov	r0, r3
    50e8:	f005 fc41 	bl	a96e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    50ec:	f06f 0015 	mvn.w	r0, #21
}
    50f0:	b00b      	add	sp, #44	; 0x2c
    50f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50f6:	4632      	mov	r2, r6
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    50f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    50fc:	d253      	bcs.n	51a6 <pwm_nrfx_set_cycles+0x126>
			data->period_cycles = period_cycles;
    50fe:	602e      	str	r6, [r5, #0]
			data->prescaler     = prescaler;
    5100:	736b      	strb	r3, [r5, #13]
			nrf_pwm_configure(config->pwm.p_registers,
    5102:	6839      	ldr	r1, [r7, #0]
					  config->initial_config.count_mode,
    5104:	7bb8      	ldrb	r0, [r7, #14]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
    5106:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
    p_reg->MODE       = mode;
    510a:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    510e:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
		compare_value = (uint16_t)(pulse_cycles >> data->prescaler);
    5112:	7b6b      	ldrb	r3, [r5, #13]
    5114:	fa24 f303 	lsr.w	r3, r4, r3
    5118:	b29b      	uxth	r3, r3
		needs_pwm = true;
    511a:	f04f 0b01 	mov.w	fp, #1
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
    511e:	eb05 0248 	add.w	r2, r5, r8, lsl #1
    5122:	f08a 0101 	eor.w	r1, sl, #1
    5126:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
    512a:	8093      	strh	r3, [r2, #4]
	LOG_DBG("channel %u, pulse %u, period %u, prescaler: %u.",
    512c:	7b6b      	ldrb	r3, [r5, #13]
    512e:	4938      	ldr	r1, [pc, #224]	; (5210 <pwm_nrfx_set_cycles+0x190>)
    5130:	e9cd 6306 	strd	r6, r3, [sp, #24]
    5134:	4b38      	ldr	r3, [pc, #224]	; (5218 <pwm_nrfx_set_cycles+0x198>)
    5136:	9303      	str	r3, [sp, #12]
    5138:	4b38      	ldr	r3, [pc, #224]	; (521c <pwm_nrfx_set_cycles+0x19c>)
    513a:	9302      	str	r3, [sp, #8]
    513c:	2208      	movs	r2, #8
    513e:	2300      	movs	r3, #0
    5140:	e9cd 3200 	strd	r3, r2, [sp]
    5144:	e9cd 8404 	strd	r8, r4, [sp, #16]
    5148:	2204      	movs	r2, #4
    514a:	4618      	mov	r0, r3
    514c:	f005 fc0f 	bl	a96e <z_log_msg_runtime_create.constprop.0>
		data->pwm_needed &= ~BIT(channel);
    5150:	fa5f f989 	uxtb.w	r9, r9
	if (!needs_pwm) {
    5154:	f1bb 0f00 	cmp.w	fp, #0
    5158:	d13f      	bne.n	51da <pwm_nrfx_set_cycles+0x15a>
	*psel = nrf_pwm_pin_get(config->pwm.p_registers, (uint8_t)channel);
    515a:	6838      	ldr	r0, [r7, #0]
    515c:	fa5f f188 	uxtb.w	r1, r8
    5160:	f7ff ff46 	bl	4ff0 <nrf_pwm_pin_get>
		if (channel_psel_get(channel, &psel, config)) {
    5164:	2800      	cmp	r0, #0
    5166:	db0f      	blt.n	5188 <pwm_nrfx_set_cycles+0x108>
			if (inverted) {
    5168:	f1ba 0f00 	cmp.w	sl, #0
    516c:	d049      	beq.n	5202 <pwm_nrfx_set_cycles+0x182>
				out_level ^= 1;
    516e:	fab4 f484 	clz	r4, r4
    5172:	0964      	lsrs	r4, r4, #5
    if (value == 0)
    5174:	bb3c      	cbnz	r4, 51c6 <pwm_nrfx_set_cycles+0x146>
        nrf_gpio_pin_clear(pin_number);
    5176:	9009      	str	r0, [sp, #36]	; 0x24
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5178:	a809      	add	r0, sp, #36	; 0x24
    517a:	f7ff ff53 	bl	5024 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    517e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5180:	2301      	movs	r3, #1
    5182:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    5184:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
		data->pwm_needed &= ~BIT(channel);
    5188:	7b29      	ldrb	r1, [r5, #12]
    518a:	ea21 0109 	bic.w	r1, r1, r9
    518e:	7329      	strb	r1, [r5, #12]
	if (data->pwm_needed == 0) {
    5190:	b341      	cbz	r1, 51e4 <pwm_nrfx_set_cycles+0x164>
		if (data->stop_requested) {
    5192:	7bab      	ldrb	r3, [r5, #14]
    5194:	bb6b      	cbnz	r3, 51f2 <pwm_nrfx_set_cycles+0x172>
		nrfx_pwm_simple_playback(&config->pwm, &config->seq, 1, 0);
    5196:	2300      	movs	r3, #0
    5198:	2201      	movs	r2, #1
    519a:	f107 0118 	add.w	r1, r7, #24
    519e:	4638      	mov	r0, r7
    51a0:	f001 fc74 	bl	6a8c <nrfx_pwm_simple_playback>
    51a4:	e023      	b.n	51ee <pwm_nrfx_set_cycles+0x16e>
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    51a6:	3301      	adds	r3, #1
    51a8:	2b08      	cmp	r3, #8
		countertop >>= 1;
    51aa:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    51ae:	d1a3      	bne.n	50f8 <pwm_nrfx_set_cycles+0x78>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
    51b0:	4b1b      	ldr	r3, [pc, #108]	; (5220 <pwm_nrfx_set_cycles+0x1a0>)
    51b2:	9603      	str	r6, [sp, #12]
    51b4:	e774      	b.n	50a0 <pwm_nrfx_set_cycles+0x20>
	bool needs_pwm = false;
    51b6:	46a3      	mov	fp, r4
		compare_value = 0;
    51b8:	4623      	mov	r3, r4
    51ba:	e7b0      	b.n	511e <pwm_nrfx_set_cycles+0x9e>
	bool needs_pwm = false;
    51bc:	f04f 0b00 	mov.w	fp, #0
		compare_value = PWM_NRFX_CH_COMPARE_MASK;
    51c0:	f647 73ff 	movw	r3, #32767	; 0x7fff
    51c4:	e7ab      	b.n	511e <pwm_nrfx_set_cycles+0x9e>
        nrf_gpio_pin_set(pin_number);
    51c6:	9009      	str	r0, [sp, #36]	; 0x24
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    51c8:	a809      	add	r0, sp, #36	; 0x24
    51ca:	f7ff ff2b 	bl	5024 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    51ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    51d0:	2301      	movs	r3, #1
    51d2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    51d4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    51d8:	e7d6      	b.n	5188 <pwm_nrfx_set_cycles+0x108>
		data->pwm_needed |= BIT(channel);
    51da:	7b2b      	ldrb	r3, [r5, #12]
    51dc:	ea49 0303 	orr.w	r3, r9, r3
    51e0:	732b      	strb	r3, [r5, #12]
	if (data->pwm_needed == 0) {
    51e2:	e7d6      	b.n	5192 <pwm_nrfx_set_cycles+0x112>
		nrfx_pwm_stop(&config->pwm, false);
    51e4:	4638      	mov	r0, r7
    51e6:	f001 fcef 	bl	6bc8 <nrfx_pwm_stop>
		data->stop_requested = true;
    51ea:	2301      	movs	r3, #1
    51ec:	73ab      	strb	r3, [r5, #14]
	return 0;
    51ee:	2000      	movs	r0, #0
    51f0:	e77e      	b.n	50f0 <pwm_nrfx_set_cycles+0x70>
			data->stop_requested = false;
    51f2:	2300      	movs	r3, #0
    51f4:	73ab      	strb	r3, [r5, #14]
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    51f6:	4638      	mov	r0, r7
    51f8:	f001 fcbc 	bl	6b74 <nrfx_pwm_is_stopped>
    51fc:	2800      	cmp	r0, #0
    51fe:	d0fa      	beq.n	51f6 <pwm_nrfx_set_cycles+0x176>
    5200:	e7c9      	b.n	5196 <pwm_nrfx_set_cycles+0x116>
			uint32_t out_level = (pulse_cycles == 0) ? 0 : 1;
    5202:	3c00      	subs	r4, #0
    5204:	bf18      	it	ne
    5206:	2401      	movne	r4, #1
    5208:	e7b4      	b.n	5174 <pwm_nrfx_set_cycles+0xf4>
    520a:	bf00      	nop
    520c:	0000c762 	.word	0x0000c762
    5210:	0000b1a0 	.word	0x0000b1a0
    5214:	0000c777 	.word	0x0000c777
    5218:	0000c80a 	.word	0x0000c80a
    521c:	0000c7b6 	.word	0x0000c7b6
    5220:	0000c78c 	.word	0x0000c78c

00005224 <pwm_nrfx_init>:
	.set_cycles = pwm_nrfx_set_cycles,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    5224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct pwm_nrfx_config *config = dev->config;
    5228:	6845      	ldr	r5, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    522a:	6906      	ldr	r6, [r0, #16]
	uint8_t initially_inverted = 0;

	int ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
    522c:	6aaf      	ldr	r7, [r5, #40]	; 0x28
{
    522e:	b086      	sub	sp, #24
    5230:	4604      	mov	r4, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    5232:	aa05      	add	r2, sp, #20
    5234:	2100      	movs	r1, #0
    5236:	4638      	mov	r0, r7
    5238:	f005 fad7 	bl	a7ea <pinctrl_lookup_state>
	if (ret < 0) {
    523c:	2800      	cmp	r0, #0
    523e:	db4b      	blt.n	52d8 <pwm_nrfx_init+0xb4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    5240:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5242:	683a      	ldr	r2, [r7, #0]
    5244:	7919      	ldrb	r1, [r3, #4]
    5246:	6818      	ldr	r0, [r3, #0]
    5248:	f005 fae2 	bl	a810 <pinctrl_configure_pins>

	if (ret < 0) {
    524c:	2800      	cmp	r0, #0
    524e:	db43      	blt.n	52d8 <pwm_nrfx_init+0xb4>
		return ret;
	}

	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    5250:	2700      	movs	r7, #0
	uint8_t initially_inverted = 0;
    5252:	46b8      	mov	r8, r7
	*psel = nrf_pwm_pin_get(config->pwm.p_registers, (uint8_t)channel);
    5254:	6828      	ldr	r0, [r5, #0]
    5256:	b2f9      	uxtb	r1, r7
    5258:	f7ff feca 	bl	4ff0 <nrf_pwm_pin_get>
		uint32_t psel;

		if (channel_psel_get(i, &psel, config)) {
    525c:	2800      	cmp	r0, #0
    525e:	db10      	blt.n	5282 <pwm_nrfx_init+0x5e>
			/* Mark channels as inverted according to what initial
			 * state of their outputs has been set by pinctrl (high
			 * idle state means that the channel is inverted).
			 */
			initially_inverted |= nrf_gpio_pin_out_read(psel) ?
    5260:	9005      	str	r0, [sp, #20]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5262:	a805      	add	r0, sp, #20
    5264:	f7ff fede 	bl	5024 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
    5268:	9a05      	ldr	r2, [sp, #20]
    return p_reg->OUT;
    526a:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
    526e:	40d3      	lsrs	r3, r2
					      BIT(i) : 0;
    5270:	f013 0301 	ands.w	r3, r3, #1
    5274:	bf1c      	itt	ne
    5276:	2301      	movne	r3, #1
    5278:	40bb      	lslne	r3, r7
			initially_inverted |= nrf_gpio_pin_out_read(psel) ?
    527a:	ea48 0303 	orr.w	r3, r8, r3
    527e:	fa5f f883 	uxtb.w	r8, r3
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    5282:	3701      	adds	r7, #1
    5284:	2f04      	cmp	r7, #4
    5286:	d1e5      	bne.n	5254 <pwm_nrfx_init+0x30>
    5288:	3602      	adds	r6, #2
		}
	}

	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    528a:	2300      	movs	r3, #0
		bool inverted = initially_inverted & BIT(i);
    528c:	2101      	movs	r1, #1
    528e:	fa01 f203 	lsl.w	r2, r1, r3

		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
    5292:	ea12 0f08 	tst.w	r2, r8
    5296:	bf0c      	ite	eq
    5298:	2201      	moveq	r2, #1
    529a:	2200      	movne	r2, #0
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    529c:	3301      	adds	r3, #1
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
    529e:	03d2      	lsls	r2, r2, #15
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    52a0:	2b04      	cmp	r3, #4
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
    52a2:	f826 2f02 	strh.w	r2, [r6, #2]!
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    52a6:	d1f2      	bne.n	528e <pwm_nrfx_init+0x6a>
	}

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    52a8:	2300      	movs	r3, #0
    52aa:	461a      	mov	r2, r3
    52ac:	f105 0108 	add.w	r1, r5, #8
    52b0:	4628      	mov	r0, r5
    52b2:	f001 fb21 	bl	68f8 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    52b6:	4b0b      	ldr	r3, [pc, #44]	; (52e4 <pwm_nrfx_init+0xc0>)
    52b8:	4298      	cmp	r0, r3
    52ba:	d010      	beq.n	52de <pwm_nrfx_init+0xba>
		LOG_ERR("Failed to initialize device: %s", dev->name);
    52bc:	6823      	ldr	r3, [r4, #0]
    52be:	9303      	str	r3, [sp, #12]
    52c0:	4b09      	ldr	r3, [pc, #36]	; (52e8 <pwm_nrfx_init+0xc4>)
    52c2:	9302      	str	r3, [sp, #8]
    52c4:	2300      	movs	r3, #0
    52c6:	4618      	mov	r0, r3
    52c8:	e9cd 3300 	strd	r3, r3, [sp]
    52cc:	4907      	ldr	r1, [pc, #28]	; (52ec <pwm_nrfx_init+0xc8>)
    52ce:	2201      	movs	r2, #1
    52d0:	f005 fb4d 	bl	a96e <z_log_msg_runtime_create.constprop.0>
		return -EBUSY;
    52d4:	f06f 000f 	mvn.w	r0, #15
	}

	return 0;
}
    52d8:	b006      	add	sp, #24
    52da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
    52de:	2000      	movs	r0, #0
    52e0:	e7fa      	b.n	52d8 <pwm_nrfx_init+0xb4>
    52e2:	bf00      	nop
    52e4:	0bad0000 	.word	0x0bad0000
    52e8:	0000c7ea 	.word	0x0000c7ea
    52ec:	0000b1a0 	.word	0x0000b1a0

000052f0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    52f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    52f2:	ab0b      	add	r3, sp, #44	; 0x2c
    52f4:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    52f6:	9303      	str	r3, [sp, #12]
    52f8:	4b05      	ldr	r3, [pc, #20]	; (5310 <z_log_msg_runtime_create.constprop.0+0x20>)
    52fa:	9302      	str	r3, [sp, #8]
    52fc:	2300      	movs	r3, #0
    52fe:	e9cd 3300 	strd	r3, r3, [sp]
    5302:	2201      	movs	r2, #1
    5304:	4618      	mov	r0, r3
    5306:	f7fd fb19 	bl	293c <z_impl_z_log_msg_runtime_vcreate>
}
    530a:	b007      	add	sp, #28
    530c:	f85d fb04 	ldr.w	pc, [sp], #4
    5310:	0000c834 	.word	0x0000c834

00005314 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    5314:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    5316:	794b      	ldrb	r3, [r1, #5]
    5318:	2b01      	cmp	r3, #1
    531a:	d026      	beq.n	536a <uarte_nrfx_configure+0x56>
    531c:	2b03      	cmp	r3, #3
    531e:	d121      	bne.n	5364 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5320:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5322:	798b      	ldrb	r3, [r1, #6]
    5324:	2b03      	cmp	r3, #3
    5326:	d11d      	bne.n	5364 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    5328:	79ce      	ldrb	r6, [r1, #7]
    532a:	b10e      	cbz	r6, 5330 <uarte_nrfx_configure+0x1c>
    532c:	2e01      	cmp	r6, #1
    532e:	d119      	bne.n	5364 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    5330:	790a      	ldrb	r2, [r1, #4]
    5332:	b112      	cbz	r2, 533a <uarte_nrfx_configure+0x26>
    5334:	2a02      	cmp	r2, #2
    5336:	d115      	bne.n	5364 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5338:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    533a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    533c:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    533e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    5342:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    5344:	d067      	beq.n	5416 <uarte_nrfx_configure+0x102>
    5346:	d82d      	bhi.n	53a4 <uarte_nrfx_configure+0x90>
    5348:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    534c:	d066      	beq.n	541c <uarte_nrfx_configure+0x108>
    534e:	d816      	bhi.n	537e <uarte_nrfx_configure+0x6a>
    5350:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    5354:	d064      	beq.n	5420 <uarte_nrfx_configure+0x10c>
    5356:	d80a      	bhi.n	536e <uarte_nrfx_configure+0x5a>
    5358:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    535c:	d063      	beq.n	5426 <uarte_nrfx_configure+0x112>
    535e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    5362:	d063      	beq.n	542c <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    5364:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5368:	e054      	b.n	5414 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    536a:	2500      	movs	r5, #0
    536c:	e7d9      	b.n	5322 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    536e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    5372:	d05e      	beq.n	5432 <uarte_nrfx_configure+0x11e>
    5374:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    5378:	d1f4      	bne.n	5364 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    537a:	4b38      	ldr	r3, [pc, #224]	; (545c <uarte_nrfx_configure+0x148>)
    537c:	e03c      	b.n	53f8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    537e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    5382:	d059      	beq.n	5438 <uarte_nrfx_configure+0x124>
    5384:	d807      	bhi.n	5396 <uarte_nrfx_configure+0x82>
    5386:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    538a:	d057      	beq.n	543c <uarte_nrfx_configure+0x128>
    538c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    5390:	d1e8      	bne.n	5364 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    5392:	4b33      	ldr	r3, [pc, #204]	; (5460 <uarte_nrfx_configure+0x14c>)
    5394:	e030      	b.n	53f8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5396:	f647 2412 	movw	r4, #31250	; 0x7a12
    539a:	42a3      	cmp	r3, r4
    539c:	d1e2      	bne.n	5364 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    539e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    53a2:	e029      	b.n	53f8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    53a4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    53a8:	d04a      	beq.n	5440 <uarte_nrfx_configure+0x12c>
    53aa:	d813      	bhi.n	53d4 <uarte_nrfx_configure+0xc0>
    53ac:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    53b0:	d049      	beq.n	5446 <uarte_nrfx_configure+0x132>
    53b2:	d809      	bhi.n	53c8 <uarte_nrfx_configure+0xb4>
    53b4:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    53b8:	42a3      	cmp	r3, r4
    53ba:	d046      	beq.n	544a <uarte_nrfx_configure+0x136>
    53bc:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    53c0:	d1d0      	bne.n	5364 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    53c2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    53c6:	e017      	b.n	53f8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    53c8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    53cc:	d1ca      	bne.n	5364 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    53ce:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    53d2:	e011      	b.n	53f8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    53d4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    53d8:	d03a      	beq.n	5450 <uarte_nrfx_configure+0x13c>
    53da:	d808      	bhi.n	53ee <uarte_nrfx_configure+0xda>
    53dc:	4c21      	ldr	r4, [pc, #132]	; (5464 <uarte_nrfx_configure+0x150>)
    53de:	42a3      	cmp	r3, r4
    53e0:	d039      	beq.n	5456 <uarte_nrfx_configure+0x142>
    53e2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    53e6:	d1bd      	bne.n	5364 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    53e8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    53ec:	e004      	b.n	53f8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    53ee:	4c1e      	ldr	r4, [pc, #120]	; (5468 <uarte_nrfx_configure+0x154>)
    53f0:	42a3      	cmp	r3, r4
    53f2:	d1b7      	bne.n	5364 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    53f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    53f8:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    53fa:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    53fe:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    5400:	4335      	orrs	r5, r6
    5402:	681b      	ldr	r3, [r3, #0]
    5404:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5406:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    540a:	c903      	ldmia	r1, {r0, r1}
    540c:	1d23      	adds	r3, r4, #4
    540e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    5412:	2000      	movs	r0, #0
}
    5414:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    5416:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    541a:	e7ed      	b.n	53f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    541c:	4b13      	ldr	r3, [pc, #76]	; (546c <uarte_nrfx_configure+0x158>)
    541e:	e7eb      	b.n	53f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5420:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    5424:	e7e8      	b.n	53f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    5426:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    542a:	e7e5      	b.n	53f8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    542c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    5430:	e7e2      	b.n	53f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    5432:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    5436:	e7df      	b.n	53f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    5438:	4b0d      	ldr	r3, [pc, #52]	; (5470 <uarte_nrfx_configure+0x15c>)
    543a:	e7dd      	b.n	53f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    543c:	4b0d      	ldr	r3, [pc, #52]	; (5474 <uarte_nrfx_configure+0x160>)
    543e:	e7db      	b.n	53f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    5440:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    5444:	e7d8      	b.n	53f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    5446:	4b0c      	ldr	r3, [pc, #48]	; (5478 <uarte_nrfx_configure+0x164>)
    5448:	e7d6      	b.n	53f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    544a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    544e:	e7d3      	b.n	53f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    5450:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    5454:	e7d0      	b.n	53f8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    5456:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    545a:	e7cd      	b.n	53f8 <uarte_nrfx_configure+0xe4>
    545c:	0013b000 	.word	0x0013b000
    5460:	004ea000 	.word	0x004ea000
    5464:	0003d090 	.word	0x0003d090
    5468:	000f4240 	.word	0x000f4240
    546c:	00275000 	.word	0x00275000
    5470:	0075c000 	.word	0x0075c000
    5474:	003af000 	.word	0x003af000
    5478:	013a9000 	.word	0x013a9000

0000547c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    547c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5480:	2200      	movs	r2, #0
    5482:	b087      	sub	sp, #28
    5484:	4680      	mov	r8, r0
    5486:	2101      	movs	r1, #1
    5488:	2002      	movs	r0, #2
    548a:	f7fe f85f 	bl	354c <z_arm_irq_priority_set>
    548e:	2002      	movs	r0, #2
    5490:	f7fe f82c 	bl	34ec <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    5494:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    5498:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    549c:	683d      	ldr	r5, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    549e:	2100      	movs	r1, #0
    54a0:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	data->dev = dev;
    54a4:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    54a8:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
    54ac:	aa05      	add	r2, sp, #20
    54ae:	4648      	mov	r0, r9
    54b0:	f005 f99b 	bl	a7ea <pinctrl_lookup_state>
	if (ret < 0) {
    54b4:	1e04      	subs	r4, r0, #0
    54b6:	db24      	blt.n	5502 <uarte_0_init+0x86>
	return pinctrl_apply_state_direct(config, state);
    54b8:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    54ba:	f8d9 2000 	ldr.w	r2, [r9]
    54be:	7919      	ldrb	r1, [r3, #4]
    54c0:	6818      	ldr	r0, [r3, #0]
    54c2:	f005 f9a5 	bl	a810 <pinctrl_configure_pins>
	if (err < 0) {
    54c6:	1e04      	subs	r4, r0, #0
    54c8:	db1b      	blt.n	5502 <uarte_0_init+0x86>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    54ca:	1d31      	adds	r1, r6, #4
    54cc:	4640      	mov	r0, r8
    54ce:	f7ff ff21 	bl	5314 <uarte_nrfx_configure>
	if (err) {
    54d2:	4604      	mov	r4, r0
    54d4:	b9a8      	cbnz	r0, 5502 <uarte_0_init+0x86>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    54d6:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    54d8:	0799      	lsls	r1, r3, #30
    54da:	d52a      	bpl.n	5532 <uarte_0_init+0xb6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    54dc:	f106 0018 	add.w	r0, r6, #24
    54e0:	f001 f96a 	bl	67b8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    54e4:	4b27      	ldr	r3, [pc, #156]	; (5584 <uarte_0_init+0x108>)
    54e6:	4298      	cmp	r0, r3
    54e8:	d00f      	beq.n	550a <uarte_0_init+0x8e>
		LOG_ERR("Failed to allocate PPI Channel");
    54ea:	4b27      	ldr	r3, [pc, #156]	; (5588 <uarte_0_init+0x10c>)
    54ec:	9400      	str	r4, [sp, #0]
    54ee:	e9cd 4301 	strd	r4, r3, [sp, #4]
    54f2:	4620      	mov	r0, r4
    54f4:	4623      	mov	r3, r4
    54f6:	4925      	ldr	r1, [pc, #148]	; (558c <uarte_0_init+0x110>)
    54f8:	2201      	movs	r2, #1
    54fa:	f7ff fef9 	bl	52f0 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    54fe:	f06f 0404 	mvn.w	r4, #4
UART_NRF_UARTE_DEVICE(0);
    5502:	4620      	mov	r0, r4
    5504:	b007      	add	sp, #28
    5506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    550a:	7e33      	ldrb	r3, [r6, #24]
    550c:	00db      	lsls	r3, r3, #3
    550e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5512:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    5516:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    551a:	f505 7190 	add.w	r1, r5, #288	; 0x120
    551e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    5522:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    5526:	7e32      	ldrb	r2, [r6, #24]
    5528:	2301      	movs	r3, #1
    552a:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    552c:	4a18      	ldr	r2, [pc, #96]	; (5590 <uarte_0_init+0x114>)
    552e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5532:	2308      	movs	r3, #8
    5534:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    5538:	7a3b      	ldrb	r3, [r7, #8]
    553a:	b953      	cbnz	r3, 5552 <uarte_0_init+0xd6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    553c:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    5540:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5544:	6973      	ldr	r3, [r6, #20]
    5546:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    554a:	2301      	movs	r3, #1
    554c:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5550:	602b      	str	r3, [r5, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    5552:	687b      	ldr	r3, [r7, #4]
    5554:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    5556:	bf5c      	itt	pl
    5558:	f44f 7380 	movpl.w	r3, #256	; 0x100
    555c:	f8c5 3304 	strpl.w	r3, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5560:	687b      	ldr	r3, [r7, #4]
    5562:	06db      	lsls	r3, r3, #27
    5564:	bf44      	itt	mi
    5566:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    556a:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    556e:	6933      	ldr	r3, [r6, #16]
    5570:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5574:	2300      	movs	r3, #0
    5576:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    557a:	2301      	movs	r3, #1
    557c:	60ab      	str	r3, [r5, #8]
    557e:	60eb      	str	r3, [r5, #12]
UART_NRF_UARTE_DEVICE(0);
    5580:	e7bf      	b.n	5502 <uarte_0_init+0x86>
    5582:	bf00      	nop
    5584:	0bad0000 	.word	0x0bad0000
    5588:	0000c834 	.word	0x0000c834
    558c:	0000b1b0 	.word	0x0000b1b0
    5590:	4001f000 	.word	0x4001f000

00005594 <uarte_nrfx_poll_out>:
{
    5594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5596:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    5598:	6907      	ldr	r7, [r0, #16]
{
    559a:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    559c:	f005 fb5f 	bl	ac5e <k_is_in_isr>
    55a0:	b9b0      	cbnz	r0, 55d0 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    55a2:	4b2e      	ldr	r3, [pc, #184]	; (565c <uarte_nrfx_poll_out+0xc8>)
    55a4:	781b      	ldrb	r3, [r3, #0]
    55a6:	b19b      	cbz	r3, 55d0 <uarte_nrfx_poll_out+0x3c>
{
    55a8:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    55aa:	6860      	ldr	r0, [r4, #4]
    55ac:	f005 fa12 	bl	a9d4 <is_tx_ready.isra.0>
    55b0:	bb00      	cbnz	r0, 55f4 <uarte_nrfx_poll_out+0x60>
    55b2:	2001      	movs	r0, #1
    55b4:	f005 fa68 	bl	aa88 <nrfx_busy_wait>
    55b8:	3e01      	subs	r6, #1
    55ba:	d1f6      	bne.n	55aa <uarte_nrfx_poll_out+0x16>
    55bc:	2100      	movs	r1, #0
    55be:	2021      	movs	r0, #33	; 0x21
    55c0:	f003 fd20 	bl	9004 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    55c4:	e7f0      	b.n	55a8 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    55c6:	f386 8811 	msr	BASEPRI, r6
    55ca:	f3bf 8f6f 	isb	sy
}
    55ce:	e7f5      	b.n	55bc <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    55d0:	f04f 0320 	mov.w	r3, #32
    55d4:	f3ef 8611 	mrs	r6, BASEPRI
    55d8:	f383 8812 	msr	BASEPRI_MAX, r3
    55dc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    55e0:	6860      	ldr	r0, [r4, #4]
    55e2:	4631      	mov	r1, r6
    55e4:	f005 f9f6 	bl	a9d4 <is_tx_ready.isra.0>
    55e8:	b990      	cbnz	r0, 5610 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    55ea:	f386 8811 	msr	BASEPRI, r6
    55ee:	f3bf 8f6f 	isb	sy
}
    55f2:	e7ed      	b.n	55d0 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    55f4:	f04f 0320 	mov.w	r3, #32
    55f8:	f3ef 8611 	mrs	r6, BASEPRI
    55fc:	f383 8812 	msr	BASEPRI_MAX, r3
    5600:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5604:	6860      	ldr	r0, [r4, #4]
    5606:	4631      	mov	r1, r6
    5608:	f005 f9e4 	bl	a9d4 <is_tx_ready.isra.0>
    560c:	2800      	cmp	r0, #0
    560e:	d0da      	beq.n	55c6 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    5610:	693b      	ldr	r3, [r7, #16]
    5612:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    5614:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5616:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    5618:	6813      	ldr	r3, [r2, #0]
    561a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    561e:	2001      	movs	r0, #1
    5620:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5624:	2000      	movs	r0, #0
    5626:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    562a:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    562e:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5632:	6852      	ldr	r2, [r2, #4]
    5634:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    5638:	06d2      	lsls	r2, r2, #27
    563a:	d508      	bpl.n	564e <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    563c:	6862      	ldr	r2, [r4, #4]
    563e:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5640:	2008      	movs	r0, #8
    5642:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    5646:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    564a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    564e:	2201      	movs	r2, #1
    5650:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    5652:	f381 8811 	msr	BASEPRI, r1
    5656:	f3bf 8f6f 	isb	sy
}
    565a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    565c:	200011a5 	.word	0x200011a5

00005660 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    5660:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    5662:	490e      	ldr	r1, [pc, #56]	; (569c <sys_clock_timeout_handler+0x3c>)
    5664:	e9d1 3400 	ldrd	r3, r4, [r1]
    5668:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    566a:	18c3      	adds	r3, r0, r3
    566c:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    5670:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    5674:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5678:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    567c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5680:	d209      	bcs.n	5696 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5682:	4b07      	ldr	r3, [pc, #28]	; (56a0 <sys_clock_timeout_handler+0x40>)
    5684:	681b      	ldr	r3, [r3, #0]
    5686:	0a1a      	lsrs	r2, r3, #8
    5688:	061b      	lsls	r3, r3, #24
    568a:	199c      	adds	r4, r3, r6
    568c:	4b05      	ldr	r3, [pc, #20]	; (56a4 <sys_clock_timeout_handler+0x44>)
    568e:	f142 0500 	adc.w	r5, r2, #0
    5692:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    5696:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    5698:	f003 bfd8 	b.w	964c <sys_clock_announce>
    569c:	20000258 	.word	0x20000258
    56a0:	20000a64 	.word	0x20000a64
    56a4:	20000260 	.word	0x20000260

000056a8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    56a8:	4b0d      	ldr	r3, [pc, #52]	; (56e0 <z_nrf_rtc_timer_read+0x38>)
    56aa:	6818      	ldr	r0, [r3, #0]
    56ac:	0a01      	lsrs	r1, r0, #8
    56ae:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    56b0:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    56b4:	4b0b      	ldr	r3, [pc, #44]	; (56e4 <z_nrf_rtc_timer_read+0x3c>)
    56b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    56ba:	1818      	adds	r0, r3, r0
    56bc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    56c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    56c4:	d20a      	bcs.n	56dc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    56c6:	4b08      	ldr	r3, [pc, #32]	; (56e8 <z_nrf_rtc_timer_read+0x40>)
    56c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    56cc:	4290      	cmp	r0, r2
    56ce:	eb71 0303 	sbcs.w	r3, r1, r3
    56d2:	d203      	bcs.n	56dc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    56d4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    56d8:	f141 0100 	adc.w	r1, r1, #0
}
    56dc:	4770      	bx	lr
    56de:	bf00      	nop
    56e0:	20000a64 	.word	0x20000a64
    56e4:	40011000 	.word	0x40011000
    56e8:	20000260 	.word	0x20000260

000056ec <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    56ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    56f0:	4c2f      	ldr	r4, [pc, #188]	; (57b0 <rtc_nrf_isr+0xc4>)
    56f2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    56f6:	0799      	lsls	r1, r3, #30
    56f8:	d50b      	bpl.n	5712 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    56fa:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    56fe:	b143      	cbz	r3, 5712 <rtc_nrf_isr+0x26>
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    5700:	4a2c      	ldr	r2, [pc, #176]	; (57b4 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5702:	2300      	movs	r3, #0
    5704:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    5708:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    570c:	6813      	ldr	r3, [r2, #0]
    570e:	3301      	adds	r3, #1
    5710:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    5712:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5716:	03da      	lsls	r2, r3, #15
    5718:	d52a      	bpl.n	5770 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    571a:	f3bf 8f5b 	dmb	ish
    571e:	4b26      	ldr	r3, [pc, #152]	; (57b8 <rtc_nrf_isr+0xcc>)
    5720:	e853 2f00 	ldrex	r2, [r3]
    5724:	f022 0101 	bic.w	r1, r2, #1
    5728:	e843 1000 	strex	r0, r1, [r3]
    572c:	2800      	cmp	r0, #0
    572e:	d1f7      	bne.n	5720 <rtc_nrf_isr+0x34>
    5730:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    5734:	07d3      	lsls	r3, r2, #31
    5736:	d402      	bmi.n	573e <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5738:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    573c:	b1c3      	cbz	r3, 5770 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    573e:	2500      	movs	r5, #0
    5740:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    5744:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    5748:	f7ff ffae 	bl	56a8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    574c:	f04f 0320 	mov.w	r3, #32
    5750:	f3ef 8211 	mrs	r2, BASEPRI
    5754:	f383 8812 	msr	BASEPRI_MAX, r3
    5758:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    575c:	4b17      	ldr	r3, [pc, #92]	; (57bc <rtc_nrf_isr+0xd0>)
    575e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    5762:	42b0      	cmp	r0, r6
    5764:	41b9      	sbcs	r1, r7
    5766:	d206      	bcs.n	5776 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    5768:	f382 8811 	msr	BASEPRI, r2
    576c:	f3bf 8f6f 	isb	sy
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
    5770:	b003      	add	sp, #12
    5772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5776:	f04f 38ff 	mov.w	r8, #4294967295
    577a:	f04f 39ff 	mov.w	r9, #4294967295
    577e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    5782:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    5786:	601d      	str	r5, [r3, #0]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    5788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    578c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5790:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    5794:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5798:	f382 8811 	msr	BASEPRI, r2
    579c:	f3bf 8f6f 	isb	sy
		if (handler) {
    57a0:	2900      	cmp	r1, #0
    57a2:	d0e5      	beq.n	5770 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    57a4:	9000      	str	r0, [sp, #0]
    57a6:	4632      	mov	r2, r6
    57a8:	463b      	mov	r3, r7
    57aa:	4628      	mov	r0, r5
    57ac:	4788      	blx	r1
    57ae:	e7df      	b.n	5770 <rtc_nrf_isr+0x84>
    57b0:	40011000 	.word	0x40011000
    57b4:	20000a64 	.word	0x20000a64
    57b8:	20000a5c 	.word	0x20000a5c
    57bc:	20000248 	.word	0x20000248

000057c0 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
    57c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57c4:	4d4b      	ldr	r5, [pc, #300]	; (58f4 <compare_set.constprop.0.isra.0+0x134>)
    57c6:	f3bf 8f5b 	dmb	ish
    57ca:	4606      	mov	r6, r0
    57cc:	460f      	mov	r7, r1
    57ce:	e855 8f00 	ldrex	r8, [r5]
    57d2:	f028 0301 	bic.w	r3, r8, #1
    57d6:	e845 3200 	strex	r2, r3, [r5]
    57da:	2a00      	cmp	r2, #0
    57dc:	d1f7      	bne.n	57ce <compare_set.constprop.0.isra.0+0xe>
    57de:	f3bf 8f5b 	dmb	ish
    p_reg->INTENCLR = mask;
    57e2:	4c45      	ldr	r4, [pc, #276]	; (58f8 <compare_set.constprop.0.isra.0+0x138>)
    57e4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    57e8:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    57ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    57f0:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
    57f4:	f7ff ff58 	bl	56a8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    57f8:	42b0      	cmp	r0, r6
    57fa:	eb71 0307 	sbcs.w	r3, r1, r7
	return prev & BIT(chan);
    57fe:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
    5802:	d240      	bcs.n	5886 <compare_set.constprop.0.isra.0+0xc6>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    5804:	4b3d      	ldr	r3, [pc, #244]	; (58fc <compare_set.constprop.0.isra.0+0x13c>)
    5806:	1a30      	subs	r0, r6, r0
    5808:	eb67 0101 	sbc.w	r1, r7, r1
    580c:	4298      	cmp	r0, r3
    580e:	f171 0100 	sbcs.w	r1, r1, #0
    5812:	d24c      	bcs.n	58ae <compare_set.constprop.0.isra.0+0xee>
		if (target_time != cc_data[chan].target_time) {
    5814:	4b3a      	ldr	r3, [pc, #232]	; (5900 <compare_set.constprop.0.isra.0+0x140>)
    5816:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    581a:	429f      	cmp	r7, r3
    581c:	bf08      	it	eq
    581e:	4296      	cmpeq	r6, r2
    5820:	d03e      	beq.n	58a0 <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5822:	f04f 0c00 	mov.w	ip, #0
    p_reg->EVTENCLR = mask;
    5826:	f8c4 9348 	str.w	r9, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    582a:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
	return absolute_time & COUNTER_MAX;
    582e:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    5832:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    5836:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 5904 <compare_set.constprop.0.isra.0+0x144>
	uint32_t cc_val = req_cc;
    583a:	4683      	mov	fp, r0
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    583c:	2103      	movs	r1, #3
	return (a - b) & COUNTER_MAX;
    583e:	f06f 0e02 	mvn.w	lr, #2
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5842:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    5846:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
    584a:	f8c4 9344 	str.w	r9, [r4, #836]	; 0x344
     return p_reg->COUNTER;
    584e:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5852:	ebae 0302 	sub.w	r3, lr, r2
    5856:	445b      	add	r3, fp
    5858:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    585c:	4553      	cmp	r3, sl
    585e:	d91f      	bls.n	58a0 <compare_set.constprop.0.isra.0+0xe0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5860:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			if (event_check(chan)) {
    5864:	b15b      	cbz	r3, 587e <compare_set.constprop.0.isra.0+0xbe>
     return p_reg->COUNTER;
    5866:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    586a:	1a13      	subs	r3, r2, r0
    586c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    5870:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    5874:	d914      	bls.n	58a0 <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5876:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
    587a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			cc_val = now + cc_inc;
    587e:	eb01 0b02 	add.w	fp, r1, r2
			cc_inc++;
    5882:	3101      	adds	r1, #1
	for (;;) {
    5884:	e7dd      	b.n	5842 <compare_set.constprop.0.isra.0+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5886:	4b20      	ldr	r3, [pc, #128]	; (5908 <compare_set.constprop.0.isra.0+0x148>)
    5888:	f3bf 8f5b 	dmb	ish
    588c:	e853 1f00 	ldrex	r1, [r3]
    5890:	f041 0101 	orr.w	r1, r1, #1
    5894:	e843 1200 	strex	r2, r1, [r3]
    5898:	2a00      	cmp	r2, #0
    589a:	d1f7      	bne.n	588c <compare_set.constprop.0.isra.0+0xcc>
    589c:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    58a0:	4b17      	ldr	r3, [pc, #92]	; (5900 <compare_set.constprop.0.isra.0+0x140>)
	cc_data[chan].callback = handler;
    58a2:	4a1a      	ldr	r2, [pc, #104]	; (590c <compare_set.constprop.0.isra.0+0x14c>)
    58a4:	601a      	str	r2, [r3, #0]
	cc_data[chan].target_time = target_time;
    58a6:	e9c3 6702 	strd	r6, r7, [r3, #8]
	cc_data[chan].user_context = user_data;
    58aa:	2200      	movs	r2, #0
    58ac:	605a      	str	r2, [r3, #4]
	if (key) {
    58ae:	f1b8 0f00 	cmp.w	r8, #0
    58b2:	d01c      	beq.n	58ee <compare_set.constprop.0.isra.0+0x12e>
    58b4:	f3bf 8f5b 	dmb	ish
    58b8:	e855 3f00 	ldrex	r3, [r5]
    58bc:	f043 0301 	orr.w	r3, r3, #1
    58c0:	e845 3200 	strex	r2, r3, [r5]
    58c4:	2a00      	cmp	r2, #0
    58c6:	d1f7      	bne.n	58b8 <compare_set.constprop.0.isra.0+0xf8>
    58c8:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    58cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    58d0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    58d4:	4b0c      	ldr	r3, [pc, #48]	; (5908 <compare_set.constprop.0.isra.0+0x148>)
    58d6:	f3bf 8f5b 	dmb	ish
    58da:	681b      	ldr	r3, [r3, #0]
    58dc:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    58e0:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    58e2:	bf42      	ittt	mi
    58e4:	4b0a      	ldrmi	r3, [pc, #40]	; (5910 <compare_set.constprop.0.isra.0+0x150>)
    58e6:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    58ea:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    58ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58f2:	bf00      	nop
    58f4:	20000a60 	.word	0x20000a60
    58f8:	40011000 	.word	0x40011000
    58fc:	00800001 	.word	0x00800001
    5900:	20000248 	.word	0x20000248
    5904:	007ffffd 	.word	0x007ffffd
    5908:	20000a5c 	.word	0x20000a5c
    590c:	00005661 	.word	0x00005661
    5910:	e000e100 	.word	0xe000e100

00005914 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    5914:	b570      	push	{r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    5916:	4c19      	ldr	r4, [pc, #100]	; (597c <sys_clock_driver_init+0x68>)
    5918:	4b19      	ldr	r3, [pc, #100]	; (5980 <sys_clock_driver_init+0x6c>)
    591a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    591e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    5922:	4b18      	ldr	r3, [pc, #96]	; (5984 <sys_clock_driver_init+0x70>)
    p_reg->PRESCALER = val;
    5924:	2500      	movs	r5, #0
    5926:	f04f 30ff 	mov.w	r0, #4294967295
    592a:	f04f 31ff 	mov.w	r1, #4294967295
    592e:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    5932:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    5936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    593a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    593e:	4b12      	ldr	r3, [pc, #72]	; (5988 <sys_clock_driver_init+0x74>)
    5940:	2602      	movs	r6, #2
    5942:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5946:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    594a:	2101      	movs	r1, #1
    594c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    5950:	2011      	movs	r0, #17
    5952:	462a      	mov	r2, r5
    5954:	f7fd fdfa 	bl	354c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5958:	2011      	movs	r0, #17
    595a:	f7fd fdc7 	bl	34ec <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    595e:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5960:	4a0a      	ldr	r2, [pc, #40]	; (598c <sys_clock_driver_init+0x78>)
    5962:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5964:	2100      	movs	r1, #0
    5966:	6023      	str	r3, [r4, #0]
    5968:	4809      	ldr	r0, [pc, #36]	; (5990 <sys_clock_driver_init+0x7c>)
	int_mask = BIT_MASK(CHAN_COUNT);
    596a:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    596c:	f7ff ff28 	bl	57c0 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
    5970:	4630      	mov	r0, r6
    5972:	f7ff f85b 	bl	4a2c <z_nrf_clock_control_lf_on>

	return 0;
}
    5976:	4628      	mov	r0, r5
    5978:	bd70      	pop	{r4, r5, r6, pc}
    597a:	bf00      	nop
    597c:	40011000 	.word	0x40011000
    5980:	000f0003 	.word	0x000f0003
    5984:	20000248 	.word	0x20000248
    5988:	e000e100 	.word	0xe000e100
    598c:	20000a60 	.word	0x20000a60
    5990:	007fffff 	.word	0x007fffff

00005994 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    5994:	1c43      	adds	r3, r0, #1
{
    5996:	b510      	push	{r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    5998:	d01d      	beq.n	59d6 <sys_clock_set_timeout+0x42>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    599a:	2801      	cmp	r0, #1
    599c:	dd1d      	ble.n	59da <sys_clock_set_timeout+0x46>
    599e:	4a10      	ldr	r2, [pc, #64]	; (59e0 <sys_clock_set_timeout+0x4c>)
    59a0:	4b10      	ldr	r3, [pc, #64]	; (59e4 <sys_clock_set_timeout+0x50>)
    59a2:	4290      	cmp	r0, r2
    59a4:	bfd4      	ite	le
    59a6:	4604      	movle	r4, r0
    59a8:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    59aa:	f7ff fe7d 	bl	56a8 <z_nrf_rtc_timer_read>
    59ae:	4a0e      	ldr	r2, [pc, #56]	; (59e8 <sys_clock_set_timeout+0x54>)
    59b0:	e9d2 3100 	ldrd	r3, r1, [r2]
    59b4:	1ac0      	subs	r0, r0, r3
		cyc = 0;
    59b6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    59ba:	4a0a      	ldr	r2, [pc, #40]	; (59e4 <sys_clock_set_timeout+0x50>)
		cyc = 0;
    59bc:	bf28      	it	cs
    59be:	2400      	movcs	r4, #0
	cyc += unannounced;
    59c0:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    59c2:	4294      	cmp	r4, r2
    59c4:	bf28      	it	cs
    59c6:	4614      	movcs	r4, r2
	uint64_t target_time = cyc + last_count;
    59c8:	18e0      	adds	r0, r4, r3
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    59ca:	f141 0100 	adc.w	r1, r1, #0
}
    59ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    59d2:	f7ff bef5 	b.w	57c0 <compare_set.constprop.0.isra.0>
		cyc = MAX_TICKS * CYC_PER_TICK;
    59d6:	4c03      	ldr	r4, [pc, #12]	; (59e4 <sys_clock_set_timeout+0x50>)
    59d8:	e7e7      	b.n	59aa <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    59da:	2401      	movs	r4, #1
    59dc:	e7e5      	b.n	59aa <sys_clock_set_timeout+0x16>
    59de:	bf00      	nop
    59e0:	007ffffe 	.word	0x007ffffe
    59e4:	007fffff 	.word	0x007fffff
    59e8:	20000258 	.word	0x20000258

000059ec <sys_clock_elapsed>:
{
    59ec:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    59ee:	f7ff fe5b 	bl	56a8 <z_nrf_rtc_timer_read>
    59f2:	4b02      	ldr	r3, [pc, #8]	; (59fc <sys_clock_elapsed+0x10>)
    59f4:	681b      	ldr	r3, [r3, #0]
}
    59f6:	1ac0      	subs	r0, r0, r3
    59f8:	bd08      	pop	{r3, pc}
    59fa:	bf00      	nop
    59fc:	20000258 	.word	0x20000258

00005a00 <sys_clock_disable>:
{
    5a00:	b510      	push	{r4, lr}
    5a02:	4c08      	ldr	r4, [pc, #32]	; (5a24 <sys_clock_disable+0x24>)
    5a04:	2301      	movs	r3, #1
    5a06:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
    5a08:	2011      	movs	r0, #17
    5a0a:	f7fd fd7d 	bl	3508 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    5a0e:	4b06      	ldr	r3, [pc, #24]	; (5a28 <sys_clock_disable+0x28>)
    5a10:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    5a14:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    5a18:	4b04      	ldr	r3, [pc, #16]	; (5a2c <sys_clock_disable+0x2c>)
    5a1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5a1e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    5a22:	bd10      	pop	{r4, pc}
    5a24:	40011000 	.word	0x40011000
    5a28:	000f0003 	.word	0x000f0003
    5a2c:	e000e100 	.word	0xe000e100

00005a30 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    5a30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    5a32:	ab0b      	add	r3, sp, #44	; 0x2c
    5a34:	9305      	str	r3, [sp, #20]
    5a36:	9303      	str	r3, [sp, #12]
    5a38:	4b05      	ldr	r3, [pc, #20]	; (5a50 <z_log_msg_runtime_create.constprop.0+0x20>)
    5a3a:	9302      	str	r3, [sp, #8]
    5a3c:	2300      	movs	r3, #0
    5a3e:	e9cd 3300 	strd	r3, r3, [sp]
    5a42:	2201      	movs	r2, #1
    5a44:	4618      	mov	r0, r3
    5a46:	f7fc ff79 	bl	293c <z_impl_z_log_msg_runtime_vcreate>
}
    5a4a:	b007      	add	sp, #28
    5a4c:	f85d fb04 	ldr.w	pc, [sp], #4
    5a50:	0000c871 	.word	0x0000c871

00005a54 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    5a56:	f7fc febb 	bl	27d0 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    5a5a:	2400      	movs	r4, #0
    5a5c:	4b06      	ldr	r3, [pc, #24]	; (5a78 <k_sys_fatal_error_handler+0x24>)
    5a5e:	9302      	str	r3, [sp, #8]
    5a60:	4620      	mov	r0, r4
    5a62:	e9cd 4400 	strd	r4, r4, [sp]
    5a66:	4905      	ldr	r1, [pc, #20]	; (5a7c <k_sys_fatal_error_handler+0x28>)
    5a68:	4623      	mov	r3, r4
    5a6a:	2201      	movs	r2, #1
    5a6c:	f7ff ffe0 	bl	5a30 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
    5a70:	4620      	mov	r0, r4
    5a72:	f7fe fbef 	bl	4254 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    5a76:	bf00      	nop
    5a78:	0000c871 	.word	0x0000c871
    5a7c:	0000b168 	.word	0x0000b168

00005a80 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5a80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5a84:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    5a88:	2a08      	cmp	r2, #8
    5a8a:	d106      	bne.n	5a9a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5a8c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    5a90:	2b05      	cmp	r3, #5
    5a92:	d802      	bhi.n	5a9a <nrf52_errata_103+0x1a>
    5a94:	4a02      	ldr	r2, [pc, #8]	; (5aa0 <nrf52_errata_103+0x20>)
    5a96:	5cd0      	ldrb	r0, [r2, r3]
    5a98:	4770      	bx	lr
                        return false;
    5a9a:	2000      	movs	r0, #0
}
    5a9c:	4770      	bx	lr
    5a9e:	bf00      	nop
    5aa0:	0000c894 	.word	0x0000c894

00005aa4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5aa4:	4a02      	ldr	r2, [pc, #8]	; (5ab0 <nvmc_wait+0xc>)
    5aa6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    5aaa:	2b00      	cmp	r3, #0
    5aac:	d0fb      	beq.n	5aa6 <nvmc_wait+0x2>
}
    5aae:	4770      	bx	lr
    5ab0:	4001e000 	.word	0x4001e000

00005ab4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    5ab4:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5ab6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5aba:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    5abe:	2a08      	cmp	r2, #8
    5ac0:	d14e      	bne.n	5b60 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    5ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5ac6:	2100      	movs	r1, #0
    5ac8:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    5acc:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    5ad0:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    5ad4:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    5ad8:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    5adc:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5ae0:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    5ae4:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5ae8:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    5aec:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5af0:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    5af4:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5af8:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    5afc:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5b00:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    5b04:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5b08:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    5b0c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5b10:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    5b14:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5b18:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    5b1c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5b20:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    5b24:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5b28:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    5b2c:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5b30:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    5b34:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5b38:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    5b3c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5b40:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    5b44:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5b48:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    5b4c:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5b50:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    5b54:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5b58:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    5b5c:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5b60:	f7ff ff8e 	bl	5a80 <nrf52_errata_103>
    5b64:	b118      	cbz	r0, 5b6e <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5b66:	4b3a      	ldr	r3, [pc, #232]	; (5c50 <SystemInit+0x19c>)
    5b68:	4a3a      	ldr	r2, [pc, #232]	; (5c54 <SystemInit+0x1a0>)
    5b6a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5b6e:	f7ff ff87 	bl	5a80 <nrf52_errata_103>
    5b72:	b118      	cbz	r0, 5b7c <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5b74:	4b38      	ldr	r3, [pc, #224]	; (5c58 <SystemInit+0x1a4>)
    5b76:	22fb      	movs	r2, #251	; 0xfb
    5b78:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5b7c:	f7ff ff80 	bl	5a80 <nrf52_errata_103>
    5b80:	b170      	cbz	r0, 5ba0 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5b82:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5b86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5b8a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    5b8e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    5b92:	f022 020f 	bic.w	r2, r2, #15
    5b96:	f003 030f 	and.w	r3, r3, #15
    5b9a:	4313      	orrs	r3, r2
    5b9c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5ba0:	f7ff ff6e 	bl	5a80 <nrf52_errata_103>
    5ba4:	b120      	cbz	r0, 5bb0 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5ba6:	4b2d      	ldr	r3, [pc, #180]	; (5c5c <SystemInit+0x1a8>)
    5ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
    5bac:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5bb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5bb4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    5bb8:	2b08      	cmp	r3, #8
    5bba:	d11a      	bne.n	5bf2 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5bbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5bc0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    5bc4:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5bc6:	bf44      	itt	mi
    5bc8:	f06f 0201 	mvnmi.w	r2, #1
    5bcc:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5bd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5bd4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    5bd8:	2b05      	cmp	r3, #5
    5bda:	d802      	bhi.n	5be2 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    5bdc:	4a20      	ldr	r2, [pc, #128]	; (5c60 <SystemInit+0x1ac>)
    5bde:	5cd3      	ldrb	r3, [r2, r3]
    5be0:	b13b      	cbz	r3, 5bf2 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5be2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5be6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5bea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5bee:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5bf2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5bf6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    5bfa:	2a00      	cmp	r2, #0
    5bfc:	db03      	blt.n	5c06 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5bfe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5c02:	2b00      	cmp	r3, #0
    5c04:	da22      	bge.n	5c4c <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5c06:	4917      	ldr	r1, [pc, #92]	; (5c64 <SystemInit+0x1b0>)
    5c08:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5c0a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5c0e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5c12:	2412      	movs	r4, #18
    nvmc_wait();
    5c14:	f7ff ff46 	bl	5aa4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5c18:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    5c1c:	f7ff ff42 	bl	5aa4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5c20:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    5c24:	f7ff ff3e 	bl	5aa4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5c28:	2300      	movs	r3, #0
    5c2a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    5c2e:	f7ff ff39 	bl	5aa4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    5c32:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5c36:	490c      	ldr	r1, [pc, #48]	; (5c68 <SystemInit+0x1b4>)
    5c38:	4b0c      	ldr	r3, [pc, #48]	; (5c6c <SystemInit+0x1b8>)
    5c3a:	68ca      	ldr	r2, [r1, #12]
    5c3c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5c40:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5c42:	60cb      	str	r3, [r1, #12]
    5c44:	f3bf 8f4f 	dsb	sy
    __NOP();
    5c48:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5c4a:	e7fd      	b.n	5c48 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    5c4c:	bd10      	pop	{r4, pc}
    5c4e:	bf00      	nop
    5c50:	40005000 	.word	0x40005000
    5c54:	00038148 	.word	0x00038148
    5c58:	4000f000 	.word	0x4000f000
    5c5c:	40029000 	.word	0x40029000
    5c60:	0000c88e 	.word	0x0000c88e
    5c64:	4001e000 	.word	0x4001e000
    5c68:	e000ed00 	.word	0xe000ed00
    5c6c:	05fa0004 	.word	0x05fa0004

00005c70 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    5c70:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    5c72:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    5c74:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5c76:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    5c7a:	fab2 f382 	clz	r3, r2
    5c7e:	f1c3 031f 	rsb	r3, r3, #31
    5c82:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    5c84:	fa05 f403 	lsl.w	r4, r5, r3
    5c88:	ea22 0404 	bic.w	r4, r2, r4
    5c8c:	e850 6f00 	ldrex	r6, [r0]
    5c90:	4296      	cmp	r6, r2
    5c92:	d104      	bne.n	5c9e <nrfx_flag32_alloc+0x2e>
    5c94:	e840 4c00 	strex	ip, r4, [r0]
    5c98:	f1bc 0f00 	cmp.w	ip, #0
    5c9c:	d1f6      	bne.n	5c8c <nrfx_flag32_alloc+0x1c>
    5c9e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5ca2:	d1e7      	bne.n	5c74 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    5ca4:	4801      	ldr	r0, [pc, #4]	; (5cac <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    5ca6:	700b      	strb	r3, [r1, #0]
}
    5ca8:	bd70      	pop	{r4, r5, r6, pc}
    5caa:	bf00      	nop
    5cac:	0bad0000 	.word	0x0bad0000

00005cb0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    5cb0:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    5cb2:	6803      	ldr	r3, [r0, #0]
    5cb4:	40cb      	lsrs	r3, r1
    5cb6:	07db      	lsls	r3, r3, #31
    5cb8:	d414      	bmi.n	5ce4 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    5cba:	2301      	movs	r3, #1
    5cbc:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    5cbe:	6802      	ldr	r2, [r0, #0]
    5cc0:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    5cc4:	ea43 0102 	orr.w	r1, r3, r2
    5cc8:	e850 4f00 	ldrex	r4, [r0]
    5ccc:	4294      	cmp	r4, r2
    5cce:	d104      	bne.n	5cda <nrfx_flag32_free+0x2a>
    5cd0:	e840 1c00 	strex	ip, r1, [r0]
    5cd4:	f1bc 0f00 	cmp.w	ip, #0
    5cd8:	d1f6      	bne.n	5cc8 <nrfx_flag32_free+0x18>
    5cda:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5cde:	d1ee      	bne.n	5cbe <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    5ce0:	4801      	ldr	r0, [pc, #4]	; (5ce8 <nrfx_flag32_free+0x38>)
}
    5ce2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5ce4:	4801      	ldr	r0, [pc, #4]	; (5cec <nrfx_flag32_free+0x3c>)
    5ce6:	e7fc      	b.n	5ce2 <nrfx_flag32_free+0x32>
    5ce8:	0bad0000 	.word	0x0bad0000
    5cec:	0bad0004 	.word	0x0bad0004

00005cf0 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    5cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5cf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    switch (domain)
    5cf6:	4604      	mov	r4, r0
    5cf8:	b158      	cbz	r0, 5d12 <clock_stop+0x22>
    5cfa:	2801      	cmp	r0, #1
    5cfc:	d028      	beq.n	5d50 <clock_stop+0x60>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5cfe:	4936      	ldr	r1, [pc, #216]	; (5dd8 <clock_stop+0xe8>)
    5d00:	4836      	ldr	r0, [pc, #216]	; (5ddc <clock_stop+0xec>)
    5d02:	4a37      	ldr	r2, [pc, #220]	; (5de0 <clock_stop+0xf0>)
    5d04:	23d8      	movs	r3, #216	; 0xd8
    5d06:	f004 fbde 	bl	a4c6 <assert_print>
    5d0a:	4835      	ldr	r0, [pc, #212]	; (5de0 <clock_stop+0xf0>)
    5d0c:	21d8      	movs	r1, #216	; 0xd8
            NRFX_ASSERT(0);
    5d0e:	f004 fbd3 	bl	a4b8 <assert_post_action>
    p_reg->INTENCLR = mask;
    5d12:	2202      	movs	r2, #2
    5d14:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d18:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    5d1c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d20:	2201      	movs	r2, #1
    5d22:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5d24:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    5d26:	2301      	movs	r3, #1
    5d28:	f88d 3007 	strb.w	r3, [sp, #7]
    5d2c:	f242 7510 	movw	r5, #10000	; 0x2710
    5d30:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    5d34:	b1bc      	cbz	r4, 5d66 <clock_stop+0x76>
    5d36:	2c01      	cmp	r4, #1
    5d38:	d035      	beq.n	5da6 <clock_stop+0xb6>
            NRFX_ASSERT(0);
    5d3a:	4927      	ldr	r1, [pc, #156]	; (5dd8 <clock_stop+0xe8>)
    5d3c:	4827      	ldr	r0, [pc, #156]	; (5ddc <clock_stop+0xec>)
    5d3e:	4a29      	ldr	r2, [pc, #164]	; (5de4 <clock_stop+0xf4>)
    5d40:	f240 3347 	movw	r3, #839	; 0x347
    5d44:	f004 fbbf 	bl	a4c6 <assert_print>
    5d48:	4826      	ldr	r0, [pc, #152]	; (5de4 <clock_stop+0xf4>)
    5d4a:	f240 3147 	movw	r1, #839	; 0x347
    5d4e:	e7de      	b.n	5d0e <clock_stop+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d50:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    5d52:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d56:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5d5a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d5e:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5d60:	f10d 0707 	add.w	r7, sp, #7
    5d64:	e7df      	b.n	5d26 <clock_stop+0x36>
            if (p_clk_src != NULL)
    5d66:	b19f      	cbz	r7, 5d90 <clock_stop+0xa0>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5d68:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5d6c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5d70:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5d72:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    5d76:	03d8      	lsls	r0, r3, #15
    5d78:	d513      	bpl.n	5da2 <clock_stop+0xb2>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5d7a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    5d7e:	2801      	cmp	r0, #1
    5d80:	d103      	bne.n	5d8a <clock_stop+0x9a>
    5d82:	f004 fe81 	bl	aa88 <nrfx_busy_wait>
    5d86:	3d01      	subs	r5, #1
    5d88:	d1d4      	bne.n	5d34 <clock_stop+0x44>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5d8a:	2c01      	cmp	r4, #1
    5d8c:	d109      	bne.n	5da2 <clock_stop+0xb2>
    5d8e:	e014      	b.n	5dba <clock_stop+0xca>
    5d90:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    5d94:	03d9      	lsls	r1, r3, #15
    5d96:	d504      	bpl.n	5da2 <clock_stop+0xb2>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5d98:	2001      	movs	r0, #1
    5d9a:	f004 fe75 	bl	aa88 <nrfx_busy_wait>
    5d9e:	3d01      	subs	r5, #1
    5da0:	d1f6      	bne.n	5d90 <clock_stop+0xa0>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5da2:	b003      	add	sp, #12
    5da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
    5da6:	b167      	cbz	r7, 5dc2 <clock_stop+0xd2>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5da8:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    5dac:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5db0:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5db2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    5db6:	03da      	lsls	r2, r3, #15
    5db8:	d4df      	bmi.n	5d7a <clock_stop+0x8a>
            m_clock_cb.hfclk_started = false;
    5dba:	4b0b      	ldr	r3, [pc, #44]	; (5de8 <clock_stop+0xf8>)
    5dbc:	2200      	movs	r2, #0
    5dbe:	715a      	strb	r2, [r3, #5]
    5dc0:	e7ef      	b.n	5da2 <clock_stop+0xb2>
    5dc2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    5dc6:	03db      	lsls	r3, r3, #15
    5dc8:	d5f7      	bpl.n	5dba <clock_stop+0xca>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5dca:	2001      	movs	r0, #1
    5dcc:	f004 fe5c 	bl	aa88 <nrfx_busy_wait>
    5dd0:	3d01      	subs	r5, #1
    5dd2:	d1f6      	bne.n	5dc2 <clock_stop+0xd2>
    5dd4:	e7f1      	b.n	5dba <clock_stop+0xca>
    5dd6:	bf00      	nop
    5dd8:	0000c9f6 	.word	0x0000c9f6
    5ddc:	0000b53f 	.word	0x0000b53f
    5de0:	0000c89a 	.word	0x0000c89a
    5de4:	0000c8d7 	.word	0x0000c8d7
    5de8:	20000a68 	.word	0x20000a68

00005dec <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    5dec:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
    5dee:	b958      	cbnz	r0, 5e08 <nrfx_clock_init+0x1c>
    5df0:	490a      	ldr	r1, [pc, #40]	; (5e1c <nrfx_clock_init+0x30>)
    5df2:	480b      	ldr	r0, [pc, #44]	; (5e20 <nrfx_clock_init+0x34>)
    5df4:	4a0b      	ldr	r2, [pc, #44]	; (5e24 <nrfx_clock_init+0x38>)
    5df6:	f240 1315 	movw	r3, #277	; 0x115
    5dfa:	f004 fb64 	bl	a4c6 <assert_print>
    5dfe:	4809      	ldr	r0, [pc, #36]	; (5e24 <nrfx_clock_init+0x38>)
    5e00:	f240 1115 	movw	r1, #277	; 0x115
    5e04:	f004 fb58 	bl	a4b8 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5e08:	4b07      	ldr	r3, [pc, #28]	; (5e28 <nrfx_clock_init+0x3c>)
    5e0a:	791a      	ldrb	r2, [r3, #4]
    5e0c:	b922      	cbnz	r2, 5e18 <nrfx_clock_init+0x2c>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    5e0e:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5e10:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    5e12:	4806      	ldr	r0, [pc, #24]	; (5e2c <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
    5e14:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5e16:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5e18:	4805      	ldr	r0, [pc, #20]	; (5e30 <nrfx_clock_init+0x44>)
    return err_code;
    5e1a:	e7fc      	b.n	5e16 <nrfx_clock_init+0x2a>
    5e1c:	0000c90b 	.word	0x0000c90b
    5e20:	0000b53f 	.word	0x0000b53f
    5e24:	0000c89a 	.word	0x0000c89a
    5e28:	20000a68 	.word	0x20000a68
    5e2c:	0bad0000 	.word	0x0bad0000
    5e30:	0bad000c 	.word	0x0bad000c

00005e34 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5e34:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5e36:	4b0d      	ldr	r3, [pc, #52]	; (5e6c <nrfx_clock_enable+0x38>)
    5e38:	791b      	ldrb	r3, [r3, #4]
    5e3a:	b95b      	cbnz	r3, 5e54 <nrfx_clock_enable+0x20>
    5e3c:	490c      	ldr	r1, [pc, #48]	; (5e70 <nrfx_clock_enable+0x3c>)
    5e3e:	480d      	ldr	r0, [pc, #52]	; (5e74 <nrfx_clock_enable+0x40>)
    5e40:	4a0d      	ldr	r2, [pc, #52]	; (5e78 <nrfx_clock_enable+0x44>)
    5e42:	f44f 7397 	mov.w	r3, #302	; 0x12e
    5e46:	f004 fb3e 	bl	a4c6 <assert_print>
    5e4a:	480b      	ldr	r0, [pc, #44]	; (5e78 <nrfx_clock_enable+0x44>)
    5e4c:	f44f 7197 	mov.w	r1, #302	; 0x12e
    5e50:	f004 fb32 	bl	a4b8 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5e54:	2000      	movs	r0, #0
    5e56:	f7fd fb6b 	bl	3530 <arch_irq_is_enabled>
    5e5a:	b908      	cbnz	r0, 5e60 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5e5c:	f7fd fb46 	bl	34ec <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e64:	2200      	movs	r2, #0
    5e66:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5e6a:	bd08      	pop	{r3, pc}
    5e6c:	20000a68 	.word	0x20000a68
    5e70:	0000c919 	.word	0x0000c919
    5e74:	0000b53f 	.word	0x0000b53f
    5e78:	0000c89a 	.word	0x0000c89a

00005e7c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    5e7c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5e7e:	4b29      	ldr	r3, [pc, #164]	; (5f24 <nrfx_clock_start+0xa8>)
    5e80:	791b      	ldrb	r3, [r3, #4]
    5e82:	b95b      	cbnz	r3, 5e9c <nrfx_clock_start+0x20>
    5e84:	4928      	ldr	r1, [pc, #160]	; (5f28 <nrfx_clock_start+0xac>)
    5e86:	4a29      	ldr	r2, [pc, #164]	; (5f2c <nrfx_clock_start+0xb0>)
    5e88:	4829      	ldr	r0, [pc, #164]	; (5f30 <nrfx_clock_start+0xb4>)
    5e8a:	f44f 73b4 	mov.w	r3, #360	; 0x168
    5e8e:	f004 fb1a 	bl	a4c6 <assert_print>
    5e92:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5e96:	4825      	ldr	r0, [pc, #148]	; (5f2c <nrfx_clock_start+0xb0>)
    5e98:	f004 fb0e 	bl	a4b8 <assert_post_action>
    switch (domain)
    5e9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ea0:	b158      	cbz	r0, 5eba <nrfx_clock_start+0x3e>
    5ea2:	2801      	cmp	r0, #1
    5ea4:	d034      	beq.n	5f10 <nrfx_clock_start+0x94>
            NRFX_ASSERT(0);
    5ea6:	4923      	ldr	r1, [pc, #140]	; (5f34 <nrfx_clock_start+0xb8>)
    5ea8:	4a20      	ldr	r2, [pc, #128]	; (5f2c <nrfx_clock_start+0xb0>)
    5eaa:	4821      	ldr	r0, [pc, #132]	; (5f30 <nrfx_clock_start+0xb4>)
    5eac:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    5eb0:	f004 fb09 	bl	a4c6 <assert_print>
    5eb4:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    5eb8:	e7ed      	b.n	5e96 <nrfx_clock_start+0x1a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5eba:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5ebe:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    5ec2:	03c8      	lsls	r0, r1, #15
    5ec4:	d512      	bpl.n	5eec <nrfx_clock_start+0x70>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5ec6:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    5eca:	2b01      	cmp	r3, #1
    5ecc:	d11a      	bne.n	5f04 <nrfx_clock_start+0x88>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5ed2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ed6:	2300      	movs	r3, #0
    5ed8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    5edc:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    5ee0:	2302      	movs	r3, #2
    5ee2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ee6:	2301      	movs	r3, #1
    5ee8:	6093      	str	r3, [r2, #8]
}
    5eea:	e00a      	b.n	5f02 <nrfx_clock_start+0x86>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    5eec:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    5ef0:	07d1      	lsls	r1, r2, #31
    5ef2:	d50b      	bpl.n	5f0c <nrfx_clock_start+0x90>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5ef4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    5ef8:	0792      	lsls	r2, r2, #30
    5efa:	d404      	bmi.n	5f06 <nrfx_clock_start+0x8a>
    p_reg->INTENSET = mask;
    5efc:	2202      	movs	r2, #2
    5efe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
    5f02:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    5f04:	b113      	cbz	r3, 5f0c <nrfx_clock_start+0x90>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5f06:	2000      	movs	r0, #0
    5f08:	f7ff fef2 	bl	5cf0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    5f0c:	2300      	movs	r3, #0
    5f0e:	e7de      	b.n	5ece <nrfx_clock_start+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f10:	2200      	movs	r2, #0
    5f12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5f16:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    5f1a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f1e:	6018      	str	r0, [r3, #0]
}
    5f20:	e7ef      	b.n	5f02 <nrfx_clock_start+0x86>
    5f22:	bf00      	nop
    5f24:	20000a68 	.word	0x20000a68
    5f28:	0000c919 	.word	0x0000c919
    5f2c:	0000c89a 	.word	0x0000c89a
    5f30:	0000b53f 	.word	0x0000b53f
    5f34:	0000c9f6 	.word	0x0000c9f6

00005f38 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5f38:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5f3a:	4b09      	ldr	r3, [pc, #36]	; (5f60 <nrfx_clock_stop+0x28>)
    5f3c:	791b      	ldrb	r3, [r3, #4]
    5f3e:	b95b      	cbnz	r3, 5f58 <nrfx_clock_stop+0x20>
    5f40:	4908      	ldr	r1, [pc, #32]	; (5f64 <nrfx_clock_stop+0x2c>)
    5f42:	4809      	ldr	r0, [pc, #36]	; (5f68 <nrfx_clock_stop+0x30>)
    5f44:	4a09      	ldr	r2, [pc, #36]	; (5f6c <nrfx_clock_stop+0x34>)
    5f46:	f240 13ad 	movw	r3, #429	; 0x1ad
    5f4a:	f004 fabc 	bl	a4c6 <assert_print>
    5f4e:	4807      	ldr	r0, [pc, #28]	; (5f6c <nrfx_clock_stop+0x34>)
    5f50:	f240 11ad 	movw	r1, #429	; 0x1ad
    5f54:	f004 fab0 	bl	a4b8 <assert_post_action>
    clock_stop(domain);
}
    5f58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
    5f5c:	f7ff bec8 	b.w	5cf0 <clock_stop>
    5f60:	20000a68 	.word	0x20000a68
    5f64:	0000c919 	.word	0x0000c919
    5f68:	0000b53f 	.word	0x0000b53f
    5f6c:	0000c89a 	.word	0x0000c89a

00005f70 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5f70:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f76:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5f7a:	b16a      	cbz	r2, 5f98 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f7c:	2200      	movs	r2, #0
    5f7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5f82:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    5f86:	2201      	movs	r2, #1
    5f88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    5f8c:	4b11      	ldr	r3, [pc, #68]	; (5fd4 <nrfx_power_clock_irq_handler+0x64>)
    5f8e:	7958      	ldrb	r0, [r3, #5]
    5f90:	b910      	cbnz	r0, 5f98 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    5f92:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5f94:	681b      	ldr	r3, [r3, #0]
    5f96:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f9c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5fa0:	b172      	cbz	r2, 5fc0 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5fa2:	2200      	movs	r2, #0
    5fa4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5fa8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5fac:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5fb0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5fb4:	0792      	lsls	r2, r2, #30
    5fb6:	d104      	bne.n	5fc2 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5fb8:	2201      	movs	r2, #1
    5fba:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5fbe:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5fc0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    5fc2:	2202      	movs	r2, #2
    5fc4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5fc8:	4b02      	ldr	r3, [pc, #8]	; (5fd4 <nrfx_power_clock_irq_handler+0x64>)
}
    5fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5fce:	681b      	ldr	r3, [r3, #0]
    5fd0:	2001      	movs	r0, #1
    5fd2:	4718      	bx	r3
    5fd4:	20000a68 	.word	0x20000a68

00005fd8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5fd8:	4b03      	ldr	r3, [pc, #12]	; (5fe8 <pin_in_use_by_te+0x10>)
    5fda:	3008      	adds	r0, #8
    5fdc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5fe0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5fe4:	4770      	bx	lr
    5fe6:	bf00      	nop
    5fe8:	200000fc 	.word	0x200000fc

00005fec <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5fec:	4b04      	ldr	r3, [pc, #16]	; (6000 <pin_has_trigger+0x14>)
    5fee:	3008      	adds	r0, #8
    5ff0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5ff4:	f010 001c 	ands.w	r0, r0, #28
    5ff8:	bf18      	it	ne
    5ffa:	2001      	movne	r0, #1
    5ffc:	4770      	bx	lr
    5ffe:	bf00      	nop
    6000:	200000fc 	.word	0x200000fc

00006004 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6004:	4b03      	ldr	r3, [pc, #12]	; (6014 <pin_is_output+0x10>)
    6006:	3008      	adds	r0, #8
    6008:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    600c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6010:	4770      	bx	lr
    6012:	bf00      	nop
    6014:	200000fc 	.word	0x200000fc

00006018 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6018:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    601a:	f100 0308 	add.w	r3, r0, #8
    601e:	4c0c      	ldr	r4, [pc, #48]	; (6050 <call_handler+0x38>)
    6020:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    6024:	05da      	lsls	r2, r3, #23
{
    6026:	4605      	mov	r5, r0
    6028:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    602a:	d507      	bpl.n	603c <call_handler+0x24>
    602c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    6030:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    6034:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    6038:	6852      	ldr	r2, [r2, #4]
    603a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    603c:	68a3      	ldr	r3, [r4, #8]
    603e:	b12b      	cbz	r3, 604c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6040:	68e2      	ldr	r2, [r4, #12]
    6042:	4631      	mov	r1, r6
    6044:	4628      	mov	r0, r5
    }
}
    6046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    604a:	4718      	bx	r3
}
    604c:	bd70      	pop	{r4, r5, r6, pc}
    604e:	bf00      	nop
    6050:	200000fc 	.word	0x200000fc

00006054 <release_handler>:
{
    6054:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6056:	4a18      	ldr	r2, [pc, #96]	; (60b8 <release_handler+0x64>)
    6058:	3008      	adds	r0, #8
    605a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    605e:	05d9      	lsls	r1, r3, #23
    6060:	d51d      	bpl.n	609e <release_handler+0x4a>
    6062:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    6066:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    606a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    606e:	f102 040e 	add.w	r4, r2, #14
    6072:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6074:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    6078:	f413 7f80 	tst.w	r3, #256	; 0x100
    607c:	d003      	beq.n	6086 <release_handler+0x32>
    607e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    6082:	4299      	cmp	r1, r3
    6084:	d00b      	beq.n	609e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6086:	3001      	adds	r0, #1
    6088:	2830      	cmp	r0, #48	; 0x30
    608a:	d1f3      	bne.n	6074 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    608c:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    608e:	480b      	ldr	r0, [pc, #44]	; (60bc <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
    6090:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6094:	f7ff fe0c 	bl	5cb0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    6098:	4b09      	ldr	r3, [pc, #36]	; (60c0 <release_handler+0x6c>)
    609a:	4298      	cmp	r0, r3
    609c:	d100      	bne.n	60a0 <release_handler+0x4c>
}
    609e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    60a0:	4908      	ldr	r1, [pc, #32]	; (60c4 <release_handler+0x70>)
    60a2:	4809      	ldr	r0, [pc, #36]	; (60c8 <release_handler+0x74>)
    60a4:	4a09      	ldr	r2, [pc, #36]	; (60cc <release_handler+0x78>)
    60a6:	f44f 7399 	mov.w	r3, #306	; 0x132
    60aa:	f004 fa0c 	bl	a4c6 <assert_print>
    60ae:	4807      	ldr	r0, [pc, #28]	; (60cc <release_handler+0x78>)
    60b0:	f44f 7199 	mov.w	r1, #306	; 0x132
    60b4:	f004 fa00 	bl	a4b8 <assert_post_action>
    60b8:	200000fc 	.word	0x200000fc
    60bc:	20000170 	.word	0x20000170
    60c0:	0bad0000 	.word	0x0bad0000
    60c4:	0000c6f4 	.word	0x0000c6f4
    60c8:	0000b53f 	.word	0x0000b53f
    60cc:	0000c942 	.word	0x0000c942

000060d0 <pin_handler_trigger_uninit>:
{
    60d0:	b538      	push	{r3, r4, r5, lr}
    60d2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    60d4:	f7ff ff80 	bl	5fd8 <pin_in_use_by_te>
    60d8:	4c09      	ldr	r4, [pc, #36]	; (6100 <pin_handler_trigger_uninit+0x30>)
    60da:	f102 0508 	add.w	r5, r2, #8
    60de:	b140      	cbz	r0, 60f2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    60e0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    60e4:	4907      	ldr	r1, [pc, #28]	; (6104 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    60e6:	0b5b      	lsrs	r3, r3, #13
    60e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    60ec:	2000      	movs	r0, #0
    60ee:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    60f2:	4610      	mov	r0, r2
    60f4:	f7ff ffae 	bl	6054 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    60f8:	2300      	movs	r3, #0
    60fa:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    60fe:	bd38      	pop	{r3, r4, r5, pc}
    6100:	200000fc 	.word	0x200000fc
    6104:	40006000 	.word	0x40006000

00006108 <nrf_gpio_pin_port_decode>:
{
    6108:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    610a:	6802      	ldr	r2, [r0, #0]
{
    610c:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    610e:	4610      	mov	r0, r2
    6110:	f004 fcbc 	bl	aa8c <nrf_gpio_pin_present_check>
    6114:	b958      	cbnz	r0, 612e <nrf_gpio_pin_port_decode+0x26>
    6116:	4911      	ldr	r1, [pc, #68]	; (615c <nrf_gpio_pin_port_decode+0x54>)
    6118:	4a11      	ldr	r2, [pc, #68]	; (6160 <nrf_gpio_pin_port_decode+0x58>)
    611a:	4812      	ldr	r0, [pc, #72]	; (6164 <nrf_gpio_pin_port_decode+0x5c>)
    611c:	f240 2347 	movw	r3, #583	; 0x247
    6120:	f004 f9d1 	bl	a4c6 <assert_print>
    6124:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
    6128:	480d      	ldr	r0, [pc, #52]	; (6160 <nrf_gpio_pin_port_decode+0x58>)
    612a:	f004 f9c5 	bl	a4b8 <assert_post_action>
    *p_pin = pin_number & 0x1F;
    612e:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6132:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
    6134:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6136:	d00b      	beq.n	6150 <nrf_gpio_pin_port_decode+0x48>
    6138:	2a01      	cmp	r2, #1
    613a:	d00c      	beq.n	6156 <nrf_gpio_pin_port_decode+0x4e>
            NRFX_ASSERT(0);
    613c:	490a      	ldr	r1, [pc, #40]	; (6168 <nrf_gpio_pin_port_decode+0x60>)
    613e:	4a08      	ldr	r2, [pc, #32]	; (6160 <nrf_gpio_pin_port_decode+0x58>)
    6140:	4808      	ldr	r0, [pc, #32]	; (6164 <nrf_gpio_pin_port_decode+0x5c>)
    6142:	f44f 7313 	mov.w	r3, #588	; 0x24c
    6146:	f004 f9be 	bl	a4c6 <assert_print>
    614a:	f44f 7113 	mov.w	r1, #588	; 0x24c
    614e:	e7eb      	b.n	6128 <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
    6150:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    6154:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6156:	4805      	ldr	r0, [pc, #20]	; (616c <nrf_gpio_pin_port_decode+0x64>)
    6158:	e7fc      	b.n	6154 <nrf_gpio_pin_port_decode+0x4c>
    615a:	bf00      	nop
    615c:	0000c699 	.word	0x0000c699
    6160:	0000c666 	.word	0x0000c666
    6164:	0000b53f 	.word	0x0000b53f
    6168:	0000c9f6 	.word	0x0000c9f6
    616c:	50000300 	.word	0x50000300

00006170 <nrfx_gpiote_input_configure>:
{
    6170:	b5f0      	push	{r4, r5, r6, r7, lr}
    6172:	4604      	mov	r4, r0
    6174:	b085      	sub	sp, #20
    6176:	4617      	mov	r7, r2
    6178:	461d      	mov	r5, r3
    if (p_input_config)
    617a:	b1d9      	cbz	r1, 61b4 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
    617c:	f004 fc97 	bl	aaae <pin_is_task_output>
    6180:	bb00      	cbnz	r0, 61c4 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6182:	460b      	mov	r3, r1
    6184:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6188:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    618c:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6190:	f10d 020f 	add.w	r2, sp, #15
    6194:	f10d 010e 	add.w	r1, sp, #14
    6198:	4620      	mov	r0, r4
    619a:	f004 fc93 	bl	aac4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    619e:	4a44      	ldr	r2, [pc, #272]	; (62b0 <nrfx_gpiote_input_configure+0x140>)
    61a0:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    61a4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    61a8:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    61ac:	f043 0301 	orr.w	r3, r3, #1
    61b0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    61b4:	b34f      	cbz	r7, 620a <nrfx_gpiote_input_configure+0x9a>
        if (pin_is_output(pin))
    61b6:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    61b8:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    61ba:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    61bc:	f7ff ff22 	bl	6004 <pin_is_output>
    61c0:	b110      	cbz	r0, 61c8 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
    61c2:	b1ba      	cbz	r2, 61f4 <nrfx_gpiote_input_configure+0x84>
            return NRFX_ERROR_INVALID_PARAM;
    61c4:	483b      	ldr	r0, [pc, #236]	; (62b4 <nrfx_gpiote_input_configure+0x144>)
    61c6:	e022      	b.n	620e <nrfx_gpiote_input_configure+0x9e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    61c8:	4b39      	ldr	r3, [pc, #228]	; (62b0 <nrfx_gpiote_input_configure+0x140>)
    61ca:	f104 0c08 	add.w	ip, r4, #8
    61ce:	f833 101c 	ldrh.w	r1, [r3, ip, lsl #1]
    61d2:	f021 0120 	bic.w	r1, r1, #32
    61d6:	04c9      	lsls	r1, r1, #19
    61d8:	0cc9      	lsrs	r1, r1, #19
    61da:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
            if (use_evt)
    61de:	b14a      	cbz	r2, 61f4 <nrfx_gpiote_input_configure+0x84>
                if (!edge)
    61e0:	2e03      	cmp	r6, #3
    61e2:	d8ef      	bhi.n	61c4 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
    61e4:	687a      	ldr	r2, [r7, #4]
    61e6:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    61e8:	b99e      	cbnz	r6, 6212 <nrfx_gpiote_input_configure+0xa2>
    61ea:	4b33      	ldr	r3, [pc, #204]	; (62b8 <nrfx_gpiote_input_configure+0x148>)
    61ec:	f507 77a2 	add.w	r7, r7, #324	; 0x144
    61f0:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    61f4:	4a2e      	ldr	r2, [pc, #184]	; (62b0 <nrfx_gpiote_input_configure+0x140>)
    61f6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    61fa:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    61fe:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6202:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    6206:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    620a:	bb3d      	cbnz	r5, 625c <nrfx_gpiote_input_configure+0xec>
        err = NRFX_SUCCESS;
    620c:	482b      	ldr	r0, [pc, #172]	; (62bc <nrfx_gpiote_input_configure+0x14c>)
}
    620e:	b005      	add	sp, #20
    6210:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6212:	00ba      	lsls	r2, r7, #2
    6214:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6218:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    621c:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    6220:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6224:	f020 0003 	bic.w	r0, r0, #3
    6228:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    622c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6230:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    6234:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    6238:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    623c:	0220      	lsls	r0, r4, #8
    623e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    6242:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    6246:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    624a:	ea40 000e 	orr.w	r0, r0, lr
    624e:	f041 0120 	orr.w	r1, r1, #32
    6252:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
    6256:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    625a:	e7cb      	b.n	61f4 <nrfx_gpiote_input_configure+0x84>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    625c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    6260:	4620      	mov	r0, r4
    6262:	f7ff fef7 	bl	6054 <release_handler>
    if (!handler)
    6266:	2e00      	cmp	r6, #0
    6268:	d0d0      	beq.n	620c <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    626a:	4d11      	ldr	r5, [pc, #68]	; (62b0 <nrfx_gpiote_input_configure+0x140>)
    626c:	e9d5 2300 	ldrd	r2, r3, [r5]
    6270:	4296      	cmp	r6, r2
    6272:	d101      	bne.n	6278 <nrfx_gpiote_input_configure+0x108>
    6274:	429f      	cmp	r7, r3
    6276:	d018      	beq.n	62aa <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6278:	4811      	ldr	r0, [pc, #68]	; (62c0 <nrfx_gpiote_input_configure+0x150>)
    627a:	f10d 010f 	add.w	r1, sp, #15
    627e:	f7ff fcf7 	bl	5c70 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6282:	4b0e      	ldr	r3, [pc, #56]	; (62bc <nrfx_gpiote_input_configure+0x14c>)
    6284:	4298      	cmp	r0, r3
    6286:	d1c2      	bne.n	620e <nrfx_gpiote_input_configure+0x9e>
        handler_id = (int32_t)id;
    6288:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    628c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6290:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6294:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    6296:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6298:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    629c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    62a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    62a4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    62a8:	e7b0      	b.n	620c <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    62aa:	2200      	movs	r2, #0
    62ac:	e7ee      	b.n	628c <nrfx_gpiote_input_configure+0x11c>
    62ae:	bf00      	nop
    62b0:	200000fc 	.word	0x200000fc
    62b4:	0bad0004 	.word	0x0bad0004
    62b8:	40006000 	.word	0x40006000
    62bc:	0bad0000 	.word	0x0bad0000
    62c0:	20000170 	.word	0x20000170

000062c4 <nrfx_gpiote_output_configure>:
{
    62c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62c6:	4604      	mov	r4, r0
    62c8:	b085      	sub	sp, #20
    62ca:	4615      	mov	r5, r2
    if (p_config)
    62cc:	b321      	cbz	r1, 6318 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    62ce:	f7ff fe99 	bl	6004 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    62d2:	b920      	cbnz	r0, 62de <nrfx_gpiote_output_configure+0x1a>
    62d4:	4620      	mov	r0, r4
    62d6:	f7ff fe7f 	bl	5fd8 <pin_in_use_by_te>
    62da:	2800      	cmp	r0, #0
    62dc:	d15e      	bne.n	639c <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    62de:	4620      	mov	r0, r4
    62e0:	f7ff fe84 	bl	5fec <pin_has_trigger>
    62e4:	b110      	cbz	r0, 62ec <nrfx_gpiote_output_configure+0x28>
    62e6:	784b      	ldrb	r3, [r1, #1]
    62e8:	2b01      	cmp	r3, #1
    62ea:	d057      	beq.n	639c <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    62ec:	2301      	movs	r3, #1
    62ee:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    62f2:	2300      	movs	r3, #0
    62f4:	e9cd 1300 	strd	r1, r3, [sp]
    62f8:	1c4a      	adds	r2, r1, #1
    62fa:	1c8b      	adds	r3, r1, #2
    62fc:	4620      	mov	r0, r4
    62fe:	f10d 010f 	add.w	r1, sp, #15
    6302:	f004 fbdf 	bl	aac4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6306:	4a26      	ldr	r2, [pc, #152]	; (63a0 <nrfx_gpiote_output_configure+0xdc>)
    6308:	f104 0108 	add.w	r1, r4, #8
    630c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6310:	f043 0303 	orr.w	r3, r3, #3
    6314:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    6318:	b915      	cbnz	r5, 6320 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    631a:	4822      	ldr	r0, [pc, #136]	; (63a4 <nrfx_gpiote_output_configure+0xe0>)
}
    631c:	b005      	add	sp, #20
    631e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    6320:	4620      	mov	r0, r4
    6322:	f7ff fe6f 	bl	6004 <pin_is_output>
        if (pin_is_input(pin))
    6326:	b3c8      	cbz	r0, 639c <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6328:	4e1d      	ldr	r6, [pc, #116]	; (63a0 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    632a:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    632e:	f104 0708 	add.w	r7, r4, #8
    6332:	4661      	mov	r1, ip
    6334:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    6338:	0089      	lsls	r1, r1, #2
    633a:	f020 0020 	bic.w	r0, r0, #32
    633e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6342:	04c0      	lsls	r0, r0, #19
    6344:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    6348:	0cc0      	lsrs	r0, r0, #19
    634a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    634e:	2300      	movs	r3, #0
    6350:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6354:	786a      	ldrb	r2, [r5, #1]
    6356:	2a00      	cmp	r2, #0
    6358:	d0df      	beq.n	631a <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    635a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    635e:	78ad      	ldrb	r5, [r5, #2]
    6360:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    6364:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6368:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    636c:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    6370:	0223      	lsls	r3, r4, #8
    6372:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6376:	0412      	lsls	r2, r2, #16
    6378:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    637c:	ea43 030e 	orr.w	r3, r3, lr
    6380:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6382:	052a      	lsls	r2, r5, #20
    6384:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6388:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    638c:	4313      	orrs	r3, r2
    638e:	f040 0020 	orr.w	r0, r0, #32
    6392:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6396:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    639a:	e7be      	b.n	631a <nrfx_gpiote_output_configure+0x56>
{
    639c:	4802      	ldr	r0, [pc, #8]	; (63a8 <nrfx_gpiote_output_configure+0xe4>)
    639e:	e7bd      	b.n	631c <nrfx_gpiote_output_configure+0x58>
    63a0:	200000fc 	.word	0x200000fc
    63a4:	0bad0000 	.word	0x0bad0000
    63a8:	0bad0004 	.word	0x0bad0004

000063ac <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    63ac:	4b01      	ldr	r3, [pc, #4]	; (63b4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    63ae:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    63b2:	4770      	bx	lr
    63b4:	200000fc 	.word	0x200000fc

000063b8 <nrfx_gpiote_channel_get>:
{
    63b8:	b508      	push	{r3, lr}
    63ba:	4602      	mov	r2, r0
    NRFX_ASSERT(p_channel);
    63bc:	b959      	cbnz	r1, 63d6 <nrfx_gpiote_channel_get+0x1e>
    63be:	490c      	ldr	r1, [pc, #48]	; (63f0 <nrfx_gpiote_channel_get+0x38>)
    63c0:	480c      	ldr	r0, [pc, #48]	; (63f4 <nrfx_gpiote_channel_get+0x3c>)
    63c2:	4a0d      	ldr	r2, [pc, #52]	; (63f8 <nrfx_gpiote_channel_get+0x40>)
    63c4:	f240 2335 	movw	r3, #565	; 0x235
    63c8:	f004 f87d 	bl	a4c6 <assert_print>
    63cc:	480a      	ldr	r0, [pc, #40]	; (63f8 <nrfx_gpiote_channel_get+0x40>)
    63ce:	f240 2135 	movw	r1, #565	; 0x235
    63d2:	f004 f871 	bl	a4b8 <assert_post_action>
    if (pin_in_use_by_te(pin))
    63d6:	f7ff fdff 	bl	5fd8 <pin_in_use_by_te>
    63da:	b138      	cbz	r0, 63ec <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    63dc:	4b07      	ldr	r3, [pc, #28]	; (63fc <nrfx_gpiote_channel_get+0x44>)
        return NRFX_SUCCESS;
    63de:	4808      	ldr	r0, [pc, #32]	; (6400 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    63e0:	3208      	adds	r2, #8
    63e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    63e6:	0b5b      	lsrs	r3, r3, #13
    63e8:	700b      	strb	r3, [r1, #0]
}
    63ea:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    63ec:	4805      	ldr	r0, [pc, #20]	; (6404 <nrfx_gpiote_channel_get+0x4c>)
    63ee:	e7fc      	b.n	63ea <nrfx_gpiote_channel_get+0x32>
    63f0:	0000c980 	.word	0x0000c980
    63f4:	0000b53f 	.word	0x0000b53f
    63f8:	0000c942 	.word	0x0000c942
    63fc:	200000fc 	.word	0x200000fc
    6400:	0bad0000 	.word	0x0bad0000
    6404:	0bad0004 	.word	0x0bad0004

00006408 <nrfx_gpiote_init>:
{
    6408:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    640a:	4c0f      	ldr	r4, [pc, #60]	; (6448 <nrfx_gpiote_init+0x40>)
    640c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    6410:	b9bd      	cbnz	r5, 6442 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6412:	2260      	movs	r2, #96	; 0x60
    6414:	4629      	mov	r1, r5
    6416:	f104 0010 	add.w	r0, r4, #16
    641a:	f004 fd0e 	bl	ae3a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    641e:	2006      	movs	r0, #6
    6420:	f7fd f864 	bl	34ec <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6424:	4b09      	ldr	r3, [pc, #36]	; (644c <nrfx_gpiote_init+0x44>)
    return err_code;
    6426:	480a      	ldr	r0, [pc, #40]	; (6450 <nrfx_gpiote_init+0x48>)
    6428:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    642c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6430:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6434:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6438:	2301      	movs	r3, #1
    643a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    643e:	6763      	str	r3, [r4, #116]	; 0x74
}
    6440:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    6442:	4804      	ldr	r0, [pc, #16]	; (6454 <nrfx_gpiote_init+0x4c>)
    6444:	e7fc      	b.n	6440 <nrfx_gpiote_init+0x38>
    6446:	bf00      	nop
    6448:	200000fc 	.word	0x200000fc
    644c:	40006000 	.word	0x40006000
    6450:	0bad0000 	.word	0x0bad0000
    6454:	0bad0005 	.word	0x0bad0005

00006458 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6458:	4b03      	ldr	r3, [pc, #12]	; (6468 <nrfx_gpiote_is_init+0x10>)
    645a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    645e:	3800      	subs	r0, #0
    6460:	bf18      	it	ne
    6462:	2001      	movne	r0, #1
    6464:	4770      	bx	lr
    6466:	bf00      	nop
    6468:	200000fc 	.word	0x200000fc

0000646c <nrfx_gpiote_channel_free>:
{
    646c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    646e:	4801      	ldr	r0, [pc, #4]	; (6474 <nrfx_gpiote_channel_free+0x8>)
    6470:	f7ff bc1e 	b.w	5cb0 <nrfx_flag32_free>
    6474:	2000016c 	.word	0x2000016c

00006478 <nrfx_gpiote_channel_alloc>:
{
    6478:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    647a:	4801      	ldr	r0, [pc, #4]	; (6480 <nrfx_gpiote_channel_alloc+0x8>)
    647c:	f7ff bbf8 	b.w	5c70 <nrfx_flag32_alloc>
    6480:	2000016c 	.word	0x2000016c

00006484 <nrfx_gpiote_trigger_enable>:
{
    6484:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6486:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
    6488:	f7ff fdb0 	bl	5fec <pin_has_trigger>
    648c:	b958      	cbnz	r0, 64a6 <nrfx_gpiote_trigger_enable+0x22>
    648e:	492d      	ldr	r1, [pc, #180]	; (6544 <nrfx_gpiote_trigger_enable+0xc0>)
    6490:	4a2d      	ldr	r2, [pc, #180]	; (6548 <nrfx_gpiote_trigger_enable+0xc4>)
    6492:	482e      	ldr	r0, [pc, #184]	; (654c <nrfx_gpiote_trigger_enable+0xc8>)
    6494:	f240 33df 	movw	r3, #991	; 0x3df
    6498:	f004 f815 	bl	a4c6 <assert_print>
    649c:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
    64a0:	4829      	ldr	r0, [pc, #164]	; (6548 <nrfx_gpiote_trigger_enable+0xc4>)
    64a2:	f004 f809 	bl	a4b8 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    64a6:	4620      	mov	r0, r4
    64a8:	f7ff fd96 	bl	5fd8 <pin_in_use_by_te>
    64ac:	4a28      	ldr	r2, [pc, #160]	; (6550 <nrfx_gpiote_trigger_enable+0xcc>)
    64ae:	f104 0508 	add.w	r5, r4, #8
    64b2:	b1f8      	cbz	r0, 64f4 <nrfx_gpiote_trigger_enable+0x70>
    return !pin_is_output(pin);
    64b4:	4620      	mov	r0, r4
    64b6:	f7ff fda5 	bl	6004 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    64ba:	b9d8      	cbnz	r0, 64f4 <nrfx_gpiote_trigger_enable+0x70>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    64bc:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    64c0:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    64c2:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
    64c4:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
    64c8:	f504 44c2 	add.w	r4, r4, #24832	; 0x6100
    64cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    64d0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    64d4:	6020      	str	r0, [r4, #0]
    64d6:	6820      	ldr	r0, [r4, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    64d8:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    64dc:	f040 0001 	orr.w	r0, r0, #1
    64e0:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
    64e4:	b121      	cbz	r1, 64f0 <nrfx_gpiote_trigger_enable+0x6c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    64e6:	2301      	movs	r3, #1
    64e8:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    64ea:	4a1a      	ldr	r2, [pc, #104]	; (6554 <nrfx_gpiote_trigger_enable+0xd0>)
    64ec:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    64f0:	b003      	add	sp, #12
    64f2:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
    64f4:	b949      	cbnz	r1, 650a <nrfx_gpiote_trigger_enable+0x86>
    64f6:	4918      	ldr	r1, [pc, #96]	; (6558 <nrfx_gpiote_trigger_enable+0xd4>)
    64f8:	4a13      	ldr	r2, [pc, #76]	; (6548 <nrfx_gpiote_trigger_enable+0xc4>)
    64fa:	4814      	ldr	r0, [pc, #80]	; (654c <nrfx_gpiote_trigger_enable+0xc8>)
    64fc:	f240 33ee 	movw	r3, #1006	; 0x3ee
    6500:	f003 ffe1 	bl	a4c6 <assert_print>
    6504:	f240 31ee 	movw	r1, #1006	; 0x3ee
    6508:	e7ca      	b.n	64a0 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    650a:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
    650e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6512:	2b04      	cmp	r3, #4
    6514:	d012      	beq.n	653c <nrfx_gpiote_trigger_enable+0xb8>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6516:	2b05      	cmp	r3, #5
    6518:	d012      	beq.n	6540 <nrfx_gpiote_trigger_enable+0xbc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    651a:	a801      	add	r0, sp, #4
    651c:	9401      	str	r4, [sp, #4]
    651e:	f7ff fdf3 	bl	6108 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6522:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    6524:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6528:	40d9      	lsrs	r1, r3
    652a:	f001 0101 	and.w	r1, r1, #1
    652e:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6530:	4620      	mov	r0, r4
}
    6532:	b003      	add	sp, #12
    6534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6538:	f004 bb11 	b.w	ab5e <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    653c:	2103      	movs	r1, #3
    653e:	e7f7      	b.n	6530 <nrfx_gpiote_trigger_enable+0xac>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6540:	2102      	movs	r1, #2
    6542:	e7f5      	b.n	6530 <nrfx_gpiote_trigger_enable+0xac>
    6544:	0000c98a 	.word	0x0000c98a
    6548:	0000c942 	.word	0x0000c942
    654c:	0000b53f 	.word	0x0000b53f
    6550:	200000fc 	.word	0x200000fc
    6554:	40006000 	.word	0x40006000
    6558:	0000c99f 	.word	0x0000c99f

0000655c <nrfx_gpiote_trigger_disable>:
{
    655c:	b508      	push	{r3, lr}
    655e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6560:	f7ff fd3a 	bl	5fd8 <pin_in_use_by_te>
    6564:	b1c8      	cbz	r0, 659a <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    6566:	4610      	mov	r0, r2
    6568:	f7ff fd4c 	bl	6004 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    656c:	b9a8      	cbnz	r0, 659a <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    656e:	3208      	adds	r2, #8
    6570:	4b0d      	ldr	r3, [pc, #52]	; (65a8 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    6572:	490e      	ldr	r1, [pc, #56]	; (65ac <nrfx_gpiote_trigger_disable+0x50>)
    6574:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6578:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    657a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    657c:	409a      	lsls	r2, r3
    657e:	009b      	lsls	r3, r3, #2
    6580:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6584:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6588:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    658c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    6590:	f022 0203 	bic.w	r2, r2, #3
    6594:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    6598:	bd08      	pop	{r3, pc}
    659a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    659e:	2100      	movs	r1, #0
    65a0:	4610      	mov	r0, r2
    65a2:	f004 badc 	b.w	ab5e <nrf_gpio_cfg_sense_set>
    65a6:	bf00      	nop
    65a8:	200000fc 	.word	0x200000fc
    65ac:	40006000 	.word	0x40006000

000065b0 <nrfx_gpiote_pin_uninit>:
{
    65b0:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    65b2:	4b0e      	ldr	r3, [pc, #56]	; (65ec <nrfx_gpiote_pin_uninit+0x3c>)
    65b4:	f100 0208 	add.w	r2, r0, #8
{
    65b8:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    65ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    65be:	07db      	lsls	r3, r3, #31
    65c0:	d511      	bpl.n	65e6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    65c2:	f7ff ffcb 	bl	655c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    65c6:	4620      	mov	r0, r4
    65c8:	f7ff fd82 	bl	60d0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    65cc:	a801      	add	r0, sp, #4
    65ce:	9401      	str	r4, [sp, #4]
    65d0:	f7ff fd9a 	bl	6108 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    65d4:	9b01      	ldr	r3, [sp, #4]
    65d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    65da:	2202      	movs	r2, #2
    65dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    65e0:	4803      	ldr	r0, [pc, #12]	; (65f0 <nrfx_gpiote_pin_uninit+0x40>)
}
    65e2:	b002      	add	sp, #8
    65e4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    65e6:	4803      	ldr	r0, [pc, #12]	; (65f4 <nrfx_gpiote_pin_uninit+0x44>)
    65e8:	e7fb      	b.n	65e2 <nrfx_gpiote_pin_uninit+0x32>
    65ea:	bf00      	nop
    65ec:	200000fc 	.word	0x200000fc
    65f0:	0bad0000 	.word	0x0bad0000
    65f4:	0bad0004 	.word	0x0bad0004

000065f8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    65f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    65fc:	4b69      	ldr	r3, [pc, #420]	; (67a4 <nrfx_gpiote_irq_handler+0x1ac>)
    return p_reg->INTENSET & mask;
    65fe:	486a      	ldr	r0, [pc, #424]	; (67a8 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6600:	496a      	ldr	r1, [pc, #424]	; (67ac <nrfx_gpiote_irq_handler+0x1b4>)
    uint32_t status = 0;
    6602:	2600      	movs	r6, #0
{
    6604:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    6606:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6608:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    660a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    660c:	b135      	cbz	r5, 661c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    660e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    6612:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6614:	bf1e      	ittt	ne
    6616:	601c      	strne	r4, [r3, #0]
    6618:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    661a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    661c:	3304      	adds	r3, #4
    661e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    6620:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6624:	d1f1      	bne.n	660a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6626:	f8df 9180 	ldr.w	r9, [pc, #384]	; 67a8 <nrfx_gpiote_irq_handler+0x1b0>
    662a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    662e:	2b00      	cmp	r3, #0
    6630:	f000 809b 	beq.w	676a <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
    6634:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6638:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    663c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    663e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6642:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    6646:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    6648:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    664c:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    6650:	f10d 0a10 	add.w	sl, sp, #16
    6654:	ea4f 1348 	mov.w	r3, r8, lsl #5
    6658:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    665a:	f04f 0b01 	mov.w	fp, #1
    665e:	e04b      	b.n	66f8 <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
    6660:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6662:	4a53      	ldr	r2, [pc, #332]	; (67b0 <nrfx_gpiote_irq_handler+0x1b8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    6664:	fa94 f4a4 	rbit	r4, r4
    6668:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    666c:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    666e:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6670:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
    6674:	f004 0107 	and.w	r1, r4, #7
    6678:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    667c:	f81a 3000 	ldrb.w	r3, [sl, r0]
    6680:	9403      	str	r4, [sp, #12]
    6682:	fa0b f101 	lsl.w	r1, fp, r1
    6686:	ea23 0301 	bic.w	r3, r3, r1
    668a:	08ba      	lsrs	r2, r7, #2
    668c:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6690:	a803      	add	r0, sp, #12
    6692:	9201      	str	r2, [sp, #4]
    6694:	f7ff fd38 	bl	6108 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6698:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
    669a:	9a01      	ldr	r2, [sp, #4]
    669c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    66a0:	f3c7 0582 	ubfx	r5, r7, #2, #3
    66a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
    66a8:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    66aa:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    66ac:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    66b0:	d52c      	bpl.n	670c <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
    66b2:	4639      	mov	r1, r7
    66b4:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    66b6:	b2dd      	uxtb	r5, r3
    66b8:	f7ff fcae 	bl	6018 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    66bc:	a803      	add	r0, sp, #12
    66be:	9403      	str	r4, [sp, #12]
    66c0:	f7ff fd22 	bl	6108 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    66c4:	9b03      	ldr	r3, [sp, #12]
    66c6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    66ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    66ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
    66d2:	429d      	cmp	r5, r3
    66d4:	d107      	bne.n	66e6 <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    66d6:	2100      	movs	r1, #0
    66d8:	4620      	mov	r0, r4
    66da:	f004 fa40 	bl	ab5e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    66de:	4629      	mov	r1, r5
    66e0:	4620      	mov	r0, r4
    66e2:	f004 fa3c 	bl	ab5e <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    66e6:	a803      	add	r0, sp, #12
    66e8:	9403      	str	r4, [sp, #12]
    66ea:	f7ff fd0d 	bl	6108 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    66ee:	9b03      	ldr	r3, [sp, #12]
    66f0:	fa0b f303 	lsl.w	r3, fp, r3
    66f4:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    66f8:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    66fc:	2c00      	cmp	r4, #0
    66fe:	d1af      	bne.n	6660 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6700:	f1b8 0f00 	cmp.w	r8, #0
    6704:	d11d      	bne.n	6742 <nrfx_gpiote_irq_handler+0x14a>
    6706:	f04f 0801 	mov.w	r8, #1
    670a:	e7a3      	b.n	6654 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    670c:	2b02      	cmp	r3, #2
    670e:	d10c      	bne.n	672a <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6710:	2103      	movs	r1, #3
    6712:	4620      	mov	r0, r4
    6714:	f004 fa23 	bl	ab5e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6718:	f005 0305 	and.w	r3, r5, #5
    671c:	2b01      	cmp	r3, #1
    671e:	d1e2      	bne.n	66e6 <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
    6720:	4639      	mov	r1, r7
    6722:	4620      	mov	r0, r4
    6724:	f7ff fc78 	bl	6018 <call_handler>
    6728:	e7dd      	b.n	66e6 <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    672a:	2102      	movs	r1, #2
    672c:	4620      	mov	r0, r4
    672e:	9301      	str	r3, [sp, #4]
    6730:	f004 fa15 	bl	ab5e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6734:	2d03      	cmp	r5, #3
    6736:	d0f3      	beq.n	6720 <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6738:	9b01      	ldr	r3, [sp, #4]
    673a:	2b03      	cmp	r3, #3
    673c:	d1d3      	bne.n	66e6 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    673e:	2d02      	cmp	r5, #2
    6740:	e7ed      	b.n	671e <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
    6742:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6746:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    674a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    674e:	4919      	ldr	r1, [pc, #100]	; (67b4 <nrfx_gpiote_irq_handler+0x1bc>)
    6750:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    6754:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6756:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    675a:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    675e:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    6760:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    6762:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    6766:	f47f af71 	bne.w	664c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    676a:	2401      	movs	r4, #1
    while (mask)
    676c:	b916      	cbnz	r6, 6774 <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    676e:	b007      	add	sp, #28
    6770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    6774:	fa96 f3a6 	rbit	r3, r6
    6778:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    677c:	fa04 f203 	lsl.w	r2, r4, r3
    6780:	009b      	lsls	r3, r3, #2
    6782:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6786:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    678a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    678e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6792:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6796:	f3c0 2005 	ubfx	r0, r0, #8, #6
    679a:	f3c1 4101 	ubfx	r1, r1, #16, #2
    679e:	f7ff fc3b 	bl	6018 <call_handler>
    67a2:	e7e3      	b.n	676c <nrfx_gpiote_irq_handler+0x174>
    67a4:	40006100 	.word	0x40006100
    67a8:	40006000 	.word	0x40006000
    67ac:	40006120 	.word	0x40006120
    67b0:	200000fc 	.word	0x200000fc
    67b4:	50000300 	.word	0x50000300

000067b8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    67b8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    67ba:	4801      	ldr	r0, [pc, #4]	; (67c0 <nrfx_ppi_channel_alloc+0x8>)
    67bc:	f7ff ba58 	b.w	5c70 <nrfx_flag32_alloc>
    67c0:	20000178 	.word	0x20000178

000067c4 <nrf_gpio_pin_port_decode>:
{
    67c4:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    67c6:	6803      	ldr	r3, [r0, #0]
    switch (port)
    67c8:	095a      	lsrs	r2, r3, #5
    67ca:	d00d      	beq.n	67e8 <nrf_gpio_pin_port_decode+0x24>
    67cc:	2a01      	cmp	r2, #1
    67ce:	d014      	beq.n	67fa <nrf_gpio_pin_port_decode+0x36>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    67d0:	490f      	ldr	r1, [pc, #60]	; (6810 <nrf_gpio_pin_port_decode+0x4c>)
    67d2:	4810      	ldr	r0, [pc, #64]	; (6814 <nrf_gpio_pin_port_decode+0x50>)
    67d4:	4a10      	ldr	r2, [pc, #64]	; (6818 <nrf_gpio_pin_port_decode+0x54>)
    67d6:	f240 2347 	movw	r3, #583	; 0x247
    67da:	f003 fe74 	bl	a4c6 <assert_print>
    67de:	480e      	ldr	r0, [pc, #56]	; (6818 <nrf_gpio_pin_port_decode+0x54>)
    67e0:	f240 2147 	movw	r1, #583	; 0x247
    67e4:	f003 fe68 	bl	a4b8 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
    67e8:	f04f 32ff 	mov.w	r2, #4294967295
    67ec:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    67f0:	07d9      	lsls	r1, r3, #31
    67f2:	d5ed      	bpl.n	67d0 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
    67f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    67f8:	e008      	b.n	680c <nrf_gpio_pin_port_decode+0x48>
    pin_number &= 0x1F;
    67fa:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    67fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6802:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6804:	07d2      	lsls	r2, r2, #31
    6806:	d5e3      	bpl.n	67d0 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
    6808:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
    680a:	4804      	ldr	r0, [pc, #16]	; (681c <nrf_gpio_pin_port_decode+0x58>)
}
    680c:	bd08      	pop	{r3, pc}
    680e:	bf00      	nop
    6810:	0000c699 	.word	0x0000c699
    6814:	0000b53f 	.word	0x0000b53f
    6818:	0000c666 	.word	0x0000c666
    681c:	50000300 	.word	0x50000300

00006820 <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
    6820:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_seq != NULL);
    6822:	b95a      	cbnz	r2, 683c <nrf_pwm_sequence_set+0x1c>
    6824:	492c      	ldr	r1, [pc, #176]	; (68d8 <nrf_pwm_sequence_set+0xb8>)
    6826:	4a2d      	ldr	r2, [pc, #180]	; (68dc <nrf_pwm_sequence_set+0xbc>)
    6828:	482d      	ldr	r0, [pc, #180]	; (68e0 <nrf_pwm_sequence_set+0xc0>)
    682a:	f44f 732c 	mov.w	r3, #688	; 0x2b0
    682e:	f003 fe4a 	bl	a4c6 <assert_print>
    6832:	f44f 712c 	mov.w	r1, #688	; 0x2b0
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
    6836:	4829      	ldr	r0, [pc, #164]	; (68dc <nrf_pwm_sequence_set+0xbc>)
    6838:	f003 fe3e 	bl	a4b8 <assert_post_action>
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    683c:	6813      	ldr	r3, [r2, #0]
    NRFX_ASSERT(p_values != NULL);
    683e:	b94b      	cbnz	r3, 6854 <nrf_pwm_sequence_set+0x34>
    6840:	4928      	ldr	r1, [pc, #160]	; (68e4 <nrf_pwm_sequence_set+0xc4>)
    6842:	4a26      	ldr	r2, [pc, #152]	; (68dc <nrf_pwm_sequence_set+0xbc>)
    6844:	4826      	ldr	r0, [pc, #152]	; (68e0 <nrf_pwm_sequence_set+0xc0>)
    6846:	f240 23bd 	movw	r3, #701	; 0x2bd
    684a:	f003 fe3c 	bl	a4c6 <assert_print>
    684e:	f240 21bd 	movw	r1, #701	; 0x2bd
    6852:	e7f0      	b.n	6836 <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    6854:	eb00 1441 	add.w	r4, r0, r1, lsl #5
    6858:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    685c:	8893      	ldrh	r3, [r2, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
    685e:	b94b      	cbnz	r3, 6874 <nrf_pwm_sequence_set+0x54>
    6860:	4921      	ldr	r1, [pc, #132]	; (68e8 <nrf_pwm_sequence_set+0xc8>)
    6862:	4a1e      	ldr	r2, [pc, #120]	; (68dc <nrf_pwm_sequence_set+0xbc>)
    6864:	481e      	ldr	r0, [pc, #120]	; (68e0 <nrf_pwm_sequence_set+0xc0>)
    6866:	f240 23c6 	movw	r3, #710	; 0x2c6
    686a:	f003 fe2c 	bl	a4c6 <assert_print>
    686e:	f240 21c6 	movw	r1, #710	; 0x2c6
    6872:	e7e0      	b.n	6836 <nrf_pwm_sequence_set+0x16>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    6874:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6878:	d009      	beq.n	688e <nrf_pwm_sequence_set+0x6e>
    687a:	491c      	ldr	r1, [pc, #112]	; (68ec <nrf_pwm_sequence_set+0xcc>)
    687c:	4a17      	ldr	r2, [pc, #92]	; (68dc <nrf_pwm_sequence_set+0xbc>)
    687e:	4818      	ldr	r0, [pc, #96]	; (68e0 <nrf_pwm_sequence_set+0xc0>)
    6880:	f240 23c7 	movw	r3, #711	; 0x2c7
    6884:	f003 fe1f 	bl	a4c6 <assert_print>
    6888:	f240 21c7 	movw	r1, #711	; 0x2c7
    688c:	e7d3      	b.n	6836 <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].CNT = length;
    688e:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    6892:	6893      	ldr	r3, [r2, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    6894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    6898:	d309      	bcc.n	68ae <nrf_pwm_sequence_set+0x8e>
    689a:	4915      	ldr	r1, [pc, #84]	; (68f0 <nrf_pwm_sequence_set+0xd0>)
    689c:	4a0f      	ldr	r2, [pc, #60]	; (68dc <nrf_pwm_sequence_set+0xbc>)
    689e:	4810      	ldr	r0, [pc, #64]	; (68e0 <nrf_pwm_sequence_set+0xc0>)
    68a0:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    68a4:	f003 fe0f 	bl	a4c6 <assert_print>
    68a8:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    68ac:	e7c3      	b.n	6836 <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    68ae:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    68b2:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    68b6:	68d3      	ldr	r3, [r2, #12]
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    68b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    68bc:	d309      	bcc.n	68d2 <nrf_pwm_sequence_set+0xb2>
    68be:	490d      	ldr	r1, [pc, #52]	; (68f4 <nrf_pwm_sequence_set+0xd4>)
    68c0:	4a06      	ldr	r2, [pc, #24]	; (68dc <nrf_pwm_sequence_set+0xbc>)
    68c2:	4807      	ldr	r0, [pc, #28]	; (68e0 <nrf_pwm_sequence_set+0xc0>)
    68c4:	f240 23d9 	movw	r3, #729	; 0x2d9
    68c8:	f003 fdfd 	bl	a4c6 <assert_print>
    68cc:	f240 21d9 	movw	r1, #729	; 0x2d9
    68d0:	e7b1      	b.n	6836 <nrf_pwm_sequence_set+0x16>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    68d2:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
}
    68d6:	bd10      	pop	{r4, pc}
    68d8:	0000c9bf 	.word	0x0000c9bf
    68dc:	0000c724 	.word	0x0000c724
    68e0:	0000b53f 	.word	0x0000b53f
    68e4:	0000c9d4 	.word	0x0000c9d4
    68e8:	0000c9ec 	.word	0x0000c9ec
    68ec:	0000c9f8 	.word	0x0000c9f8
    68f0:	0000ca16 	.word	0x0000ca16
    68f4:	0000ca37 	.word	0x0000ca37

000068f8 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    68f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68fc:	4604      	mov	r4, r0
    68fe:	b087      	sub	sp, #28
    NRFX_ASSERT(p_config);
    6900:	460d      	mov	r5, r1
    6902:	b949      	cbnz	r1, 6918 <nrfx_pwm_init+0x20>
    6904:	4959      	ldr	r1, [pc, #356]	; (6a6c <nrfx_pwm_init+0x174>)
    6906:	485a      	ldr	r0, [pc, #360]	; (6a70 <nrfx_pwm_init+0x178>)
    6908:	4a5a      	ldr	r2, [pc, #360]	; (6a74 <nrfx_pwm_init+0x17c>)
    690a:	238c      	movs	r3, #140	; 0x8c
    690c:	f003 fddb 	bl	a4c6 <assert_print>
    6910:	4858      	ldr	r0, [pc, #352]	; (6a74 <nrfx_pwm_init+0x17c>)
    6912:	218c      	movs	r1, #140	; 0x8c
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    6914:	f003 fdd0 	bl	a4b8 <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    6918:	f890 8004 	ldrb.w	r8, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    691c:	4e56      	ldr	r6, [pc, #344]	; (6a78 <nrfx_pwm_init+0x180>)
    691e:	210c      	movs	r1, #12
    6920:	fb01 f108 	mul.w	r1, r1, r8
    6924:	1870      	adds	r0, r6, r1
    6926:	7a07      	ldrb	r7, [r0, #8]
    6928:	2f00      	cmp	r7, #0
    692a:	f040 809d 	bne.w	6a68 <nrfx_pwm_init+0x170>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    692e:	6043      	str	r3, [r0, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    6930:	7b2b      	ldrb	r3, [r5, #12]
    p_cb->handler = handler;
    6932:	5072      	str	r2, [r6, r1]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    6934:	7283      	strb	r3, [r0, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    6936:	b1c3      	cbz	r3, 696a <nrfx_pwm_init+0x72>
    6938:	7b6b      	ldrb	r3, [r5, #13]
    693a:	b1b3      	cbz	r3, 696a <nrfx_pwm_init+0x72>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    693c:	6823      	ldr	r3, [r4, #0]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    693e:	2201      	movs	r2, #1
    6940:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    6944:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
    nrf_pwm_configure(p_instance->p_registers,
    6948:	6823      	ldr	r3, [r4, #0]
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    694a:	7968      	ldrb	r0, [r5, #5]
    694c:	79a9      	ldrb	r1, [r5, #6]
    694e:	892a      	ldrh	r2, [r5, #8]
    6950:	2f00      	cmp	r7, #0
    6952:	da51      	bge.n	69f8 <nrfx_pwm_init+0x100>
    6954:	4949      	ldr	r1, [pc, #292]	; (6a7c <nrfx_pwm_init+0x184>)
    6956:	4846      	ldr	r0, [pc, #280]	; (6a70 <nrfx_pwm_init+0x178>)
    6958:	4a49      	ldr	r2, [pc, #292]	; (6a80 <nrfx_pwm_init+0x188>)
    695a:	f240 23a5 	movw	r3, #677	; 0x2a5
    695e:	f003 fdb2 	bl	a4c6 <assert_print>
    6962:	4847      	ldr	r0, [pc, #284]	; (6a80 <nrfx_pwm_init+0x188>)
    6964:	f240 21a5 	movw	r1, #677	; 0x2a5
    6968:	e7d4      	b.n	6914 <nrfx_pwm_init+0x1c>
    696a:	f105 39ff 	add.w	r9, r5, #4294967295
    696e:	af02      	add	r7, sp, #8
    6970:	f105 0a03 	add.w	sl, r5, #3
        uint8_t output_pin = p_config->output_pins[i];
    6974:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    6978:	2aff      	cmp	r2, #255	; 0xff
    697a:	d039      	beq.n	69f0 <nrfx_pwm_init+0xf8>
            if (!p_config->skip_gpio_cfg)
    697c:	7b29      	ldrb	r1, [r5, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    697e:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
    6982:	f8c7 b000 	str.w	fp, [r7]
            if (!p_config->skip_gpio_cfg)
    6986:	b9b1      	cbnz	r1, 69b6 <nrfx_pwm_init+0xbe>
    if (value == 0)
    6988:	0613      	lsls	r3, r2, #24
    698a:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    698e:	a801      	add	r0, sp, #4
    if (value == 0)
    6990:	d426      	bmi.n	69e0 <nrfx_pwm_init+0xe8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6992:	f7ff ff17 	bl	67c4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6996:	9901      	ldr	r1, [sp, #4]
    6998:	2201      	movs	r2, #1
    699a:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    699c:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    69a0:	a801      	add	r0, sp, #4
    69a2:	f8cd b004 	str.w	fp, [sp, #4]
    69a6:	f7ff ff0d 	bl	67c4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    69aa:	9b01      	ldr	r3, [sp, #4]
    69ac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    69b0:	2203      	movs	r2, #3
    69b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    69b6:	45ca      	cmp	sl, r9
    69b8:	f107 0704 	add.w	r7, r7, #4
    69bc:	d1da      	bne.n	6974 <nrfx_pwm_init+0x7c>
    if (!p_config->skip_psel_cfg)
    69be:	7b6b      	ldrb	r3, [r5, #13]
    69c0:	2b00      	cmp	r3, #0
    69c2:	d1bb      	bne.n	693c <nrfx_pwm_init+0x44>
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
    69c4:	6823      	ldr	r3, [r4, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    69c6:	9a02      	ldr	r2, [sp, #8]
    69c8:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    69cc:	9a03      	ldr	r2, [sp, #12]
    69ce:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    69d2:	9a04      	ldr	r2, [sp, #16]
    69d4:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    69d8:	9a05      	ldr	r2, [sp, #20]
    69da:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    69de:	e7ad      	b.n	693c <nrfx_pwm_init+0x44>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    69e0:	f7ff fef0 	bl	67c4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    69e4:	9901      	ldr	r1, [sp, #4]
    69e6:	2201      	movs	r2, #1
    69e8:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    69ea:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    69ee:	e7d7      	b.n	69a0 <nrfx_pwm_init+0xa8>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    69f0:	f04f 33ff 	mov.w	r3, #4294967295
    69f4:	603b      	str	r3, [r7, #0]
    69f6:	e7de      	b.n	69b6 <nrfx_pwm_init+0xbe>
    p_reg->PRESCALER  = base_clock;
    69f8:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->MODE       = mode;
    69fc:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    6a00:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    nrf_pwm_decoder_set(p_instance->p_registers,
    6a04:	6823      	ldr	r3, [r4, #0]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    6a06:	896a      	ldrh	r2, [r5, #10]
    6a08:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        p_config->load_mode, p_config->step_mode);

    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    6a0c:	6822      	ldr	r2, [r4, #0]
    p_reg->SHORTS = mask;
    6a0e:	2300      	movs	r3, #0
    6a10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    nrf_pwm_int_set(p_instance->p_registers, 0);
    6a14:	6822      	ldr	r2, [r4, #0]
    p_reg->INTEN = mask;
    6a16:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
    6a1a:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a1c:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    6a20:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
    6a24:	6822      	ldr	r2, [r4, #0]
    6a26:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    6a2a:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
    6a2e:	6822      	ldr	r2, [r4, #0]
    6a30:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    6a34:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    6a38:	6822      	ldr	r2, [r4, #0]
    6a3a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    6a3e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    6a42:	230c      	movs	r3, #12
    6a44:	fb03 f308 	mul.w	r3, r3, r8
    6a48:	58f3      	ldr	r3, [r6, r3]
    6a4a:	b123      	cbz	r3, 6a56 <nrfx_pwm_init+0x15e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    6a4c:	6820      	ldr	r0, [r4, #0]
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    6a4e:	f340 3007 	sbfx	r0, r0, #12, #8
    6a52:	f7fc fd4b 	bl	34ec <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6a56:	230c      	movs	r3, #12
    6a58:	fb03 6608 	mla	r6, r3, r8, r6

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    6a5c:	4809      	ldr	r0, [pc, #36]	; (6a84 <nrfx_pwm_init+0x18c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6a5e:	2301      	movs	r3, #1
    6a60:	7233      	strb	r3, [r6, #8]
}
    6a62:	b007      	add	sp, #28
    6a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return err_code;
    6a68:	4807      	ldr	r0, [pc, #28]	; (6a88 <nrfx_pwm_init+0x190>)
    6a6a:	e7fa      	b.n	6a62 <nrfx_pwm_init+0x16a>
    6a6c:	0000ca95 	.word	0x0000ca95
    6a70:	0000b53f 	.word	0x0000b53f
    6a74:	0000ca5a 	.word	0x0000ca5a
    6a78:	20000a70 	.word	0x20000a70
    6a7c:	0000ca9e 	.word	0x0000ca9e
    6a80:	0000c724 	.word	0x0000c724
    6a84:	0bad0000 	.word	0x0bad0000
    6a88:	0bad0005 	.word	0x0bad0005

00006a8c <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    6a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a90:	4616      	mov	r6, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    6a92:	7902      	ldrb	r2, [r0, #4]
{
    6a94:	461d      	mov	r5, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    6a96:	4b31      	ldr	r3, [pc, #196]	; (6b5c <nrfx_pwm_simple_playback+0xd0>)
{
    6a98:	4688      	mov	r8, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    6a9a:	eb02 0742 	add.w	r7, r2, r2, lsl #1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    6a9e:	210c      	movs	r1, #12
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    6aa0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    6aa4:	fb01 3302 	mla	r3, r1, r2, r3
{
    6aa8:	4604      	mov	r4, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    6aaa:	7a1b      	ldrb	r3, [r3, #8]
    6aac:	b95b      	cbnz	r3, 6ac6 <nrfx_pwm_simple_playback+0x3a>
    6aae:	492c      	ldr	r1, [pc, #176]	; (6b60 <nrfx_pwm_simple_playback+0xd4>)
    6ab0:	4a2c      	ldr	r2, [pc, #176]	; (6b64 <nrfx_pwm_simple_playback+0xd8>)
    6ab2:	482d      	ldr	r0, [pc, #180]	; (6b68 <nrfx_pwm_simple_playback+0xdc>)
    6ab4:	f44f 7396 	mov.w	r3, #300	; 0x12c
    6ab8:	f003 fd05 	bl	a4c6 <assert_print>
    6abc:	f44f 7196 	mov.w	r1, #300	; 0x12c
    NRFX_ASSERT(playback_count > 0);
    6ac0:	4828      	ldr	r0, [pc, #160]	; (6b64 <nrfx_pwm_simple_playback+0xd8>)
    6ac2:	f003 fcf9 	bl	a4b8 <assert_post_action>
    6ac6:	b94e      	cbnz	r6, 6adc <nrfx_pwm_simple_playback+0x50>
    6ac8:	4928      	ldr	r1, [pc, #160]	; (6b6c <nrfx_pwm_simple_playback+0xe0>)
    6aca:	4a26      	ldr	r2, [pc, #152]	; (6b64 <nrfx_pwm_simple_playback+0xd8>)
    6acc:	4826      	ldr	r0, [pc, #152]	; (6b68 <nrfx_pwm_simple_playback+0xdc>)
    6ace:	f240 132d 	movw	r3, #301	; 0x12d
    6ad2:	f003 fcf8 	bl	a4c6 <assert_print>
    6ad6:	f240 112d 	movw	r1, #301	; 0x12d
    6ada:	e7f1      	b.n	6ac0 <nrfx_pwm_simple_playback+0x34>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    6adc:	f8d8 3000 	ldr.w	r3, [r8]
    6ae0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    6ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    6ae8:	d009      	beq.n	6afe <nrfx_pwm_simple_playback+0x72>
    6aea:	4921      	ldr	r1, [pc, #132]	; (6b70 <nrfx_pwm_simple_playback+0xe4>)
    6aec:	4a1d      	ldr	r2, [pc, #116]	; (6b64 <nrfx_pwm_simple_playback+0xd8>)
    6aee:	481e      	ldr	r0, [pc, #120]	; (6b68 <nrfx_pwm_simple_playback+0xdc>)
    6af0:	f44f 7397 	mov.w	r3, #302	; 0x12e
    6af4:	f003 fce7 	bl	a4c6 <assert_print>
    6af8:	f44f 7197 	mov.w	r1, #302	; 0x12e
    6afc:	e7e0      	b.n	6ac0 <nrfx_pwm_simple_playback+0x34>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    6afe:	6800      	ldr	r0, [r0, #0]
    6b00:	4642      	mov	r2, r8
    6b02:	2100      	movs	r1, #0
    6b04:	f7ff fe8c 	bl	6820 <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    6b08:	4642      	mov	r2, r8
    6b0a:	2101      	movs	r1, #1
    6b0c:	6820      	ldr	r0, [r4, #0]
    6b0e:	f7ff fe87 	bl	6820 <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
    6b12:	6822      	ldr	r2, [r4, #0]
    6b14:	f006 0301 	and.w	r3, r6, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    6b18:	eb03 0656 	add.w	r6, r3, r6, lsr #1
    6b1c:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    6b20:	f015 0f01 	tst.w	r5, #1
    6b24:	6821      	ldr	r1, [r4, #0]
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    6b26:	b2ea      	uxtb	r2, r5
    if (flags & NRFX_PWM_FLAG_STOP)
    6b28:	d112      	bne.n	6b50 <nrfx_pwm_simple_playback+0xc4>
    else if (flags & NRFX_PWM_FLAG_LOOP)
    6b2a:	f015 0502 	ands.w	r5, r5, #2
    6b2e:	d010      	beq.n	6b52 <nrfx_pwm_simple_playback+0xc6>
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    6b30:	b94b      	cbnz	r3, 6b46 <nrfx_pwm_simple_playback+0xba>
    p_reg->SHORTS = mask;
    6b32:	2304      	movs	r3, #4
    6b34:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
    6b38:	2308      	movs	r3, #8
    6b3a:	4639      	mov	r1, r7
    6b3c:	4620      	mov	r0, r4
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    6b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
    6b42:	f004 b81b 	b.w	ab7c <start_playback>
    6b46:	2308      	movs	r3, #8
    6b48:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    6b4c:	230c      	movs	r3, #12
    6b4e:	e7f4      	b.n	6b3a <nrfx_pwm_simple_playback+0xae>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    6b50:	2510      	movs	r5, #16
    6b52:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
    6b56:	2b00      	cmp	r3, #0
    6b58:	d1f8      	bne.n	6b4c <nrfx_pwm_simple_playback+0xc0>
    6b5a:	e7ed      	b.n	6b38 <nrfx_pwm_simple_playback+0xac>
    6b5c:	20000a70 	.word	0x20000a70
    6b60:	0000cabf 	.word	0x0000cabf
    6b64:	0000ca5a 	.word	0x0000ca5a
    6b68:	0000b53f 	.word	0x0000b53f
    6b6c:	0000caeb 	.word	0x0000caeb
    6b70:	0000cafe 	.word	0x0000cafe

00006b74 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    6b74:	b508      	push	{r3, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    6b76:	4a10      	ldr	r2, [pc, #64]	; (6bb8 <nrfx_pwm_is_stopped+0x44>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    6b78:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    6b7a:	210c      	movs	r1, #12
    6b7c:	fb01 2203 	mla	r2, r1, r3, r2
    6b80:	7a13      	ldrb	r3, [r2, #8]
    6b82:	b95b      	cbnz	r3, 6b9c <nrfx_pwm_is_stopped+0x28>
    6b84:	490d      	ldr	r1, [pc, #52]	; (6bbc <nrfx_pwm_is_stopped+0x48>)
    6b86:	480e      	ldr	r0, [pc, #56]	; (6bc0 <nrfx_pwm_is_stopped+0x4c>)
    6b88:	4a0e      	ldr	r2, [pc, #56]	; (6bc4 <nrfx_pwm_is_stopped+0x50>)
    6b8a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    6b8e:	f003 fc9a 	bl	a4c6 <assert_print>
    6b92:	480c      	ldr	r0, [pc, #48]	; (6bc4 <nrfx_pwm_is_stopped+0x50>)
    6b94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    6b98:	f003 fc8e 	bl	a4b8 <assert_post_action>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    6b9c:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    6b9e:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ba0:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    6ba4:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    6ba6:	b919      	cbnz	r1, 6bb0 <nrfx_pwm_is_stopped+0x3c>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    6ba8:	1e98      	subs	r0, r3, #2
    6baa:	bf18      	it	ne
    6bac:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    6bae:	bd08      	pop	{r3, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6bb0:	2001      	movs	r0, #1
    6bb2:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    6bb4:	e7fb      	b.n	6bae <nrfx_pwm_is_stopped+0x3a>
    6bb6:	bf00      	nop
    6bb8:	20000a70 	.word	0x20000a70
    6bbc:	0000cabf 	.word	0x0000cabf
    6bc0:	0000b53f 	.word	0x0000b53f
    6bc4:	0000ca5a 	.word	0x0000ca5a

00006bc8 <nrfx_pwm_stop>:
{
    6bc8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    6bca:	4b14      	ldr	r3, [pc, #80]	; (6c1c <nrfx_pwm_stop+0x54>)
    6bcc:	7902      	ldrb	r2, [r0, #4]
{
    6bce:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    6bd0:	210c      	movs	r1, #12
    6bd2:	fb01 3302 	mla	r3, r1, r2, r3
{
    6bd6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    6bd8:	7a1b      	ldrb	r3, [r3, #8]
    6bda:	b95b      	cbnz	r3, 6bf4 <nrfx_pwm_stop+0x2c>
    6bdc:	4910      	ldr	r1, [pc, #64]	; (6c20 <nrfx_pwm_stop+0x58>)
    6bde:	4811      	ldr	r0, [pc, #68]	; (6c24 <nrfx_pwm_stop+0x5c>)
    6be0:	4a11      	ldr	r2, [pc, #68]	; (6c28 <nrfx_pwm_stop+0x60>)
    6be2:	f240 1385 	movw	r3, #389	; 0x185
    6be6:	f003 fc6e 	bl	a4c6 <assert_print>
    6bea:	480f      	ldr	r0, [pc, #60]	; (6c28 <nrfx_pwm_stop+0x60>)
    6bec:	f240 1185 	movw	r1, #389	; 0x185
    6bf0:	f003 fc62 	bl	a4b8 <assert_post_action>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    6bf4:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
    6bf6:	2200      	movs	r2, #0
    6bf8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
    6bfc:	6803      	ldr	r3, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6bfe:	2201      	movs	r2, #1
    6c00:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    6c02:	f7ff ffb7 	bl	6b74 <nrfx_pwm_is_stopped>
    6c06:	b938      	cbnz	r0, 6c18 <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
    6c08:	4620      	mov	r0, r4
    6c0a:	f7ff ffb3 	bl	6b74 <nrfx_pwm_is_stopped>
    6c0e:	b918      	cbnz	r0, 6c18 <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
    6c10:	2d00      	cmp	r5, #0
    6c12:	d1f9      	bne.n	6c08 <nrfx_pwm_stop+0x40>
}
    6c14:	4628      	mov	r0, r5
    6c16:	bd38      	pop	{r3, r4, r5, pc}
                ret_val = true;
    6c18:	2501      	movs	r5, #1
    6c1a:	e7fb      	b.n	6c14 <nrfx_pwm_stop+0x4c>
    6c1c:	20000a70 	.word	0x20000a70
    6c20:	0000cb27 	.word	0x0000cb27
    6c24:	0000b53f 	.word	0x0000b53f
    6c28:	0000ca5a 	.word	0x0000ca5a

00006c2c <saadc_busy_check>:
    }
}

static bool saadc_busy_check(void)
{
    if ((m_cb.saadc_state == NRF_SAADC_STATE_IDLE)     ||
    6c2c:	4b05      	ldr	r3, [pc, #20]	; (6c44 <saadc_busy_check+0x18>)
    6c2e:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
    6c32:	1e43      	subs	r3, r0, #1
    6c34:	2b01      	cmp	r3, #1
    6c36:	d903      	bls.n	6c40 <saadc_busy_check+0x14>
    6c38:	3804      	subs	r0, #4
    6c3a:	bf18      	it	ne
    6c3c:	2001      	movne	r0, #1
    6c3e:	4770      	bx	lr
        (m_cb.saadc_state == NRF_SAADC_STATE_ADV_MODE) ||
        (m_cb.saadc_state == NRF_SAADC_STATE_SIMPLE_MODE))
    {
        return false;
    6c40:	2000      	movs	r0, #0
    }
    else
    {
        return true;
    }
}
    6c42:	4770      	bx	lr
    6c44:	20000a7c 	.word	0x20000a7c

00006c48 <saadc_channels_deconfig>:
{
    6c48:	b570      	push	{r4, r5, r6, lr}
    6c4a:	4a0d      	ldr	r2, [pc, #52]	; (6c80 <saadc_channels_deconfig+0x38>)
    while (channel_mask)
    6c4c:	2300      	movs	r3, #0
    6c4e:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
        channel_mask             &= ~(1 << channel);
    6c52:	2601      	movs	r6, #1
        m_cb.channels_pselp[channel] = NRF_SAADC_INPUT_DISABLED;
    6c54:	461c      	mov	r4, r3
    while (channel_mask)
    6c56:	b918      	cbnz	r0, 6c60 <saadc_channels_deconfig+0x18>
    6c58:	b10b      	cbz	r3, 6c5e <saadc_channels_deconfig+0x16>
    6c5a:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
}
    6c5e:	bd70      	pop	{r4, r5, r6, pc}
        uint8_t channel = NRF_CTZ(channel_mask);
    6c60:	fa90 f3a0 	rbit	r3, r0
    6c64:	fab3 f383 	clz	r3, r3
        channel_mask             &= ~(1 << channel);
    6c68:	fa06 f503 	lsl.w	r5, r6, r3
        m_cb.channels_pselp[channel] = NRF_SAADC_INPUT_DISABLED;
    6c6c:	4413      	add	r3, r2
        channel_mask             &= ~(1 << channel);
    6c6e:	ea20 0005 	bic.w	r0, r0, r5
        m_cb.channels_pselp[channel] = NRF_SAADC_INPUT_DISABLED;
    6c72:	769c      	strb	r4, [r3, #26]
        m_cb.channels_pseln[channel] = NRF_SAADC_INPUT_DISABLED;
    6c74:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
        m_cb.channels_configured &= ~(1 << channel);
    6c78:	ea21 0105 	bic.w	r1, r1, r5
        m_cb.channels_pseln[channel] = NRF_SAADC_INPUT_DISABLED;
    6c7c:	2301      	movs	r3, #1
    6c7e:	e7ea      	b.n	6c56 <saadc_channels_deconfig+0xe>
    6c80:	20000a7c 	.word	0x20000a7c

00006c84 <saadc_channel_count_get>:
{
    6c84:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(ch_to_activate_mask);
    6c86:	b948      	cbnz	r0, 6c9c <saadc_channel_count_get+0x18>
    6c88:	4914      	ldr	r1, [pc, #80]	; (6cdc <saadc_channel_count_get+0x58>)
    6c8a:	4a15      	ldr	r2, [pc, #84]	; (6ce0 <saadc_channel_count_get+0x5c>)
    6c8c:	4815      	ldr	r0, [pc, #84]	; (6ce4 <saadc_channel_count_get+0x60>)
    6c8e:	2380      	movs	r3, #128	; 0x80
    6c90:	f003 fc19 	bl	a4c6 <assert_print>
    6c94:	2180      	movs	r1, #128	; 0x80
    NRFX_ASSERT(ch_to_activate_mask < (1 << SAADC_CH_NUM));
    6c96:	4812      	ldr	r0, [pc, #72]	; (6ce0 <saadc_channel_count_get+0x5c>)
    6c98:	f003 fc0e 	bl	a4b8 <assert_post_action>
    6c9c:	28ff      	cmp	r0, #255	; 0xff
    6c9e:	d907      	bls.n	6cb0 <saadc_channel_count_get+0x2c>
    6ca0:	4911      	ldr	r1, [pc, #68]	; (6ce8 <saadc_channel_count_get+0x64>)
    6ca2:	4a0f      	ldr	r2, [pc, #60]	; (6ce0 <saadc_channel_count_get+0x5c>)
    6ca4:	480f      	ldr	r0, [pc, #60]	; (6ce4 <saadc_channel_count_get+0x60>)
    6ca6:	2381      	movs	r3, #129	; 0x81
    6ca8:	f003 fc0d 	bl	a4c6 <assert_print>
    6cac:	2181      	movs	r1, #129	; 0x81
    6cae:	e7f2      	b.n	6c96 <saadc_channel_count_get+0x12>
            if (!(m_cb.channels_configured & ch_mask))
    6cb0:	4b0e      	ldr	r3, [pc, #56]	; (6cec <saadc_channel_count_get+0x68>)
    6cb2:	2408      	movs	r4, #8
    6cb4:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
    for (uint32_t ch_mask = 1; ch_mask < (1 << SAADC_CH_NUM); ch_mask <<= 1)
    6cb8:	2201      	movs	r2, #1
    uint8_t active_ch_count = 0;
    6cba:	2300      	movs	r3, #0
        if (ch_to_activate_mask & ch_mask)
    6cbc:	4210      	tst	r0, r2
    6cbe:	d003      	beq.n	6cc8 <saadc_channel_count_get+0x44>
            if (!(m_cb.channels_configured & ch_mask))
    6cc0:	4215      	tst	r5, r2
    6cc2:	d008      	beq.n	6cd6 <saadc_channel_count_get+0x52>
            active_ch_count++;
    6cc4:	3301      	adds	r3, #1
    6cc6:	b2db      	uxtb	r3, r3
    for (uint32_t ch_mask = 1; ch_mask < (1 << SAADC_CH_NUM); ch_mask <<= 1)
    6cc8:	3c01      	subs	r4, #1
    6cca:	ea4f 0242 	mov.w	r2, r2, lsl #1
    6cce:	d1f5      	bne.n	6cbc <saadc_channel_count_get+0x38>
    return NRFX_SUCCESS;
    6cd0:	4807      	ldr	r0, [pc, #28]	; (6cf0 <saadc_channel_count_get+0x6c>)
    *p_active_ch_count = active_ch_count;
    6cd2:	700b      	strb	r3, [r1, #0]
}
    6cd4:	bd38      	pop	{r3, r4, r5, pc}
                return NRFX_ERROR_INVALID_PARAM;
    6cd6:	4807      	ldr	r0, [pc, #28]	; (6cf4 <saadc_channel_count_get+0x70>)
    6cd8:	e7fc      	b.n	6cd4 <saadc_channel_count_get+0x50>
    6cda:	bf00      	nop
    6cdc:	0000cbb2 	.word	0x0000cbb2
    6ce0:	0000cb75 	.word	0x0000cb75
    6ce4:	0000b53f 	.word	0x0000b53f
    6ce8:	0000cbc6 	.word	0x0000cbc6
    6cec:	20000a7c 	.word	0x20000a7c
    6cf0:	0bad0000 	.word	0x0bad0000
    6cf4:	0bad0004 	.word	0x0bad0004

00006cf8 <saadc_generic_mode_set>:
static void saadc_generic_mode_set(uint32_t                   ch_to_activate_mask,
                                   nrf_saadc_resolution_t     resolution,
                                   nrf_saadc_oversample_t     oversampling,
                                   nrf_saadc_burst_t          burst,
                                   nrfx_saadc_event_handler_t event_handler)
{
    6cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6cfc:	b093      	sub	sp, #76	; 0x4c
    6cfe:	469a      	mov	sl, r3
    6d00:	f10d 0c08 	add.w	ip, sp, #8
    6d04:	af0a      	add	r7, sp, #40	; 0x28
    6d06:	9d1c      	ldr	r5, [sp, #112]	; 0x70
        c[i] = NRF_SAADC->CH[i].CONFIG;
    6d08:	4b3d      	ldr	r3, [pc, #244]	; (6e00 <saadc_generic_mode_set+0x108>)
{
    6d0a:	463e      	mov	r6, r7
    6d0c:	46e0      	mov	r8, ip
    for (uint32_t i = 0; i < SAADC_CH_NUM; i++)
    6d0e:	2400      	movs	r4, #0
        c[i] = NRF_SAADC->CH[i].CONFIG;
    6d10:	eb03 1e04 	add.w	lr, r3, r4, lsl #4
    for (uint32_t i = 0; i < SAADC_CH_NUM; i++)
    6d14:	3401      	adds	r4, #1
        c[i] = NRF_SAADC->CH[i].CONFIG;
    6d16:	f8de 9518 	ldr.w	r9, [lr, #1304]	; 0x518
    6d1a:	f848 9b04 	str.w	r9, [r8], #4
    for (uint32_t i = 0; i < SAADC_CH_NUM; i++)
    6d1e:	2c08      	cmp	r4, #8
        l[i] = NRF_SAADC->CH[i].LIMIT;
    6d20:	f8de e51c 	ldr.w	lr, [lr, #1308]	; 0x51c
    6d24:	f846 eb04 	str.w	lr, [r6], #4
    for (uint32_t i = 0; i < SAADC_CH_NUM; i++)
    6d28:	d1f2      	bne.n	6d10 <saadc_generic_mode_set+0x18>
    return (nrf_saadc_resolution_t)p_reg->RESOLUTION;
    6d2a:	f8d3 65f0 	ldr.w	r6, [r3, #1520]	; 0x5f0
    uint32_t u640 = *(volatile uint32_t *)0x40007640;
    6d2e:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    6d32:	9401      	str	r4, [sp, #4]
    *(volatile uint32_t *)0x40007FFC = 1;
    6d34:	f04f 0e01 	mov.w	lr, #1
    *(volatile uint32_t *)0x40007FFC = 0;
    6d38:	2400      	movs	r4, #0
    uint32_t u644 = *(volatile uint32_t *)0x40007644;
    6d3a:	f8d3 9644 	ldr.w	r9, [r3, #1604]	; 0x644
    uint32_t u648 = *(volatile uint32_t *)0x40007648;
    6d3e:	f8d3 8648 	ldr.w	r8, [r3, #1608]	; 0x648
    *(volatile uint32_t *)0x40007FFC = 0;
    6d42:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
    *(volatile uint32_t *)0x40007FFC = 1;
    6d46:	f8c3 effc 	str.w	lr, [r3, #4092]	; 0xffc
        NRF_SAADC->CH[i].CONFIG = c[i];
    6d4a:	4b2d      	ldr	r3, [pc, #180]	; (6e00 <saadc_generic_mode_set+0x108>)
    6d4c:	f85c bb04 	ldr.w	fp, [ip], #4
    6d50:	eb03 1e04 	add.w	lr, r3, r4, lsl #4
    for (uint32_t i = 0; i < SAADC_CH_NUM; i++)
    6d54:	3401      	adds	r4, #1
        NRF_SAADC->CH[i].CONFIG = c[i];
    6d56:	f8ce b518 	str.w	fp, [lr, #1304]	; 0x518
        NRF_SAADC->CH[i].LIMIT = l[i];
    6d5a:	f857 bb04 	ldr.w	fp, [r7], #4
    6d5e:	f8ce b51c 	str.w	fp, [lr, #1308]	; 0x51c
    for (uint32_t i = 0; i < SAADC_CH_NUM; i++)
    6d62:	2c08      	cmp	r4, #8
    6d64:	d1f2      	bne.n	6d4c <saadc_generic_mode_set+0x54>
    *(volatile uint32_t *)0x40007640 = u640;
    6d66:	9c01      	ldr	r4, [sp, #4]
    6d68:	f8c3 4640 	str.w	r4, [r3, #1600]	; 0x640
    *(volatile uint32_t *)0x40007644 = u644;
    6d6c:	b2f6      	uxtb	r6, r6
    while (!nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_STOPPED))
    {}
    nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_STOPPED);
#endif

    m_cb.limits_low_activated = 0;
    6d6e:	4c25      	ldr	r4, [pc, #148]	; (6e04 <saadc_generic_mode_set+0x10c>)
    *(volatile uint32_t *)0x40007644 = u644;
    6d70:	f8c3 9644 	str.w	r9, [r3, #1604]	; 0x644
    *(volatile uint32_t *)0x40007648 = u648;
    6d74:	f8c3 8648 	str.w	r8, [r3, #1608]	; 0x648
    p_reg->RESOLUTION = resolution;
    6d78:	f8c3 65f0 	str.w	r6, [r3, #1520]	; 0x5f0
    m_cb.limits_low_activated = 0;
    6d7c:	2600      	movs	r6, #0
    m_cb.limits_high_activated = 0;

    m_cb.p_buffer_primary = NULL;
    m_cb.p_buffer_secondary = NULL;
    6d7e:	e9c4 6602 	strd	r6, r6, [r4, #8]
    m_cb.limits_low_activated = 0;
    6d82:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    m_cb.limits_high_activated = 0;
    6d86:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    m_cb.event_handler = event_handler;
    6d8a:	6025      	str	r5, [r4, #0]
    m_cb.channels_activated = ch_to_activate_mask;
    6d8c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    m_cb.samples_converted = 0;
    6d90:	8326      	strh	r6, [r4, #24]
    6d92:	f8c3 15f0 	str.w	r1, [r3, #1520]	; 0x5f0
    p_reg->OVERSAMPLE = oversample;
    6d96:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4

    nrf_saadc_resolution_set(NRF_SAADC, resolution);
    nrf_saadc_oversample_set(NRF_SAADC, oversampling);
    if (event_handler)
    6d9a:	b375      	cbz	r5, 6dfa <saadc_generic_mode_set+0x102>
    p_reg->INTEN = mask;
    6d9c:	2223      	movs	r2, #35	; 0x23
    6d9e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    else
    {
        nrf_saadc_int_set(NRF_SAADC, 0);
    }

    for (uint32_t ch_pos = 0; ch_pos < SAADC_CH_NUM; ch_pos++)
    6da2:	4d18      	ldr	r5, [pc, #96]	; (6e04 <saadc_generic_mode_set+0x10c>)
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    6da4:	4e16      	ldr	r6, [pc, #88]	; (6e00 <saadc_generic_mode_set+0x108>)
    for (uint32_t i = 0; i < SAADC_CH_NUM; i++)
    6da6:	2400      	movs	r4, #0
    {
        nrf_saadc_burst_t burst_to_set;
        nrf_saadc_input_t pselp;
        nrf_saadc_input_t pseln;
        if (ch_to_activate_mask & (1 << ch_pos))
    6da8:	2701      	movs	r7, #1
    6daa:	eb06 1e04 	add.w	lr, r6, r4, lsl #4
    6dae:	fa07 f304 	lsl.w	r3, r7, r4
    6db2:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
    6db6:	0122      	lsls	r2, r4, #4
    6db8:	4003      	ands	r3, r0
        {
            pselp = m_cb.channels_pselp[ch_pos];
    6dba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
            pseln = m_cb.channels_pseln[ch_pos];
            burst_to_set = burst;
    6dbe:	bf14      	ite	ne
    6dc0:	46d0      	movne	r8, sl
        }
        else
        {
            pselp = NRF_SAADC_INPUT_DISABLED;
            pseln = NRF_SAADC_INPUT_DISABLED;
            burst_to_set = NRF_SAADC_BURST_DISABLED;
    6dc2:	4698      	moveq	r8, r3
    6dc4:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    6dc8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
    for (uint32_t ch_pos = 0; ch_pos < SAADC_CH_NUM; ch_pos++)
    6dcc:	f104 0401 	add.w	r4, r4, #1
            pselp = m_cb.channels_pselp[ch_pos];
    6dd0:	bf1a      	itte	ne
    6dd2:	f895 c01a 	ldrbne.w	ip, [r5, #26]
            pseln = m_cb.channels_pseln[ch_pos];
    6dd6:	f895 3022 	ldrbne.w	r3, [r5, #34]	; 0x22
            pselp = NRF_SAADC_INPUT_DISABLED;
    6dda:	469c      	moveq	ip, r3
    6ddc:	ea41 6108 	orr.w	r1, r1, r8, lsl #24
    for (uint32_t ch_pos = 0; ch_pos < SAADC_CH_NUM; ch_pos++)
    6de0:	2c08      	cmp	r4, #8
    6de2:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    6de6:	f105 0501 	add.w	r5, r5, #1
    p_reg->CH[channel].PSELN = pseln;
    6dea:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    6dee:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    6df2:	d1da      	bne.n	6daa <saadc_generic_mode_set+0xb2>
        }
        nrf_saadc_burst_set(NRF_SAADC, ch_pos, burst_to_set);
        nrf_saadc_channel_input_set(NRF_SAADC, ch_pos, pselp, pseln);
    }
}
    6df4:	b013      	add	sp, #76	; 0x4c
    6df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p_reg->INTEN = mask;
    6dfa:	f8c3 5300 	str.w	r5, [r3, #768]	; 0x300
    for (uint32_t ch_pos = 0; ch_pos < SAADC_CH_NUM; ch_pos++)
    6dfe:	e7d0      	b.n	6da2 <saadc_generic_mode_set+0xaa>
    6e00:	40007000 	.word	0x40007000
    6e04:	20000a7c 	.word	0x20000a7c

00006e08 <saadc_channel_config>:
{
    6e08:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel->pin_p != NRF_SAADC_INPUT_DISABLED);
    6e0a:	79c3      	ldrb	r3, [r0, #7]
    6e0c:	b94b      	cbnz	r3, 6e22 <saadc_channel_config+0x1a>
    6e0e:	4923      	ldr	r1, [pc, #140]	; (6e9c <saadc_channel_config+0x94>)
    6e10:	4823      	ldr	r0, [pc, #140]	; (6ea0 <saadc_channel_config+0x98>)
    6e12:	4a24      	ldr	r2, [pc, #144]	; (6ea4 <saadc_channel_config+0x9c>)
    6e14:	2397      	movs	r3, #151	; 0x97
    6e16:	f003 fb56 	bl	a4c6 <assert_print>
    6e1a:	4822      	ldr	r0, [pc, #136]	; (6ea4 <saadc_channel_config+0x9c>)
    6e1c:	2197      	movs	r1, #151	; 0x97
    6e1e:	f003 fb4b 	bl	a4b8 <assert_post_action>
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
    6e22:	7843      	ldrb	r3, [r0, #1]
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    6e24:	7881      	ldrb	r1, [r0, #2]
    p_reg->CH[channel].CONFIG =
    6e26:	7a42      	ldrb	r2, [r0, #9]
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
    6e28:	011b      	lsls	r3, r3, #4
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    6e2a:	0209      	lsls	r1, r1, #8
    6e2c:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
    6e30:	f003 0330 	and.w	r3, r3, #48	; 0x30
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    6e34:	430b      	orrs	r3, r1
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
    6e36:	7801      	ldrb	r1, [r0, #0]
    6e38:	f001 0103 	and.w	r1, r1, #3
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    6e3c:	430b      	orrs	r3, r1
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
    6e3e:	78c1      	ldrb	r1, [r0, #3]
    6e40:	0309      	lsls	r1, r1, #12
    6e42:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
    6e46:	430b      	orrs	r3, r1
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
    6e48:	7901      	ldrb	r1, [r0, #4]
    6e4a:	0409      	lsls	r1, r1, #16
    6e4c:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
    6e50:	430b      	orrs	r3, r1
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    6e52:	7941      	ldrb	r1, [r0, #5]
    6e54:	0509      	lsls	r1, r1, #20
    6e56:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
    6e5a:	430b      	orrs	r3, r1
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
    6e5c:	7981      	ldrb	r1, [r0, #6]
    p_reg->CH[channel].CONFIG =
    6e5e:	0112      	lsls	r2, r2, #4
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
    6e60:	0609      	lsls	r1, r1, #24
    p_reg->CH[channel].CONFIG =
    6e62:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
    6e66:	f001 7180 	and.w	r1, r1, #16777216	; 0x1000000
    p_reg->CH[channel].CONFIG =
    6e6a:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
    6e6e:	430b      	orrs	r3, r1
    p_reg->CH[channel].CONFIG =
    6e70:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    m_cb.channels_pselp[p_channel->channel_index] = p_channel->pin_p;
    6e74:	7a43      	ldrb	r3, [r0, #9]
    6e76:	4a0c      	ldr	r2, [pc, #48]	; (6ea8 <saadc_channel_config+0xa0>)
    6e78:	79c1      	ldrb	r1, [r0, #7]
    6e7a:	4413      	add	r3, r2
    6e7c:	7699      	strb	r1, [r3, #26]
    m_cb.channels_pseln[p_channel->channel_index] = p_channel->pin_n;
    6e7e:	7a43      	ldrb	r3, [r0, #9]
    6e80:	7a01      	ldrb	r1, [r0, #8]
    6e82:	4413      	add	r3, r2
    6e84:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    m_cb.channels_configured |= 1U << p_channel->channel_index;
    6e88:	7a41      	ldrb	r1, [r0, #9]
    6e8a:	2301      	movs	r3, #1
    6e8c:	408b      	lsls	r3, r1
    6e8e:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
    6e92:	430b      	orrs	r3, r1
    6e94:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
}
    6e98:	bd08      	pop	{r3, pc}
    6e9a:	bf00      	nop
    6e9c:	0000cbe5 	.word	0x0000cbe5
    6ea0:	0000b53f 	.word	0x0000b53f
    6ea4:	0000cb75 	.word	0x0000cb75
    6ea8:	20000a7c 	.word	0x20000a7c

00006eac <nrfx_saadc_init>:

nrfx_err_t nrfx_saadc_init(uint8_t interrupt_priority)
{
    6eac:	b538      	push	{r3, r4, r5, lr}
    nrfx_err_t err_code;
    if (m_cb.saadc_state != NRF_SAADC_STATE_UNINITIALIZED)
    6eae:	4d12      	ldr	r5, [pc, #72]	; (6ef8 <nrfx_saadc_init+0x4c>)
    6eb0:	f895 402a 	ldrb.w	r4, [r5, #42]	; 0x2a
    6eb4:	b9f4      	cbnz	r4, 6ef4 <nrfx_saadc_init+0x48>
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    m_cb.saadc_state = NRF_SAADC_STATE_IDLE;
    6eb6:	2301      	movs	r3, #1
    6eb8:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ebc:	4b0f      	ldr	r3, [pc, #60]	; (6efc <nrfx_saadc_init+0x50>)
    6ebe:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    6ec2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    6ec6:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
    6eca:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    6ece:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    6ed2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    6ed6:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    6eda:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTEN = mask;
    6ede:	f8c3 4300 	str.w	r4, [r3, #768]	; 0x300
    nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_STARTED);
    nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_STOPPED);
    nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
    nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
    nrf_saadc_int_set(NRF_SAADC, 0);
    saadc_channels_deconfig(SAADC_ALL_CHANNELS_MASK);
    6ee2:	20ff      	movs	r0, #255	; 0xff
    6ee4:	f7ff feb0 	bl	6c48 <saadc_channels_deconfig>
    NRFX_IRQ_ENABLE(SAADC_IRQn);
    6ee8:	2007      	movs	r0, #7
    6eea:	f7fc faff 	bl	34ec <arch_irq_enable>
    m_cb.event_handler = NULL;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));

    return err_code;
    6eee:	4804      	ldr	r0, [pc, #16]	; (6f00 <nrfx_saadc_init+0x54>)
    m_cb.event_handler = NULL;
    6ef0:	602c      	str	r4, [r5, #0]
}
    6ef2:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    6ef4:	4803      	ldr	r0, [pc, #12]	; (6f04 <nrfx_saadc_init+0x58>)
    6ef6:	e7fc      	b.n	6ef2 <nrfx_saadc_init+0x46>
    6ef8:	20000a7c 	.word	0x20000a7c
    6efc:	40007000 	.word	0x40007000
    6f00:	0bad0000 	.word	0x0bad0000
    6f04:	0bad0005 	.word	0x0bad0005

00006f08 <nrfx_saadc_channel_config>:

    return NRFX_SUCCESS;
}

nrfx_err_t nrfx_saadc_channel_config(nrfx_saadc_channel_t const * p_channel)
{
    6f08:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_cb.saadc_state != NRF_SAADC_STATE_UNINITIALIZED);
    6f0a:	4b13      	ldr	r3, [pc, #76]	; (6f58 <nrfx_saadc_channel_config+0x50>)
    6f0c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
{
    6f10:	4602      	mov	r2, r0
    NRFX_ASSERT(m_cb.saadc_state != NRF_SAADC_STATE_UNINITIALIZED);
    6f12:	b95b      	cbnz	r3, 6f2c <nrfx_saadc_channel_config+0x24>
    6f14:	4911      	ldr	r1, [pc, #68]	; (6f5c <nrfx_saadc_channel_config+0x54>)
    6f16:	4a12      	ldr	r2, [pc, #72]	; (6f60 <nrfx_saadc_channel_config+0x58>)
    6f18:	4812      	ldr	r0, [pc, #72]	; (6f64 <nrfx_saadc_channel_config+0x5c>)
    6f1a:	f44f 73a4 	mov.w	r3, #328	; 0x148
    6f1e:	f003 fad2 	bl	a4c6 <assert_print>
    6f22:	f44f 71a4 	mov.w	r1, #328	; 0x148
    NRFX_ASSERT(p_channel);
    6f26:	480e      	ldr	r0, [pc, #56]	; (6f60 <nrfx_saadc_channel_config+0x58>)
    6f28:	f003 fac6 	bl	a4b8 <assert_post_action>
    6f2c:	b948      	cbnz	r0, 6f42 <nrfx_saadc_channel_config+0x3a>
    6f2e:	490e      	ldr	r1, [pc, #56]	; (6f68 <nrfx_saadc_channel_config+0x60>)
    6f30:	4a0b      	ldr	r2, [pc, #44]	; (6f60 <nrfx_saadc_channel_config+0x58>)
    6f32:	480c      	ldr	r0, [pc, #48]	; (6f64 <nrfx_saadc_channel_config+0x5c>)
    6f34:	f240 1349 	movw	r3, #329	; 0x149
    6f38:	f003 fac5 	bl	a4c6 <assert_print>
    6f3c:	f240 1149 	movw	r1, #329	; 0x149
    6f40:	e7f1      	b.n	6f26 <nrfx_saadc_channel_config+0x1e>

    if (saadc_busy_check())
    6f42:	f7ff fe73 	bl	6c2c <saadc_busy_check>
    6f46:	b920      	cbnz	r0, 6f52 <nrfx_saadc_channel_config+0x4a>
    {
        return NRFX_ERROR_BUSY;
    }

    saadc_channel_config(p_channel);
    6f48:	4610      	mov	r0, r2
    6f4a:	f7ff ff5d 	bl	6e08 <saadc_channel_config>

    return NRFX_SUCCESS;
    6f4e:	4807      	ldr	r0, [pc, #28]	; (6f6c <nrfx_saadc_channel_config+0x64>)
}
    6f50:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_BUSY;
    6f52:	4807      	ldr	r0, [pc, #28]	; (6f70 <nrfx_saadc_channel_config+0x68>)
    6f54:	e7fc      	b.n	6f50 <nrfx_saadc_channel_config+0x48>
    6f56:	bf00      	nop
    6f58:	20000a7c 	.word	0x20000a7c
    6f5c:	0000cc12 	.word	0x0000cc12
    6f60:	0000cb75 	.word	0x0000cb75
    6f64:	0000b53f 	.word	0x0000b53f
    6f68:	0000c980 	.word	0x0000c980
    6f6c:	0bad0000 	.word	0x0bad0000
    6f70:	0bad000b 	.word	0x0bad000b

00006f74 <nrfx_saadc_channels_configured_get>:

uint32_t nrfx_saadc_channels_configured_get(void)
{
    6f74:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_cb.saadc_state != NRF_SAADC_STATE_UNINITIALIZED);
    6f76:	4b09      	ldr	r3, [pc, #36]	; (6f9c <nrfx_saadc_channels_configured_get+0x28>)
    6f78:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    6f7c:	b95a      	cbnz	r2, 6f96 <nrfx_saadc_channels_configured_get+0x22>
    6f7e:	4908      	ldr	r1, [pc, #32]	; (6fa0 <nrfx_saadc_channels_configured_get+0x2c>)
    6f80:	4808      	ldr	r0, [pc, #32]	; (6fa4 <nrfx_saadc_channels_configured_get+0x30>)
    6f82:	4a09      	ldr	r2, [pc, #36]	; (6fa8 <nrfx_saadc_channels_configured_get+0x34>)
    6f84:	f240 1357 	movw	r3, #343	; 0x157
    6f88:	f003 fa9d 	bl	a4c6 <assert_print>
    6f8c:	4806      	ldr	r0, [pc, #24]	; (6fa8 <nrfx_saadc_channels_configured_get+0x34>)
    6f8e:	f240 1157 	movw	r1, #343	; 0x157
    6f92:	f003 fa91 	bl	a4b8 <assert_post_action>

    return m_cb.channels_configured;
}
    6f96:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
    6f9a:	bd08      	pop	{r3, pc}
    6f9c:	20000a7c 	.word	0x20000a7c
    6fa0:	0000cc12 	.word	0x0000cc12
    6fa4:	0000b53f 	.word	0x0000b53f
    6fa8:	0000cb75 	.word	0x0000cb75

00006fac <nrfx_saadc_simple_mode_set>:

nrfx_err_t nrfx_saadc_simple_mode_set(uint32_t                   channel_mask,
                                      nrf_saadc_resolution_t     resolution,
                                      nrf_saadc_oversample_t     oversampling,
                                      nrfx_saadc_event_handler_t event_handler)
{
    6fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.saadc_state != NRF_SAADC_STATE_UNINITIALIZED);
    6fb0:	4f1b      	ldr	r7, [pc, #108]	; (7020 <nrfx_saadc_simple_mode_set+0x74>)
{
    6fb2:	4699      	mov	r9, r3
    NRFX_ASSERT(m_cb.saadc_state != NRF_SAADC_STATE_UNINITIALIZED);
    6fb4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
{
    6fb8:	b085      	sub	sp, #20
    6fba:	4605      	mov	r5, r0
    6fbc:	4688      	mov	r8, r1
    6fbe:	4616      	mov	r6, r2
    NRFX_ASSERT(m_cb.saadc_state != NRF_SAADC_STATE_UNINITIALIZED);
    6fc0:	b95b      	cbnz	r3, 6fda <nrfx_saadc_simple_mode_set+0x2e>
    6fc2:	4918      	ldr	r1, [pc, #96]	; (7024 <nrfx_saadc_simple_mode_set+0x78>)
    6fc4:	4818      	ldr	r0, [pc, #96]	; (7028 <nrfx_saadc_simple_mode_set+0x7c>)
    6fc6:	4a19      	ldr	r2, [pc, #100]	; (702c <nrfx_saadc_simple_mode_set+0x80>)
    6fc8:	f240 136f 	movw	r3, #367	; 0x16f
    6fcc:	f003 fa7b 	bl	a4c6 <assert_print>
    6fd0:	4816      	ldr	r0, [pc, #88]	; (702c <nrfx_saadc_simple_mode_set+0x80>)
    6fd2:	f240 116f 	movw	r1, #367	; 0x16f
    6fd6:	f003 fa6f 	bl	a4b8 <assert_post_action>

    if (saadc_busy_check())
    6fda:	f7ff fe27 	bl	6c2c <saadc_busy_check>
    6fde:	b9e8      	cbnz	r0, 701c <nrfx_saadc_simple_mode_set+0x70>
    {
        return NRFX_ERROR_BUSY;
    }

    uint8_t active_ch_count;
    nrfx_err_t err = saadc_channel_count_get(channel_mask, &active_ch_count);
    6fe0:	f10d 010f 	add.w	r1, sp, #15
    6fe4:	4628      	mov	r0, r5
    6fe6:	f7ff fe4d 	bl	6c84 <saadc_channel_count_get>
    if (err != NRFX_SUCCESS)
    6fea:	4b11      	ldr	r3, [pc, #68]	; (7030 <nrfx_saadc_simple_mode_set+0x84>)
    6fec:	4298      	cmp	r0, r3
    nrfx_err_t err = saadc_channel_count_get(channel_mask, &active_ch_count);
    6fee:	4604      	mov	r4, r0
    if (err != NRFX_SUCCESS)
    6ff0:	d110      	bne.n	7014 <nrfx_saadc_simple_mode_set+0x68>
    {
        // Burst is implicitly enabled if oversampling is enabled.
        burst = NRF_SAADC_BURST_ENABLED;
    }

    saadc_generic_mode_set(channel_mask,
    6ff2:	1e33      	subs	r3, r6, #0
    6ff4:	bf18      	it	ne
    6ff6:	2301      	movne	r3, #1
    6ff8:	f8cd 9000 	str.w	r9, [sp]
    6ffc:	4632      	mov	r2, r6
    6ffe:	4641      	mov	r1, r8
    7000:	4628      	mov	r0, r5
    7002:	f7ff fe79 	bl	6cf8 <saadc_generic_mode_set>
                           resolution,
                           oversampling,
                           burst,
                           event_handler);

    m_cb.channels_activated_count = active_ch_count;
    7006:	f89d 300f 	ldrb.w	r3, [sp, #15]
    700a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    m_cb.saadc_state = NRF_SAADC_STATE_SIMPLE_MODE;
    700e:	2302      	movs	r3, #2
    7010:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

    return NRFX_SUCCESS;
}
    7014:	4620      	mov	r0, r4
    7016:	b005      	add	sp, #20
    7018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return NRFX_ERROR_BUSY;
    701c:	4c05      	ldr	r4, [pc, #20]	; (7034 <nrfx_saadc_simple_mode_set+0x88>)
    701e:	e7f9      	b.n	7014 <nrfx_saadc_simple_mode_set+0x68>
    7020:	20000a7c 	.word	0x20000a7c
    7024:	0000cc12 	.word	0x0000cc12
    7028:	0000b53f 	.word	0x0000b53f
    702c:	0000cb75 	.word	0x0000cb75
    7030:	0bad0000 	.word	0x0bad0000
    7034:	0bad000b 	.word	0x0bad000b

00007038 <nrfx_saadc_buffer_set>:

    return NRFX_SUCCESS;
}

nrfx_err_t nrfx_saadc_buffer_set(nrf_saadc_value_t * p_buffer, uint16_t size)
{
    7038:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb.saadc_state != NRF_SAADC_STATE_UNINITIALIZED);
    703a:	4b20      	ldr	r3, [pc, #128]	; (70bc <nrfx_saadc_buffer_set+0x84>)
    703c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    7040:	b95a      	cbnz	r2, 705a <nrfx_saadc_buffer_set+0x22>
    7042:	491f      	ldr	r1, [pc, #124]	; (70c0 <nrfx_saadc_buffer_set+0x88>)
    7044:	481f      	ldr	r0, [pc, #124]	; (70c4 <nrfx_saadc_buffer_set+0x8c>)
    7046:	4a20      	ldr	r2, [pc, #128]	; (70c8 <nrfx_saadc_buffer_set+0x90>)
    7048:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
    704c:	f003 fa3b 	bl	a4c6 <assert_print>
    7050:	481d      	ldr	r0, [pc, #116]	; (70c8 <nrfx_saadc_buffer_set+0x90>)
    7052:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    7056:	f003 fa2f 	bl	a4b8 <assert_post_action>

    if (m_cb.p_buffer_secondary)
    705a:	68dc      	ldr	r4, [r3, #12]
    705c:	bb44      	cbnz	r4, 70b0 <nrfx_saadc_buffer_set+0x78>
    705e:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    if (!nrfx_is_in_ram(p_buffer))
    7062:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    7066:	d125      	bne.n	70b4 <nrfx_saadc_buffer_set+0x7c>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((size % m_cb.channels_activated_count != 0) ||
    7068:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
    706c:	fbb1 f5f4 	udiv	r5, r1, r4
    7070:	fb04 1515 	mls	r5, r4, r5, r1
    7074:	bb05      	cbnz	r5, 70b8 <nrfx_saadc_buffer_set+0x80>
    7076:	b20d      	sxth	r5, r1
    7078:	2d00      	cmp	r5, #0
    707a:	dd1d      	ble.n	70b8 <nrfx_saadc_buffer_set+0x80>
        (!size))
    {
        return NRFX_ERROR_INVALID_LENGTH;
    }

    switch (m_cb.saadc_state)
    707c:	2a05      	cmp	r2, #5
    707e:	d805      	bhi.n	708c <nrfx_saadc_buffer_set+0x54>
    7080:	2a03      	cmp	r2, #3
    7082:	d80a      	bhi.n	709a <nrfx_saadc_buffer_set+0x62>
    7084:	2a02      	cmp	r2, #2
    7086:	d00d      	beq.n	70a4 <nrfx_saadc_buffer_set+0x6c>
    7088:	4810      	ldr	r0, [pc, #64]	; (70cc <nrfx_saadc_buffer_set+0x94>)
        default:
            return NRFX_ERROR_INVALID_STATE;
    }

    return NRFX_SUCCESS;
}
    708a:	bd38      	pop	{r3, r4, r5, pc}
    switch (m_cb.saadc_state)
    708c:	2a06      	cmp	r2, #6
    708e:	d1fb      	bne.n	7088 <nrfx_saadc_buffer_set+0x50>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    7090:	4a0f      	ldr	r2, [pc, #60]	; (70d0 <nrfx_saadc_buffer_set+0x98>)
    7092:	f8c2 062c 	str.w	r0, [r2, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    7096:	f8c2 1630 	str.w	r1, [r2, #1584]	; 0x630
            if (m_cb.p_buffer_primary)
    709a:	689a      	ldr	r2, [r3, #8]
    709c:	b122      	cbz	r2, 70a8 <nrfx_saadc_buffer_set+0x70>
                m_cb.size_secondary     = size;
    709e:	82d9      	strh	r1, [r3, #22]
                m_cb.p_buffer_secondary = p_buffer;
    70a0:	60d8      	str	r0, [r3, #12]
    70a2:	e003      	b.n	70ac <nrfx_saadc_buffer_set+0x74>
            if (m_cb.channels_activated_count != size)
    70a4:	428c      	cmp	r4, r1
    70a6:	d107      	bne.n	70b8 <nrfx_saadc_buffer_set+0x80>
            m_cb.size_primary     = size;
    70a8:	8299      	strh	r1, [r3, #20]
            m_cb.p_buffer_primary = p_buffer;
    70aa:	6098      	str	r0, [r3, #8]
    return NRFX_SUCCESS;
    70ac:	4809      	ldr	r0, [pc, #36]	; (70d4 <nrfx_saadc_buffer_set+0x9c>)
    70ae:	e7ec      	b.n	708a <nrfx_saadc_buffer_set+0x52>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    70b0:	4809      	ldr	r0, [pc, #36]	; (70d8 <nrfx_saadc_buffer_set+0xa0>)
    70b2:	e7ea      	b.n	708a <nrfx_saadc_buffer_set+0x52>
        return NRFX_ERROR_INVALID_ADDR;
    70b4:	4809      	ldr	r0, [pc, #36]	; (70dc <nrfx_saadc_buffer_set+0xa4>)
    70b6:	e7e8      	b.n	708a <nrfx_saadc_buffer_set+0x52>
        return NRFX_ERROR_INVALID_LENGTH;
    70b8:	4809      	ldr	r0, [pc, #36]	; (70e0 <nrfx_saadc_buffer_set+0xa8>)
    70ba:	e7e6      	b.n	708a <nrfx_saadc_buffer_set+0x52>
    70bc:	20000a7c 	.word	0x20000a7c
    70c0:	0000cc12 	.word	0x0000cc12
    70c4:	0000b53f 	.word	0x0000b53f
    70c8:	0000cb75 	.word	0x0000cb75
    70cc:	0bad0005 	.word	0x0bad0005
    70d0:	40007000 	.word	0x40007000
    70d4:	0bad0000 	.word	0x0bad0000
    70d8:	0bad000c 	.word	0x0bad000c
    70dc:	0bad000a 	.word	0x0bad000a
    70e0:	0bad0006 	.word	0x0bad0006

000070e4 <nrfx_saadc_mode_trigger>:

nrfx_err_t nrfx_saadc_mode_trigger(void)
{
    70e4:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.saadc_state != NRF_SAADC_STATE_UNINITIALIZED);
    70e6:	4b59      	ldr	r3, [pc, #356]	; (724c <nrfx_saadc_mode_trigger+0x168>)
    70e8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    70ec:	b95a      	cbnz	r2, 7106 <nrfx_saadc_mode_trigger+0x22>
    70ee:	4958      	ldr	r1, [pc, #352]	; (7250 <nrfx_saadc_mode_trigger+0x16c>)
    70f0:	4a58      	ldr	r2, [pc, #352]	; (7254 <nrfx_saadc_mode_trigger+0x170>)
    70f2:	4859      	ldr	r0, [pc, #356]	; (7258 <nrfx_saadc_mode_trigger+0x174>)
    70f4:	f240 2311 	movw	r3, #529	; 0x211
    70f8:	f003 f9e5 	bl	a4c6 <assert_print>
    70fc:	f240 2111 	movw	r1, #529	; 0x211
    NRFX_ASSERT(m_cb.saadc_state != NRF_SAADC_STATE_IDLE);
    7100:	4854      	ldr	r0, [pc, #336]	; (7254 <nrfx_saadc_mode_trigger+0x170>)
    7102:	f003 f9d9 	bl	a4b8 <assert_post_action>
    7106:	2a01      	cmp	r2, #1
    7108:	d109      	bne.n	711e <nrfx_saadc_mode_trigger+0x3a>
    710a:	4954      	ldr	r1, [pc, #336]	; (725c <nrfx_saadc_mode_trigger+0x178>)
    710c:	4a51      	ldr	r2, [pc, #324]	; (7254 <nrfx_saadc_mode_trigger+0x170>)
    710e:	4852      	ldr	r0, [pc, #328]	; (7258 <nrfx_saadc_mode_trigger+0x174>)
    7110:	f240 2312 	movw	r3, #530	; 0x212
    7114:	f003 f9d7 	bl	a4c6 <assert_print>
    7118:	f240 2112 	movw	r1, #530	; 0x212
    711c:	e7f0      	b.n	7100 <nrfx_saadc_mode_trigger+0x1c>

    if (!m_cb.p_buffer_primary)
    711e:	6899      	ldr	r1, [r3, #8]
    7120:	2900      	cmp	r1, #0
    7122:	f000 8090 	beq.w	7246 <nrfx_saadc_mode_trigger+0x162>
    {
        return NRFX_ERROR_NO_MEM;
    }

    nrfx_err_t result = NRFX_SUCCESS;
    switch (m_cb.saadc_state)
    7126:	2a02      	cmp	r2, #2
    7128:	d003      	beq.n	7132 <nrfx_saadc_mode_trigger+0x4e>
    712a:	2a04      	cmp	r2, #4
    712c:	d02b      	beq.n	7186 <nrfx_saadc_mode_trigger+0xa2>
    712e:	484c      	ldr	r0, [pc, #304]	; (7260 <nrfx_saadc_mode_trigger+0x17c>)
            result = NRFX_ERROR_INVALID_STATE;
            break;
    }

    return result;
}
    7130:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    7132:	4a4c      	ldr	r2, [pc, #304]	; (7264 <nrfx_saadc_mode_trigger+0x180>)
    7134:	2001      	movs	r0, #1
    7136:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
            nrf_saadc_buffer_init(NRF_SAADC, m_cb.p_buffer_primary, m_cb.size_primary);
    713a:	8a9c      	ldrh	r4, [r3, #20]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    713c:	f8c2 162c 	str.w	r1, [r2, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    7140:	f8c2 4630 	str.w	r4, [r2, #1584]	; 0x630
            if (m_cb.event_handler)
    7144:	6819      	ldr	r1, [r3, #0]
    7146:	b121      	cbz	r1, 7152 <nrfx_saadc_mode_trigger+0x6e>
                m_cb.saadc_state = NRF_SAADC_STATE_SIMPLE_MODE_SAMPLE;
    7148:	2103      	movs	r1, #3
    714a:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    714e:	6010      	str	r0, [r2, #0]
}
    7150:	e017      	b.n	7182 <nrfx_saadc_mode_trigger+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7152:	6010      	str	r0, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7154:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
                while (!nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_STARTED))
    7158:	2b00      	cmp	r3, #0
    715a:	d0fb      	beq.n	7154 <nrfx_saadc_mode_trigger+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    715c:	2300      	movs	r3, #0
    715e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    7162:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7166:	2301      	movs	r3, #1
    7168:	6053      	str	r3, [r2, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    716a:	4b3e      	ldr	r3, [pc, #248]	; (7264 <nrfx_saadc_mode_trigger+0x180>)
    716c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                while (!nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END))
    7170:	2a00      	cmp	r2, #0
    7172:	d0fb      	beq.n	716c <nrfx_saadc_mode_trigger+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7174:	2200      	movs	r2, #0
    7176:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    717a:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    717e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrfx_err_t result = NRFX_SUCCESS;
    7182:	4839      	ldr	r0, [pc, #228]	; (7268 <nrfx_saadc_mode_trigger+0x184>)
    7184:	e7d4      	b.n	7130 <nrfx_saadc_mode_trigger+0x4c>
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    7186:	4a37      	ldr	r2, [pc, #220]	; (7264 <nrfx_saadc_mode_trigger+0x180>)
    7188:	2001      	movs	r0, #1
    718a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
            if (m_cb.event_handler)
    718e:	681c      	ldr	r4, [r3, #0]
    7190:	b144      	cbz	r4, 71a4 <nrfx_saadc_mode_trigger+0xc0>
                m_cb.saadc_state = NRF_SAADC_STATE_ADV_MODE_SAMPLE;
    7192:	2405      	movs	r4, #5
    7194:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
                nrf_saadc_buffer_init(NRF_SAADC, m_cb.p_buffer_primary, m_cb.size_primary);
    7198:	8a9b      	ldrh	r3, [r3, #20]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    719a:	f8c2 162c 	str.w	r1, [r2, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    719e:	f8c2 3630 	str.w	r3, [r2, #1584]	; 0x630
    71a2:	e7d4      	b.n	714e <nrfx_saadc_mode_trigger+0x6a>
                                  &m_cb.p_buffer_primary[m_cb.samples_converted],
    71a4:	8b1d      	ldrh	r5, [r3, #24]
            nrf_saadc_buffer_init(NRF_SAADC,
    71a6:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
    71aa:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    71ae:	f8c2 162c 	str.w	r1, [r2, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    71b2:	f8c2 4630 	str.w	r4, [r2, #1584]	; 0x630
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    71b6:	6010      	str	r0, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    71b8:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
            while (!nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_STARTED))
    71bc:	2900      	cmp	r1, #0
    71be:	d0fb      	beq.n	71b8 <nrfx_saadc_mode_trigger+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    71c0:	2100      	movs	r1, #0
    71c2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    71c6:	f8d2 0100 	ldr.w	r0, [r2, #256]	; 0x100
            if (m_cb.oversampling_without_burst)
    71ca:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
    71ce:	2401      	movs	r4, #1
    71d0:	2800      	cmp	r0, #0
    71d2:	d036      	beq.n	7242 <nrfx_saadc_mode_trigger+0x15e>
    return (nrf_saadc_oversample_t)p_reg->OVERSAMPLE;
    71d4:	f8d2 05f4 	ldr.w	r0, [r2, #1524]	; 0x5f4
                for (uint32_t sample_idx = 0; sample_idx < samples_to_take; sample_idx++)
    71d8:	460a      	mov	r2, r1
    return (1 << (uint32_t)oversample);
    71da:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    71dc:	4921      	ldr	r1, [pc, #132]	; (7264 <nrfx_saadc_mode_trigger+0x180>)
    return (1 << (uint32_t)oversample);
    71de:	fa04 f000 	lsl.w	r0, r4, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    71e2:	4615      	mov	r5, r2
    71e4:	4282      	cmp	r2, r0
    71e6:	d121      	bne.n	722c <nrfx_saadc_mode_trigger+0x148>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    71e8:	4a1e      	ldr	r2, [pc, #120]	; (7264 <nrfx_saadc_mode_trigger+0x180>)
    71ea:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
            while (!nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END))
    71ee:	2900      	cmp	r1, #0
    71f0:	d0fb      	beq.n	71ea <nrfx_saadc_mode_trigger+0x106>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    71f2:	2100      	movs	r1, #0
    71f4:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
    71f8:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
            m_cb.samples_converted += m_cb.channels_activated_count;
    71fc:	8b18      	ldrh	r0, [r3, #24]
    71fe:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
    7202:	4402      	add	r2, r0
            if (m_cb.samples_converted < m_cb.size_primary)
    7204:	8a98      	ldrh	r0, [r3, #20]
            m_cb.samples_converted += m_cb.channels_activated_count;
    7206:	b292      	uxth	r2, r2
            if (m_cb.samples_converted < m_cb.size_primary)
    7208:	4290      	cmp	r0, r2
            m_cb.samples_converted += m_cb.channels_activated_count;
    720a:	831a      	strh	r2, [r3, #24]
                m_cb.p_buffer_primary   = m_cb.p_buffer_secondary;
    720c:	bf9f      	itttt	ls
    720e:	68da      	ldrls	r2, [r3, #12]
    7210:	609a      	strls	r2, [r3, #8]
                m_cb.size_primary       = m_cb.size_secondary;
    7212:	8ada      	ldrhls	r2, [r3, #22]
    7214:	829a      	strhls	r2, [r3, #20]
                m_cb.samples_converted  = 0;
    7216:	bf9c      	itt	ls
    7218:	8319      	strhls	r1, [r3, #24]
                m_cb.p_buffer_secondary = NULL;
    721a:	60d9      	strls	r1, [r3, #12]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    721c:	4b11      	ldr	r3, [pc, #68]	; (7264 <nrfx_saadc_mode_trigger+0x180>)
    nrfx_err_t result = NRFX_SUCCESS;
    721e:	bf94      	ite	ls
    7220:	4811      	ldrls	r0, [pc, #68]	; (7268 <nrfx_saadc_mode_trigger+0x184>)
                result = NRFX_ERROR_BUSY;
    7222:	4812      	ldrhi	r0, [pc, #72]	; (726c <nrfx_saadc_mode_trigger+0x188>)
    7224:	2200      	movs	r2, #0
    7226:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    722a:	e781      	b.n	7130 <nrfx_saadc_mode_trigger+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    722c:	f8c1 5108 	str.w	r5, [r1, #264]	; 0x108
    7230:	f8d1 6108 	ldr.w	r6, [r1, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7234:	604c      	str	r4, [r1, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7236:	f8d1 6108 	ldr.w	r6, [r1, #264]	; 0x108
                    while (!nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_DONE))
    723a:	2e00      	cmp	r6, #0
    723c:	d0fb      	beq.n	7236 <nrfx_saadc_mode_trigger+0x152>
                for (uint32_t sample_idx = 0; sample_idx < samples_to_take; sample_idx++)
    723e:	3201      	adds	r2, #1
    7240:	e7d0      	b.n	71e4 <nrfx_saadc_mode_trigger+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7242:	6054      	str	r4, [r2, #4]
}
    7244:	e7d0      	b.n	71e8 <nrfx_saadc_mode_trigger+0x104>
        return NRFX_ERROR_NO_MEM;
    7246:	480a      	ldr	r0, [pc, #40]	; (7270 <nrfx_saadc_mode_trigger+0x18c>)
    7248:	e772      	b.n	7130 <nrfx_saadc_mode_trigger+0x4c>
    724a:	bf00      	nop
    724c:	20000a7c 	.word	0x20000a7c
    7250:	0000cc12 	.word	0x0000cc12
    7254:	0000cb75 	.word	0x0000cb75
    7258:	0000b53f 	.word	0x0000b53f
    725c:	0000cc62 	.word	0x0000cc62
    7260:	0bad0005 	.word	0x0bad0005
    7264:	40007000 	.word	0x40007000
    7268:	0bad0000 	.word	0x0bad0000
    726c:	0bad000b 	.word	0x0bad000b
    7270:	0bad0002 	.word	0x0bad0002

00007274 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7274:	4b11      	ldr	r3, [pc, #68]	; (72bc <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    7276:	4912      	ldr	r1, [pc, #72]	; (72c0 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7278:	2203      	movs	r2, #3
    727a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    727c:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    727e:	4a11      	ldr	r2, [pc, #68]	; (72c4 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    7280:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    7282:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    7284:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7288:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    728a:	2200      	movs	r2, #0
    728c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    728e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7290:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    7292:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    7294:	490c      	ldr	r1, [pc, #48]	; (72c8 <_DoInit+0x54>)
    7296:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    7298:	2110      	movs	r1, #16
    729a:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    729c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    729e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    72a0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    72a2:	4a0a      	ldr	r2, [pc, #40]	; (72cc <_DoInit+0x58>)
    72a4:	6812      	ldr	r2, [r2, #0]
    72a6:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    72aa:	4a09      	ldr	r2, [pc, #36]	; (72d0 <_DoInit+0x5c>)
    72ac:	6810      	ldr	r0, [r2, #0]
    72ae:	8892      	ldrh	r2, [r2, #4]
    72b0:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    72b2:	2220      	movs	r2, #32
  STRCPY((char*)&p->acID[0], "SEGGER");
    72b4:	6018      	str	r0, [r3, #0]
  p->acID[6] = ' ';
    72b6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    72b8:	4770      	bx	lr
    72ba:	bf00      	nop
    72bc:	20000ab0 	.word	0x20000ab0
    72c0:	0000cc96 	.word	0x0000cc96
    72c4:	20000da5 	.word	0x20000da5
    72c8:	20000d95 	.word	0x20000d95
    72cc:	0000cc9f 	.word	0x0000cc9f
    72d0:	0000cca3 	.word	0x0000cca3

000072d4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    72d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    72d8:	4f21      	ldr	r7, [pc, #132]	; (7360 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    72da:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    72de:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    72e0:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    72e4:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    72e6:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    72e8:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    72ea:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    72ec:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    72ee:	d831      	bhi.n	7354 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    72f0:	f8d2 a020 	ldr.w	sl, [r2, #32]
    72f4:	ebaa 0905 	sub.w	r9, sl, r5
    72f8:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    72fc:	4294      	cmp	r4, r2
    72fe:	d811      	bhi.n	7324 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7300:	2318      	movs	r3, #24
    7302:	fb06 3303 	mla	r3, r6, r3, r3
    7306:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7308:	4622      	mov	r2, r4
    730a:	6858      	ldr	r0, [r3, #4]
    730c:	4641      	mov	r1, r8
    730e:	4428      	add	r0, r5
    7310:	f003 fd85 	bl	ae1e <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    7314:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    7316:	2318      	movs	r3, #24
    7318:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    731c:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    731e:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    7320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    7324:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    7326:	429c      	cmp	r4, r3
    7328:	d818      	bhi.n	735c <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    732a:	fb00 bb0b 	mla	fp, r0, fp, fp
    732e:	44bb      	add	fp, r7
    7330:	464a      	mov	r2, r9
    7332:	f8db 0004 	ldr.w	r0, [fp, #4]
    7336:	442c      	add	r4, r5
    7338:	4428      	add	r0, r5
    733a:	f003 fd70 	bl	ae1e <memcpy>
      if (NumBytes) {
    733e:	ebb4 040a 	subs.w	r4, r4, sl
    7342:	d0e8      	beq.n	7316 <SEGGER_RTT_WriteSkipNoLock+0x42>
    7344:	f8db 0004 	ldr.w	r0, [fp, #4]
    7348:	4622      	mov	r2, r4
    734a:	eb08 0109 	add.w	r1, r8, r9
    734e:	f003 fd66 	bl	ae1e <memcpy>
      return 1;
    7352:	e7e0      	b.n	7316 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    7354:	3b01      	subs	r3, #1
    7356:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    7358:	42a3      	cmp	r3, r4
    735a:	d2d1      	bcs.n	7300 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    735c:	2000      	movs	r0, #0
    735e:	e7df      	b.n	7320 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    7360:	20000ab0 	.word	0x20000ab0

00007364 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    7364:	4b03      	ldr	r3, [pc, #12]	; (7374 <SEGGER_RTT_HasDataUp+0x10>)
    7366:	2218      	movs	r2, #24
    7368:	fb02 3300 	mla	r3, r2, r0, r3
    736c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    736e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    7370:	1a80      	subs	r0, r0, r2
    7372:	4770      	bx	lr
    7374:	20000ab0 	.word	0x20000ab0

00007378 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    737c:	4605      	mov	r5, r0
    737e:	b086      	sub	sp, #24
    7380:	460f      	mov	r7, r1
	__asm__ volatile(
    7382:	f04f 0320 	mov.w	r3, #32
    7386:	f3ef 8811 	mrs	r8, BASEPRI
    738a:	f383 8812 	msr	BASEPRI_MAX, r3
    738e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7392:	f001 fe6b 	bl	906c <z_impl_z_current_get>
    7396:	2d04      	cmp	r5, #4
    7398:	bf96      	itet	ls
    739a:	4b29      	ldrls	r3, [pc, #164]	; (7440 <z_fatal_error+0xc8>)
    739c:	4b29      	ldrhi	r3, [pc, #164]	; (7444 <z_fatal_error+0xcc>)
    739e:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    73a2:	4929      	ldr	r1, [pc, #164]	; (7448 <z_fatal_error+0xd0>)
    73a4:	9503      	str	r5, [sp, #12]
    73a6:	2400      	movs	r4, #0
    73a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
    73ac:	4b27      	ldr	r3, [pc, #156]	; (744c <z_fatal_error+0xd4>)
    73ae:	9400      	str	r4, [sp, #0]
    73b0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    73b4:	4606      	mov	r6, r0
    73b6:	4623      	mov	r3, r4
    73b8:	2201      	movs	r2, #1
    73ba:	4620      	mov	r0, r4
    73bc:	f003 fc16 	bl	abec <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    73c0:	b16f      	cbz	r7, 73de <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    73c2:	69fb      	ldr	r3, [r7, #28]
    73c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    73c8:	b14b      	cbz	r3, 73de <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    73ca:	4b21      	ldr	r3, [pc, #132]	; (7450 <z_fatal_error+0xd8>)
    73cc:	491e      	ldr	r1, [pc, #120]	; (7448 <z_fatal_error+0xd0>)
    73ce:	9400      	str	r4, [sp, #0]
    73d0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    73d4:	2201      	movs	r2, #1
    73d6:	4623      	mov	r3, r4
    73d8:	4620      	mov	r0, r4
    73da:	f003 fc07 	bl	abec <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    73de:	b12e      	cbz	r6, 73ec <z_fatal_error+0x74>
    73e0:	4630      	mov	r0, r6
    73e2:	f003 fc45 	bl	ac70 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    73e6:	b108      	cbz	r0, 73ec <z_fatal_error+0x74>
    73e8:	7803      	ldrb	r3, [r0, #0]
    73ea:	b903      	cbnz	r3, 73ee <z_fatal_error+0x76>
		thread_name = "unknown";
    73ec:	4819      	ldr	r0, [pc, #100]	; (7454 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    73ee:	4b1a      	ldr	r3, [pc, #104]	; (7458 <z_fatal_error+0xe0>)
    73f0:	9302      	str	r3, [sp, #8]
    73f2:	2300      	movs	r3, #0
    73f4:	e9cd 6003 	strd	r6, r0, [sp, #12]
    73f8:	e9cd 3300 	strd	r3, r3, [sp]
    73fc:	4618      	mov	r0, r3
    73fe:	4912      	ldr	r1, [pc, #72]	; (7448 <z_fatal_error+0xd0>)
    7400:	2201      	movs	r2, #1
    7402:	f003 fbf3 	bl	abec <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    7406:	4639      	mov	r1, r7
    7408:	4628      	mov	r0, r5
    740a:	f7fe fb23 	bl	5a54 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    740e:	2d04      	cmp	r5, #4
    7410:	d10c      	bne.n	742c <z_fatal_error+0xb4>
    7412:	4912      	ldr	r1, [pc, #72]	; (745c <z_fatal_error+0xe4>)
    7414:	4a12      	ldr	r2, [pc, #72]	; (7460 <z_fatal_error+0xe8>)
    7416:	4813      	ldr	r0, [pc, #76]	; (7464 <z_fatal_error+0xec>)
    7418:	2393      	movs	r3, #147	; 0x93
    741a:	f003 f854 	bl	a4c6 <assert_print>
    741e:	4812      	ldr	r0, [pc, #72]	; (7468 <z_fatal_error+0xf0>)
    7420:	f003 f851 	bl	a4c6 <assert_print>
    7424:	480e      	ldr	r0, [pc, #56]	; (7460 <z_fatal_error+0xe8>)
    7426:	2193      	movs	r1, #147	; 0x93
    7428:	f003 f846 	bl	a4b8 <assert_post_action>
	__asm__ volatile(
    742c:	f388 8811 	msr	BASEPRI, r8
    7430:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7434:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7436:	b006      	add	sp, #24
    7438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    743c:	f7fc bd5a 	b.w	3ef4 <z_impl_k_thread_abort>
    7440:	0000b41c 	.word	0x0000b41c
    7444:	0000ccaa 	.word	0x0000ccaa
    7448:	0000b190 	.word	0x0000b190
    744c:	0000ccc0 	.word	0x0000ccc0
    7450:	0000cce8 	.word	0x0000cce8
    7454:	0000ccb8 	.word	0x0000ccb8
    7458:	0000cd09 	.word	0x0000cd09
    745c:	0000cd43 	.word	0x0000cd43
    7460:	0000cd21 	.word	0x0000cd21
    7464:	0000b53f 	.word	0x0000b53f
    7468:	0000cd60 	.word	0x0000cd60

0000746c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    746c:	4b10      	ldr	r3, [pc, #64]	; (74b0 <z_sys_init_run_level+0x44>)
{
    746e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7470:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7474:	3001      	adds	r0, #1
    7476:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    747a:	42a6      	cmp	r6, r4
    747c:	d800      	bhi.n	7480 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    747e:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    7480:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    7484:	b18d      	cbz	r5, 74aa <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    7486:	4628      	mov	r0, r5
    7488:	4798      	blx	r3
			if (rc != 0) {
    748a:	b138      	cbz	r0, 749c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    748c:	2800      	cmp	r0, #0
    748e:	bfb8      	it	lt
    7490:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    7492:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    7494:	28ff      	cmp	r0, #255	; 0xff
    7496:	bfa8      	it	ge
    7498:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    749a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    749c:	68ea      	ldr	r2, [r5, #12]
    749e:	7853      	ldrb	r3, [r2, #1]
    74a0:	f043 0301 	orr.w	r3, r3, #1
    74a4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    74a6:	3408      	adds	r4, #8
    74a8:	e7e7      	b.n	747a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    74aa:	4798      	blx	r3
    74ac:	e7fb      	b.n	74a6 <z_sys_init_run_level+0x3a>
    74ae:	bf00      	nop
    74b0:	0000b430 	.word	0x0000b430

000074b4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    74b4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    74b6:	4b0a      	ldr	r3, [pc, #40]	; (74e0 <bg_thread_main+0x2c>)
    74b8:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    74ba:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    74bc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    74be:	f7ff ffd5 	bl	746c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    74c2:	f003 fc98 	bl	adf6 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    74c6:	2004      	movs	r0, #4
    74c8:	f7ff ffd0 	bl	746c <z_sys_init_run_level>

	z_init_static_threads();
    74cc:	f000 fa52 	bl	7974 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    74d0:	f7f9 ff30 	bl	1334 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    74d4:	4a03      	ldr	r2, [pc, #12]	; (74e4 <bg_thread_main+0x30>)
    74d6:	7b13      	ldrb	r3, [r2, #12]
    74d8:	f023 0301 	bic.w	r3, r3, #1
    74dc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    74de:	bd08      	pop	{r3, pc}
    74e0:	200011a5 	.word	0x200011a5
    74e4:	200002e8 	.word	0x200002e8

000074e8 <z_bss_zero>:
{
    74e8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    74ea:	4803      	ldr	r0, [pc, #12]	; (74f8 <z_bss_zero+0x10>)
    74ec:	4a03      	ldr	r2, [pc, #12]	; (74fc <z_bss_zero+0x14>)
    74ee:	2100      	movs	r1, #0
    74f0:	1a12      	subs	r2, r2, r0
    74f2:	f003 fb8b 	bl	ac0c <z_early_memset>
}
    74f6:	bd08      	pop	{r3, pc}
    74f8:	20000248 	.word	0x20000248
    74fc:	200011a8 	.word	0x200011a8

00007500 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    7500:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    7502:	2300      	movs	r3, #0
{
    7504:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    7506:	2201      	movs	r2, #1
    7508:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    750c:	4e13      	ldr	r6, [pc, #76]	; (755c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    750e:	4d14      	ldr	r5, [pc, #80]	; (7560 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    7510:	9301      	str	r3, [sp, #4]
    7512:	220f      	movs	r2, #15
    7514:	e9cd 3202 	strd	r3, r2, [sp, #8]
    7518:	4912      	ldr	r1, [pc, #72]	; (7564 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    751a:	2314      	movs	r3, #20
    751c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    7520:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    7524:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    7526:	f44f 70c0 	mov.w	r0, #384	; 0x180
    752a:	fb00 1104 	mla	r1, r0, r4, r1
    752e:	4b0e      	ldr	r3, [pc, #56]	; (7568 <z_init_cpu+0x68>)
    7530:	9500      	str	r5, [sp, #0]
    7532:	f44f 72a0 	mov.w	r2, #320	; 0x140
    7536:	4630      	mov	r0, r6
    7538:	f000 f97e 	bl	7838 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    753c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    753e:	4a0b      	ldr	r2, [pc, #44]	; (756c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    7540:	60ee      	str	r6, [r5, #12]
    7542:	f023 0304 	bic.w	r3, r3, #4
    7546:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    7548:	f44f 6304 	mov.w	r3, #2112	; 0x840
    754c:	fb04 3303 	mla	r3, r4, r3, r3
    7550:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    7552:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    7554:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    7556:	b006      	add	sp, #24
    7558:	bd70      	pop	{r4, r5, r6, pc}
    755a:	bf00      	nop
    755c:	20000268 	.word	0x20000268
    7560:	20000b58 	.word	0x20000b58
    7564:	20001a00 	.word	0x20001a00
    7568:	00007ac9 	.word	0x00007ac9
    756c:	200011c0 	.word	0x200011c0

00007570 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    7570:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    7572:	2000      	movs	r0, #0
{
    7574:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    7576:	f7ff ff79 	bl	746c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    757a:	4b2e      	ldr	r3, [pc, #184]	; (7634 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    757c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7580:	4d2d      	ldr	r5, [pc, #180]	; (7638 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    7582:	4e2e      	ldr	r6, [pc, #184]	; (763c <z_cstart+0xcc>)
    7584:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7586:	4f2e      	ldr	r7, [pc, #184]	; (7640 <z_cstart+0xd0>)
    7588:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    758c:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    758e:	2400      	movs	r4, #0
    7590:	23e0      	movs	r3, #224	; 0xe0
    7592:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    7596:	77ec      	strb	r4, [r5, #31]
    7598:	762c      	strb	r4, [r5, #24]
    759a:	766c      	strb	r4, [r5, #25]
    759c:	76ac      	strb	r4, [r5, #26]
    759e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    75a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    75a4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    75a8:	626b      	str	r3, [r5, #36]	; 0x24
    75aa:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    75ae:	f7fc fc15 	bl	3ddc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    75b2:	f7fb ff2b 	bl	340c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    75b6:	f04f 33ff 	mov.w	r3, #4294967295
    75ba:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    75bc:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    75be:	f7fc fd93 	bl	40e8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    75c2:	f7fc fcad 	bl	3f20 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    75c6:	f7fb f8ef 	bl	27a8 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    75ca:	f240 1301 	movw	r3, #257	; 0x101
    75ce:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    75d2:	ab06      	add	r3, sp, #24
    75d4:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    75d6:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
    75da:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    75dc:	f003 fafa 	bl	abd4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    75e0:	2001      	movs	r0, #1
    75e2:	f7ff ff43 	bl	746c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    75e6:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    75e8:	4d16      	ldr	r5, [pc, #88]	; (7644 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    75ea:	f7ff ff3f 	bl	746c <z_sys_init_run_level>
	z_sched_init();
    75ee:	f001 fbc7 	bl	8d80 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    75f2:	4b15      	ldr	r3, [pc, #84]	; (7648 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    75f4:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    75f6:	9305      	str	r3, [sp, #20]
    75f8:	2301      	movs	r3, #1
    75fa:	4914      	ldr	r1, [pc, #80]	; (764c <z_cstart+0xdc>)
    75fc:	9400      	str	r4, [sp, #0]
    75fe:	e9cd 4303 	strd	r4, r3, [sp, #12]
    7602:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7606:	463b      	mov	r3, r7
    7608:	e9cd 4401 	strd	r4, r4, [sp, #4]
    760c:	4628      	mov	r0, r5
    760e:	f000 f913 	bl	7838 <z_setup_new_thread>
    7612:	7b6a      	ldrb	r2, [r5, #13]
    7614:	4606      	mov	r6, r0
    7616:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    761a:	4628      	mov	r0, r5
    761c:	736a      	strb	r2, [r5, #13]
    761e:	f000 fd95 	bl	814c <z_ready_thread>
	z_init_cpu(0);
    7622:	4620      	mov	r0, r4
    7624:	f7ff ff6c 	bl	7500 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7628:	463a      	mov	r2, r7
    762a:	4631      	mov	r1, r6
    762c:	4628      	mov	r0, r5
    762e:	f7fc f867 	bl	3700 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7632:	bf00      	nop
    7634:	20001a00 	.word	0x20001a00
    7638:	e000ed00 	.word	0xe000ed00
    763c:	20000b58 	.word	0x20000b58
    7640:	000074b5 	.word	0x000074b5
    7644:	200002e8 	.word	0x200002e8
    7648:	0000cddf 	.word	0x0000cddf
    764c:	20001b80 	.word	0x20001b80

00007650 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    7650:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7652:	4c0d      	ldr	r4, [pc, #52]	; (7688 <init_mem_slab_module+0x38>)
    7654:	4d0d      	ldr	r5, [pc, #52]	; (768c <init_mem_slab_module+0x3c>)
	int rc = 0;
    7656:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7658:	42ac      	cmp	r4, r5
    765a:	d913      	bls.n	7684 <init_mem_slab_module+0x34>
    765c:	490c      	ldr	r1, [pc, #48]	; (7690 <init_mem_slab_module+0x40>)
    765e:	4a0d      	ldr	r2, [pc, #52]	; (7694 <init_mem_slab_module+0x44>)
    7660:	480d      	ldr	r0, [pc, #52]	; (7698 <init_mem_slab_module+0x48>)
    7662:	233c      	movs	r3, #60	; 0x3c
    7664:	f002 ff2f 	bl	a4c6 <assert_print>
    7668:	480c      	ldr	r0, [pc, #48]	; (769c <init_mem_slab_module+0x4c>)
    766a:	f002 ff2c 	bl	a4c6 <assert_print>
    766e:	4809      	ldr	r0, [pc, #36]	; (7694 <init_mem_slab_module+0x44>)
    7670:	213c      	movs	r1, #60	; 0x3c
    7672:	f002 ff21 	bl	a4b8 <assert_post_action>
		rc = create_free_list(slab);
    7676:	4620      	mov	r0, r4
    7678:	f003 facc 	bl	ac14 <create_free_list>
		if (rc < 0) {
    767c:	2800      	cmp	r0, #0
    767e:	db02      	blt.n	7686 <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7680:	3420      	adds	r4, #32
    7682:	e7e9      	b.n	7658 <init_mem_slab_module+0x8>
    7684:	d3f7      	bcc.n	7676 <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
    7686:	bd38      	pop	{r3, r4, r5, pc}
    7688:	200001f4 	.word	0x200001f4
    768c:	200001f4 	.word	0x200001f4
    7690:	0000ce0c 	.word	0x0000ce0c
    7694:	0000cde7 	.word	0x0000cde7
    7698:	0000b53f 	.word	0x0000b53f
    769c:	0000b937 	.word	0x0000b937

000076a0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    76a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    76a4:	4604      	mov	r4, r0
    76a6:	460e      	mov	r6, r1
    76a8:	4690      	mov	r8, r2
    76aa:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    76ac:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    76b0:	f04f 0320 	mov.w	r3, #32
    76b4:	f3ef 8911 	mrs	r9, BASEPRI
    76b8:	f383 8812 	msr	BASEPRI_MAX, r3
    76bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    76c0:	4628      	mov	r0, r5
    76c2:	f000 f9db 	bl	7a7c <z_spin_lock_valid>
    76c6:	b968      	cbnz	r0, 76e4 <k_mem_slab_alloc+0x44>
    76c8:	4a23      	ldr	r2, [pc, #140]	; (7758 <k_mem_slab_alloc+0xb8>)
    76ca:	4924      	ldr	r1, [pc, #144]	; (775c <k_mem_slab_alloc+0xbc>)
    76cc:	4824      	ldr	r0, [pc, #144]	; (7760 <k_mem_slab_alloc+0xc0>)
    76ce:	2394      	movs	r3, #148	; 0x94
    76d0:	f002 fef9 	bl	a4c6 <assert_print>
    76d4:	4629      	mov	r1, r5
    76d6:	4823      	ldr	r0, [pc, #140]	; (7764 <k_mem_slab_alloc+0xc4>)
    76d8:	f002 fef5 	bl	a4c6 <assert_print>
    76dc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    76de:	481e      	ldr	r0, [pc, #120]	; (7758 <k_mem_slab_alloc+0xb8>)
    76e0:	f002 feea 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    76e4:	4628      	mov	r0, r5
    76e6:	f000 f9e7 	bl	7ab8 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    76ea:	69a3      	ldr	r3, [r4, #24]
    76ec:	b1b3      	cbz	r3, 771c <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
    76ee:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    76f0:	681b      	ldr	r3, [r3, #0]
    76f2:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    76f4:	69e3      	ldr	r3, [r4, #28]
    76f6:	3301      	adds	r3, #1
    76f8:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    76fa:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    76fc:	4628      	mov	r0, r5
    76fe:	f000 f9cb 	bl	7a98 <z_spin_unlock_valid>
    7702:	bb18      	cbnz	r0, 774c <k_mem_slab_alloc+0xac>
    7704:	4a14      	ldr	r2, [pc, #80]	; (7758 <k_mem_slab_alloc+0xb8>)
    7706:	4918      	ldr	r1, [pc, #96]	; (7768 <k_mem_slab_alloc+0xc8>)
    7708:	4815      	ldr	r0, [pc, #84]	; (7760 <k_mem_slab_alloc+0xc0>)
    770a:	23c2      	movs	r3, #194	; 0xc2
    770c:	f002 fedb 	bl	a4c6 <assert_print>
    7710:	4629      	mov	r1, r5
    7712:	4816      	ldr	r0, [pc, #88]	; (776c <k_mem_slab_alloc+0xcc>)
    7714:	f002 fed7 	bl	a4c6 <assert_print>
    7718:	21c2      	movs	r1, #194	; 0xc2
    771a:	e7e0      	b.n	76de <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    771c:	ea58 0207 	orrs.w	r2, r8, r7
    7720:	d103      	bne.n	772a <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
    7722:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    7724:	f06f 040b 	mvn.w	r4, #11
    7728:	e7e8      	b.n	76fc <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    772a:	4622      	mov	r2, r4
    772c:	e9cd 8700 	strd	r8, r7, [sp]
    7730:	4649      	mov	r1, r9
    7732:	4628      	mov	r0, r5
    7734:	f001 f854 	bl	87e0 <z_pend_curr>
		if (result == 0) {
    7738:	4604      	mov	r4, r0
    773a:	b918      	cbnz	r0, 7744 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
    773c:	4b0c      	ldr	r3, [pc, #48]	; (7770 <k_mem_slab_alloc+0xd0>)
    773e:	689b      	ldr	r3, [r3, #8]
    7740:	695b      	ldr	r3, [r3, #20]
    7742:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    7744:	4620      	mov	r0, r4
    7746:	b003      	add	sp, #12
    7748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
    774c:	f389 8811 	msr	BASEPRI, r9
    7750:	f3bf 8f6f 	isb	sy
	return result;
    7754:	e7f6      	b.n	7744 <k_mem_slab_alloc+0xa4>
    7756:	bf00      	nop
    7758:	0000b7ed 	.word	0x0000b7ed
    775c:	0000b846 	.word	0x0000b846
    7760:	0000b53f 	.word	0x0000b53f
    7764:	0000b85b 	.word	0x0000b85b
    7768:	0000b81a 	.word	0x0000b81a
    776c:	0000b831 	.word	0x0000b831
    7770:	20000b58 	.word	0x20000b58

00007774 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    7774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7778:	4604      	mov	r4, r0
    777a:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    777c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    7780:	f04f 0320 	mov.w	r3, #32
    7784:	f3ef 8711 	mrs	r7, BASEPRI
    7788:	f383 8812 	msr	BASEPRI_MAX, r3
    778c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7790:	4628      	mov	r0, r5
    7792:	f000 f973 	bl	7a7c <z_spin_lock_valid>
    7796:	b968      	cbnz	r0, 77b4 <k_mem_slab_free+0x40>
    7798:	4a21      	ldr	r2, [pc, #132]	; (7820 <k_mem_slab_free+0xac>)
    779a:	4922      	ldr	r1, [pc, #136]	; (7824 <k_mem_slab_free+0xb0>)
    779c:	4822      	ldr	r0, [pc, #136]	; (7828 <k_mem_slab_free+0xb4>)
    779e:	2394      	movs	r3, #148	; 0x94
    77a0:	f002 fe91 	bl	a4c6 <assert_print>
    77a4:	4629      	mov	r1, r5
    77a6:	4821      	ldr	r0, [pc, #132]	; (782c <k_mem_slab_free+0xb8>)
    77a8:	f002 fe8d 	bl	a4c6 <assert_print>
    77ac:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    77ae:	481c      	ldr	r0, [pc, #112]	; (7820 <k_mem_slab_free+0xac>)
    77b0:	f002 fe82 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    77b4:	4628      	mov	r0, r5
    77b6:	f000 f97f 	bl	7ab8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    77ba:	f8d4 8018 	ldr.w	r8, [r4, #24]
    77be:	f1b8 0f00 	cmp.w	r8, #0
    77c2:	d10f      	bne.n	77e4 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    77c4:	4620      	mov	r0, r4
    77c6:	f001 fa8b 	bl	8ce0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    77ca:	b158      	cbz	r0, 77e4 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    77cc:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    77ce:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    77d0:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
    77d4:	f000 fcba 	bl	814c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    77d8:	4639      	mov	r1, r7
    77da:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    77dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    77e0:	f000 bd42 	b.w	8268 <z_reschedule>
	**(char ***) mem = slab->free_list;
    77e4:	6833      	ldr	r3, [r6, #0]
    77e6:	69a2      	ldr	r2, [r4, #24]
    77e8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    77ea:	6833      	ldr	r3, [r6, #0]
    77ec:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    77ee:	69e3      	ldr	r3, [r4, #28]
    77f0:	3b01      	subs	r3, #1
    77f2:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    77f4:	4628      	mov	r0, r5
    77f6:	f000 f94f 	bl	7a98 <z_spin_unlock_valid>
    77fa:	b958      	cbnz	r0, 7814 <k_mem_slab_free+0xa0>
    77fc:	4a08      	ldr	r2, [pc, #32]	; (7820 <k_mem_slab_free+0xac>)
    77fe:	490c      	ldr	r1, [pc, #48]	; (7830 <k_mem_slab_free+0xbc>)
    7800:	4809      	ldr	r0, [pc, #36]	; (7828 <k_mem_slab_free+0xb4>)
    7802:	23c2      	movs	r3, #194	; 0xc2
    7804:	f002 fe5f 	bl	a4c6 <assert_print>
    7808:	4629      	mov	r1, r5
    780a:	480a      	ldr	r0, [pc, #40]	; (7834 <k_mem_slab_free+0xc0>)
    780c:	f002 fe5b 	bl	a4c6 <assert_print>
    7810:	21c2      	movs	r1, #194	; 0xc2
    7812:	e7cc      	b.n	77ae <k_mem_slab_free+0x3a>
	__asm__ volatile(
    7814:	f387 8811 	msr	BASEPRI, r7
    7818:	f3bf 8f6f 	isb	sy
}
    781c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7820:	0000b7ed 	.word	0x0000b7ed
    7824:	0000b846 	.word	0x0000b846
    7828:	0000b53f 	.word	0x0000b53f
    782c:	0000b85b 	.word	0x0000b85b
    7830:	0000b81a 	.word	0x0000b81a
    7834:	0000b831 	.word	0x0000b831

00007838 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7838:	b5f0      	push	{r4, r5, r6, r7, lr}
    783a:	b085      	sub	sp, #20
    783c:	4604      	mov	r4, r0
    783e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    7840:	2d0f      	cmp	r5, #15
    7842:	d12e      	bne.n	78a2 <z_setup_new_thread+0x6a>
    7844:	4822      	ldr	r0, [pc, #136]	; (78d0 <z_setup_new_thread+0x98>)
    7846:	4283      	cmp	r3, r0
    7848:	d12f      	bne.n	78aa <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    784a:	f104 0058 	add.w	r0, r4, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    784e:	3207      	adds	r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    7850:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
    7854:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
    7856:	980e      	ldr	r0, [sp, #56]	; 0x38
    7858:	7320      	strb	r0, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    785a:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    785e:	f101 0240 	add.w	r2, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
    7862:	e9c4 251a 	strd	r2, r5, [r4, #104]	; 0x68
	thread_base->pended_on = NULL;
    7866:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    786a:	60a6      	str	r6, [r4, #8]
	thread_base->thread_state = (uint8_t)initial_state;
    786c:	2004      	movs	r0, #4
    786e:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    7870:	e9c4 6606 	strd	r6, r6, [r4, #24]

	thread_base->sched_locked = 0U;
    7874:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    7876:	6726      	str	r6, [r4, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7878:	f105 0740 	add.w	r7, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    787c:	9202      	str	r2, [sp, #8]
    787e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7880:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    7882:	440f      	add	r7, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7886:	9200      	str	r2, [sp, #0]
    7888:	4620      	mov	r0, r4
    788a:	463a      	mov	r2, r7
    788c:	f7fb ff06 	bl	369c <arch_new_thread>
	if (!_current) {
    7890:	4b10      	ldr	r3, [pc, #64]	; (78d4 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
    7892:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    7894:	689b      	ldr	r3, [r3, #8]
    7896:	b103      	cbz	r3, 789a <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
    7898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    789a:	6763      	str	r3, [r4, #116]	; 0x74
}
    789c:	4638      	mov	r0, r7
    789e:	b005      	add	sp, #20
    78a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    78a2:	f105 0010 	add.w	r0, r5, #16
    78a6:	281e      	cmp	r0, #30
    78a8:	d9cf      	bls.n	784a <z_setup_new_thread+0x12>
    78aa:	4a0b      	ldr	r2, [pc, #44]	; (78d8 <z_setup_new_thread+0xa0>)
    78ac:	490b      	ldr	r1, [pc, #44]	; (78dc <z_setup_new_thread+0xa4>)
    78ae:	480c      	ldr	r0, [pc, #48]	; (78e0 <z_setup_new_thread+0xa8>)
    78b0:	f44f 7306 	mov.w	r3, #536	; 0x218
    78b4:	f002 fe07 	bl	a4c6 <assert_print>
    78b8:	480a      	ldr	r0, [pc, #40]	; (78e4 <z_setup_new_thread+0xac>)
    78ba:	4629      	mov	r1, r5
    78bc:	f06f 030f 	mvn.w	r3, #15
    78c0:	220e      	movs	r2, #14
    78c2:	f002 fe00 	bl	a4c6 <assert_print>
    78c6:	4804      	ldr	r0, [pc, #16]	; (78d8 <z_setup_new_thread+0xa0>)
    78c8:	f44f 7106 	mov.w	r1, #536	; 0x218
    78cc:	f002 fdf4 	bl	a4b8 <assert_post_action>
    78d0:	00007ac9 	.word	0x00007ac9
    78d4:	20000b58 	.word	0x20000b58
    78d8:	0000ce29 	.word	0x0000ce29
    78dc:	0000ce4c 	.word	0x0000ce4c
    78e0:	0000b53f 	.word	0x0000b53f
    78e4:	0000cecc 	.word	0x0000cecc

000078e8 <z_impl_k_thread_create>:
{
    78e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    78ea:	b087      	sub	sp, #28
    78ec:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
    78f0:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    78f2:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    78f6:	b175      	cbz	r5, 7916 <z_impl_k_thread_create+0x2e>
    78f8:	4919      	ldr	r1, [pc, #100]	; (7960 <z_impl_k_thread_create+0x78>)
    78fa:	4a1a      	ldr	r2, [pc, #104]	; (7964 <z_impl_k_thread_create+0x7c>)
    78fc:	481a      	ldr	r0, [pc, #104]	; (7968 <z_impl_k_thread_create+0x80>)
    78fe:	f240 238a 	movw	r3, #650	; 0x28a
    7902:	f002 fde0 	bl	a4c6 <assert_print>
    7906:	4819      	ldr	r0, [pc, #100]	; (796c <z_impl_k_thread_create+0x84>)
    7908:	f002 fddd 	bl	a4c6 <assert_print>
    790c:	4815      	ldr	r0, [pc, #84]	; (7964 <z_impl_k_thread_create+0x7c>)
    790e:	f240 218a 	movw	r1, #650	; 0x28a
    7912:	f002 fdd1 	bl	a4b8 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7916:	9505      	str	r5, [sp, #20]
    7918:	9d10      	ldr	r5, [sp, #64]	; 0x40
    791a:	9504      	str	r5, [sp, #16]
    791c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    791e:	9503      	str	r5, [sp, #12]
    7920:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7922:	9502      	str	r5, [sp, #8]
    7924:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    7926:	9501      	str	r5, [sp, #4]
    7928:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    792a:	9500      	str	r5, [sp, #0]
    792c:	f7ff ff84 	bl	7838 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7930:	f1b6 3fff 	cmp.w	r6, #4294967295
    7934:	bf08      	it	eq
    7936:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    793a:	d005      	beq.n	7948 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    793c:	ea56 0307 	orrs.w	r3, r6, r7
    7940:	d105      	bne.n	794e <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
    7942:	4620      	mov	r0, r4
    7944:	f000 fcd2 	bl	82ec <z_sched_start>
}
    7948:	4620      	mov	r0, r4
    794a:	b007      	add	sp, #28
    794c:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    794e:	4908      	ldr	r1, [pc, #32]	; (7970 <z_impl_k_thread_create+0x88>)
    7950:	463a      	mov	r2, r7
    7952:	4633      	mov	r3, r6
    7954:	f104 0018 	add.w	r0, r4, #24
    7958:	f001 fd26 	bl	93a8 <z_add_timeout>
    795c:	e7f4      	b.n	7948 <z_impl_k_thread_create+0x60>
    795e:	bf00      	nop
    7960:	0000cefd 	.word	0x0000cefd
    7964:	0000ce29 	.word	0x0000ce29
    7968:	0000b53f 	.word	0x0000b53f
    796c:	0000cf0f 	.word	0x0000cf0f
    7970:	0000acd1 	.word	0x0000acd1

00007974 <z_init_static_threads>:
{
    7974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7978:	4c39      	ldr	r4, [pc, #228]	; (7a60 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
    797a:	4d3a      	ldr	r5, [pc, #232]	; (7a64 <z_init_static_threads+0xf0>)
{
    797c:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    797e:	42ac      	cmp	r4, r5
    7980:	4626      	mov	r6, r4
    7982:	d92a      	bls.n	79da <z_init_static_threads+0x66>
    7984:	4938      	ldr	r1, [pc, #224]	; (7a68 <z_init_static_threads+0xf4>)
    7986:	4a39      	ldr	r2, [pc, #228]	; (7a6c <z_init_static_threads+0xf8>)
    7988:	4839      	ldr	r0, [pc, #228]	; (7a70 <z_init_static_threads+0xfc>)
    798a:	f240 23f1 	movw	r3, #753	; 0x2f1
    798e:	f002 fd9a 	bl	a4c6 <assert_print>
    7992:	4838      	ldr	r0, [pc, #224]	; (7a74 <z_init_static_threads+0x100>)
    7994:	f002 fd97 	bl	a4c6 <assert_print>
    7998:	f240 21f1 	movw	r1, #753	; 0x2f1
	_FOREACH_STATIC_THREAD(thread_data) {
    799c:	4833      	ldr	r0, [pc, #204]	; (7a6c <z_init_static_threads+0xf8>)
    799e:	f002 fd8b 	bl	a4b8 <assert_post_action>
		z_setup_new_thread(
    79a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    79a6:	9305      	str	r3, [sp, #20]
    79a8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    79ac:	9304      	str	r3, [sp, #16]
    79ae:	f854 3c10 	ldr.w	r3, [r4, #-16]
    79b2:	9303      	str	r3, [sp, #12]
    79b4:	f854 3c14 	ldr.w	r3, [r4, #-20]
    79b8:	9302      	str	r3, [sp, #8]
    79ba:	f854 3c18 	ldr.w	r3, [r4, #-24]
    79be:	9301      	str	r3, [sp, #4]
    79c0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    79c4:	9300      	str	r3, [sp, #0]
    79c6:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    79ca:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    79ce:	f7ff ff33 	bl	7838 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    79d2:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    79d6:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    79d8:	e7d1      	b.n	797e <z_init_static_threads+0xa>
    79da:	42ae      	cmp	r6, r5
    79dc:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    79e0:	d3df      	bcc.n	79a2 <z_init_static_threads+0x2e>
	k_sched_lock();
    79e2:	f000 fcd5 	bl	8390 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    79e6:	4c1e      	ldr	r4, [pc, #120]	; (7a60 <z_init_static_threads+0xec>)
    79e8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 7a78 <z_init_static_threads+0x104>
    79ec:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    79f0:	f240 37e7 	movw	r7, #999	; 0x3e7
    79f4:	42ac      	cmp	r4, r5
    79f6:	d92c      	bls.n	7a52 <z_init_static_threads+0xde>
    79f8:	491b      	ldr	r1, [pc, #108]	; (7a68 <z_init_static_threads+0xf4>)
    79fa:	4a1c      	ldr	r2, [pc, #112]	; (7a6c <z_init_static_threads+0xf8>)
    79fc:	481c      	ldr	r0, [pc, #112]	; (7a70 <z_init_static_threads+0xfc>)
    79fe:	f44f 7344 	mov.w	r3, #784	; 0x310
    7a02:	f002 fd60 	bl	a4c6 <assert_print>
    7a06:	481b      	ldr	r0, [pc, #108]	; (7a74 <z_init_static_threads+0x100>)
    7a08:	f002 fd5d 	bl	a4c6 <assert_print>
    7a0c:	f44f 7144 	mov.w	r1, #784	; 0x310
    7a10:	e7c4      	b.n	799c <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7a14:	1c5a      	adds	r2, r3, #1
    7a16:	d00d      	beq.n	7a34 <z_init_static_threads+0xc0>
					    K_MSEC(thread_data->init_delay));
    7a18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7a1c:	2100      	movs	r1, #0
    7a1e:	4638      	mov	r0, r7
    7a20:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7a24:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    7a28:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7a2c:	d104      	bne.n	7a38 <z_init_static_threads+0xc4>
	z_sched_start(thread);
    7a2e:	4640      	mov	r0, r8
    7a30:	f000 fc5c 	bl	82ec <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    7a34:	342c      	adds	r4, #44	; 0x2c
    7a36:	e7dd      	b.n	79f4 <z_init_static_threads+0x80>
    7a38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7a3c:	2300      	movs	r3, #0
    7a3e:	f7f9 fa03 	bl	e48 <__aeabi_uldivmod>
    7a42:	4602      	mov	r2, r0
    7a44:	460b      	mov	r3, r1
    7a46:	f108 0018 	add.w	r0, r8, #24
    7a4a:	4649      	mov	r1, r9
    7a4c:	f001 fcac 	bl	93a8 <z_add_timeout>
    7a50:	e7f0      	b.n	7a34 <z_init_static_threads+0xc0>
    7a52:	d3de      	bcc.n	7a12 <z_init_static_threads+0x9e>
}
    7a54:	b007      	add	sp, #28
    7a56:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    7a5a:	f000 bd05 	b.w	8468 <k_sched_unlock>
    7a5e:	bf00      	nop
    7a60:	0000b0fc 	.word	0x0000b0fc
    7a64:	0000b0fc 	.word	0x0000b0fc
    7a68:	0000cf34 	.word	0x0000cf34
    7a6c:	0000ce29 	.word	0x0000ce29
    7a70:	0000b53f 	.word	0x0000b53f
    7a74:	0000b937 	.word	0x0000b937
    7a78:	0000acd1 	.word	0x0000acd1

00007a7c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    7a7c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    7a7e:	b138      	cbz	r0, 7a90 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    7a80:	4b04      	ldr	r3, [pc, #16]	; (7a94 <z_spin_lock_valid+0x18>)
    7a82:	7c1b      	ldrb	r3, [r3, #16]
    7a84:	f000 0003 	and.w	r0, r0, #3
    7a88:	1ac0      	subs	r0, r0, r3
    7a8a:	bf18      	it	ne
    7a8c:	2001      	movne	r0, #1
    7a8e:	4770      	bx	lr
			return false;
		}
	}
	return true;
    7a90:	2001      	movs	r0, #1
}
    7a92:	4770      	bx	lr
    7a94:	20000b58 	.word	0x20000b58

00007a98 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7a98:	4a06      	ldr	r2, [pc, #24]	; (7ab4 <z_spin_unlock_valid+0x1c>)
    7a9a:	7c11      	ldrb	r1, [r2, #16]
    7a9c:	6892      	ldr	r2, [r2, #8]
    7a9e:	430a      	orrs	r2, r1
    7aa0:	6801      	ldr	r1, [r0, #0]
{
    7aa2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7aa4:	4291      	cmp	r1, r2
    7aa6:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    7aaa:	bf04      	itt	eq
    7aac:	6018      	streq	r0, [r3, #0]
	return true;
    7aae:	2001      	moveq	r0, #1
}
    7ab0:	4770      	bx	lr
    7ab2:	bf00      	nop
    7ab4:	20000b58 	.word	0x20000b58

00007ab8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    7ab8:	4b02      	ldr	r3, [pc, #8]	; (7ac4 <z_spin_lock_set_owner+0xc>)
    7aba:	7c1a      	ldrb	r2, [r3, #16]
    7abc:	689b      	ldr	r3, [r3, #8]
    7abe:	4313      	orrs	r3, r2
    7ac0:	6003      	str	r3, [r0, #0]
}
    7ac2:	4770      	bx	lr
    7ac4:	20000b58 	.word	0x20000b58

00007ac8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7ac8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    7aca:	4c13      	ldr	r4, [pc, #76]	; (7b18 <idle+0x50>)
    7acc:	68a3      	ldr	r3, [r4, #8]
    7ace:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	db10      	blt.n	7af8 <idle+0x30>
	return !z_sys_post_kernel;
    7ad6:	4d11      	ldr	r5, [pc, #68]	; (7b1c <idle+0x54>)
	__asm__ volatile(
    7ad8:	f04f 0220 	mov.w	r2, #32
    7adc:	f3ef 8311 	mrs	r3, BASEPRI
    7ae0:	f382 8812 	msr	BASEPRI_MAX, r2
    7ae4:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7ae8:	f001 fd6a 	bl	95c0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7aec:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    7aee:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7af0:	b963      	cbnz	r3, 7b0c <idle+0x44>
	arch_cpu_idle();
    7af2:	f7fb fc91 	bl	3418 <arch_cpu_idle>
}
    7af6:	e7ef      	b.n	7ad8 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    7af8:	4909      	ldr	r1, [pc, #36]	; (7b20 <idle+0x58>)
    7afa:	480a      	ldr	r0, [pc, #40]	; (7b24 <idle+0x5c>)
    7afc:	4a0a      	ldr	r2, [pc, #40]	; (7b28 <idle+0x60>)
    7afe:	2327      	movs	r3, #39	; 0x27
    7b00:	f002 fce1 	bl	a4c6 <assert_print>
    7b04:	4808      	ldr	r0, [pc, #32]	; (7b28 <idle+0x60>)
    7b06:	2127      	movs	r1, #39	; 0x27
    7b08:	f002 fcd6 	bl	a4b8 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7b0c:	f7fb fa92 	bl	3034 <pm_system_suspend>
    7b10:	2800      	cmp	r0, #0
    7b12:	d1e1      	bne.n	7ad8 <idle+0x10>
    7b14:	e7ed      	b.n	7af2 <idle+0x2a>
    7b16:	bf00      	nop
    7b18:	20000b58 	.word	0x20000b58
    7b1c:	200011a5 	.word	0x200011a5
    7b20:	0000cf82 	.word	0x0000cf82
    7b24:	0000b53f 	.word	0x0000b53f
    7b28:	0000cf61 	.word	0x0000cf61

00007b2c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7b2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7b30:	4604      	mov	r4, r0
    7b32:	4617      	mov	r7, r2
    7b34:	461e      	mov	r6, r3
    7b36:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7b3a:	b165      	cbz	r5, 7b56 <z_impl_k_mutex_lock+0x2a>
    7b3c:	4958      	ldr	r1, [pc, #352]	; (7ca0 <z_impl_k_mutex_lock+0x174>)
    7b3e:	4a59      	ldr	r2, [pc, #356]	; (7ca4 <z_impl_k_mutex_lock+0x178>)
    7b40:	4859      	ldr	r0, [pc, #356]	; (7ca8 <z_impl_k_mutex_lock+0x17c>)
    7b42:	2365      	movs	r3, #101	; 0x65
    7b44:	f002 fcbf 	bl	a4c6 <assert_print>
    7b48:	4858      	ldr	r0, [pc, #352]	; (7cac <z_impl_k_mutex_lock+0x180>)
    7b4a:	f002 fcbc 	bl	a4c6 <assert_print>
    7b4e:	4855      	ldr	r0, [pc, #340]	; (7ca4 <z_impl_k_mutex_lock+0x178>)
    7b50:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b52:	f002 fcb1 	bl	a4b8 <assert_post_action>
    7b56:	f04f 0320 	mov.w	r3, #32
    7b5a:	f3ef 8811 	mrs	r8, BASEPRI
    7b5e:	f383 8812 	msr	BASEPRI_MAX, r3
    7b62:	f3bf 8f6f 	isb	sy
    7b66:	4852      	ldr	r0, [pc, #328]	; (7cb0 <z_impl_k_mutex_lock+0x184>)
    7b68:	f7ff ff88 	bl	7a7c <z_spin_lock_valid>
    7b6c:	b960      	cbnz	r0, 7b88 <z_impl_k_mutex_lock+0x5c>
    7b6e:	4a51      	ldr	r2, [pc, #324]	; (7cb4 <z_impl_k_mutex_lock+0x188>)
    7b70:	4951      	ldr	r1, [pc, #324]	; (7cb8 <z_impl_k_mutex_lock+0x18c>)
    7b72:	484d      	ldr	r0, [pc, #308]	; (7ca8 <z_impl_k_mutex_lock+0x17c>)
    7b74:	2394      	movs	r3, #148	; 0x94
    7b76:	f002 fca6 	bl	a4c6 <assert_print>
    7b7a:	494d      	ldr	r1, [pc, #308]	; (7cb0 <z_impl_k_mutex_lock+0x184>)
    7b7c:	484f      	ldr	r0, [pc, #316]	; (7cbc <z_impl_k_mutex_lock+0x190>)
    7b7e:	f002 fca2 	bl	a4c6 <assert_print>
    7b82:	2194      	movs	r1, #148	; 0x94
    7b84:	484b      	ldr	r0, [pc, #300]	; (7cb4 <z_impl_k_mutex_lock+0x188>)
    7b86:	e7e4      	b.n	7b52 <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
    7b88:	4849      	ldr	r0, [pc, #292]	; (7cb0 <z_impl_k_mutex_lock+0x184>)
    7b8a:	f7ff ff95 	bl	7ab8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7b8e:	68e3      	ldr	r3, [r4, #12]
    7b90:	4a4b      	ldr	r2, [pc, #300]	; (7cc0 <z_impl_k_mutex_lock+0x194>)
    7b92:	b19b      	cbz	r3, 7bbc <z_impl_k_mutex_lock+0x90>
    7b94:	68a0      	ldr	r0, [r4, #8]
    7b96:	6891      	ldr	r1, [r2, #8]
    7b98:	4288      	cmp	r0, r1
    7b9a:	d027      	beq.n	7bec <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7b9c:	ea57 0306 	orrs.w	r3, r7, r6
    7ba0:	d12c      	bne.n	7bfc <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ba2:	4843      	ldr	r0, [pc, #268]	; (7cb0 <z_impl_k_mutex_lock+0x184>)
    7ba4:	f7ff ff78 	bl	7a98 <z_spin_unlock_valid>
    7ba8:	b1a0      	cbz	r0, 7bd4 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
    7baa:	f388 8811 	msr	BASEPRI, r8
    7bae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    7bb2:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7bb6:	b002      	add	sp, #8
    7bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    7bbc:	6891      	ldr	r1, [r2, #8]
    7bbe:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7bc2:	483b      	ldr	r0, [pc, #236]	; (7cb0 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7bc4:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    7bc6:	3301      	adds	r3, #1
    7bc8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    7bca:	6893      	ldr	r3, [r2, #8]
    7bcc:	60a3      	str	r3, [r4, #8]
    7bce:	f7ff ff63 	bl	7a98 <z_spin_unlock_valid>
    7bd2:	b968      	cbnz	r0, 7bf0 <z_impl_k_mutex_lock+0xc4>
    7bd4:	4a37      	ldr	r2, [pc, #220]	; (7cb4 <z_impl_k_mutex_lock+0x188>)
    7bd6:	493b      	ldr	r1, [pc, #236]	; (7cc4 <z_impl_k_mutex_lock+0x198>)
    7bd8:	4833      	ldr	r0, [pc, #204]	; (7ca8 <z_impl_k_mutex_lock+0x17c>)
    7bda:	23c2      	movs	r3, #194	; 0xc2
    7bdc:	f002 fc73 	bl	a4c6 <assert_print>
    7be0:	4933      	ldr	r1, [pc, #204]	; (7cb0 <z_impl_k_mutex_lock+0x184>)
    7be2:	4839      	ldr	r0, [pc, #228]	; (7cc8 <z_impl_k_mutex_lock+0x19c>)
    7be4:	f002 fc6f 	bl	a4c6 <assert_print>
    7be8:	21c2      	movs	r1, #194	; 0xc2
    7bea:	e7cb      	b.n	7b84 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
    7bec:	6921      	ldr	r1, [r4, #16]
    7bee:	e7e8      	b.n	7bc2 <z_impl_k_mutex_lock+0x96>
    7bf0:	f388 8811 	msr	BASEPRI, r8
    7bf4:	f3bf 8f6f 	isb	sy
		return 0;
    7bf8:	2000      	movs	r0, #0
    7bfa:	e7dc      	b.n	7bb6 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7bfc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7c00:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    7c04:	4299      	cmp	r1, r3
    7c06:	bfa8      	it	ge
    7c08:	4619      	movge	r1, r3
    7c0a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    7c0e:	4291      	cmp	r1, r2
    7c10:	bfb8      	it	lt
    7c12:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7c14:	428b      	cmp	r3, r1
    7c16:	dd02      	ble.n	7c1e <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
    7c18:	f003 f835 	bl	ac86 <adjust_owner_prio.isra.0>
    7c1c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7c1e:	e9cd 7600 	strd	r7, r6, [sp]
    7c22:	4823      	ldr	r0, [pc, #140]	; (7cb0 <z_impl_k_mutex_lock+0x184>)
    7c24:	4622      	mov	r2, r4
    7c26:	4641      	mov	r1, r8
    7c28:	f000 fdda 	bl	87e0 <z_pend_curr>
	if (got_mutex == 0) {
    7c2c:	2800      	cmp	r0, #0
    7c2e:	d0e3      	beq.n	7bf8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    7c30:	f04f 0320 	mov.w	r3, #32
    7c34:	f3ef 8611 	mrs	r6, BASEPRI
    7c38:	f383 8812 	msr	BASEPRI_MAX, r3
    7c3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c40:	481b      	ldr	r0, [pc, #108]	; (7cb0 <z_impl_k_mutex_lock+0x184>)
    7c42:	f7ff ff1b 	bl	7a7c <z_spin_lock_valid>
    7c46:	2800      	cmp	r0, #0
    7c48:	d091      	beq.n	7b6e <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
    7c4a:	4819      	ldr	r0, [pc, #100]	; (7cb0 <z_impl_k_mutex_lock+0x184>)
    7c4c:	f7ff ff34 	bl	7ab8 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
    7c50:	68a0      	ldr	r0, [r4, #8]
    7c52:	b1c0      	cbz	r0, 7c86 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7c54:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7c56:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7c58:	429c      	cmp	r4, r3
    7c5a:	d00a      	beq.n	7c72 <z_impl_k_mutex_lock+0x146>
    7c5c:	b14b      	cbz	r3, 7c72 <z_impl_k_mutex_lock+0x146>
    7c5e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7c62:	4299      	cmp	r1, r3
    7c64:	bfa8      	it	ge
    7c66:	4619      	movge	r1, r3
    7c68:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    7c6c:	4299      	cmp	r1, r3
    7c6e:	bfb8      	it	lt
    7c70:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    7c72:	f003 f808 	bl	ac86 <adjust_owner_prio.isra.0>
    7c76:	b130      	cbz	r0, 7c86 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
    7c78:	480d      	ldr	r0, [pc, #52]	; (7cb0 <z_impl_k_mutex_lock+0x184>)
    7c7a:	4631      	mov	r1, r6
    7c7c:	f000 faf4 	bl	8268 <z_reschedule>
	return -EAGAIN;
    7c80:	f06f 000a 	mvn.w	r0, #10
    7c84:	e797      	b.n	7bb6 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
    7c86:	2d00      	cmp	r5, #0
    7c88:	d1f6      	bne.n	7c78 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c8a:	4809      	ldr	r0, [pc, #36]	; (7cb0 <z_impl_k_mutex_lock+0x184>)
    7c8c:	f7ff ff04 	bl	7a98 <z_spin_unlock_valid>
    7c90:	2800      	cmp	r0, #0
    7c92:	d09f      	beq.n	7bd4 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
    7c94:	f386 8811 	msr	BASEPRI, r6
    7c98:	f3bf 8f6f 	isb	sy
    7c9c:	e7f0      	b.n	7c80 <z_impl_k_mutex_lock+0x154>
    7c9e:	bf00      	nop
    7ca0:	0000cefd 	.word	0x0000cefd
    7ca4:	0000cfaa 	.word	0x0000cfaa
    7ca8:	0000b53f 	.word	0x0000b53f
    7cac:	0000cfcc 	.word	0x0000cfcc
    7cb0:	20000b7c 	.word	0x20000b7c
    7cb4:	0000b7ed 	.word	0x0000b7ed
    7cb8:	0000b846 	.word	0x0000b846
    7cbc:	0000b85b 	.word	0x0000b85b
    7cc0:	20000b58 	.word	0x20000b58
    7cc4:	0000b81a 	.word	0x0000b81a
    7cc8:	0000b831 	.word	0x0000b831

00007ccc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    7ccc:	b570      	push	{r4, r5, r6, lr}
    7cce:	4604      	mov	r4, r0
    7cd0:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7cd4:	b166      	cbz	r6, 7cf0 <z_impl_k_mutex_unlock+0x24>
    7cd6:	4938      	ldr	r1, [pc, #224]	; (7db8 <z_impl_k_mutex_unlock+0xec>)
    7cd8:	4a38      	ldr	r2, [pc, #224]	; (7dbc <z_impl_k_mutex_unlock+0xf0>)
    7cda:	4839      	ldr	r0, [pc, #228]	; (7dc0 <z_impl_k_mutex_unlock+0xf4>)
    7cdc:	23cd      	movs	r3, #205	; 0xcd
    7cde:	f002 fbf2 	bl	a4c6 <assert_print>
    7ce2:	4838      	ldr	r0, [pc, #224]	; (7dc4 <z_impl_k_mutex_unlock+0xf8>)
    7ce4:	f002 fbef 	bl	a4c6 <assert_print>
    7ce8:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    7cea:	4834      	ldr	r0, [pc, #208]	; (7dbc <z_impl_k_mutex_unlock+0xf0>)
    7cec:	f002 fbe4 	bl	a4b8 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
    7cf0:	6883      	ldr	r3, [r0, #8]
    7cf2:	2b00      	cmp	r3, #0
    7cf4:	d059      	beq.n	7daa <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
    7cf6:	4a34      	ldr	r2, [pc, #208]	; (7dc8 <z_impl_k_mutex_unlock+0xfc>)
    7cf8:	6892      	ldr	r2, [r2, #8]
    7cfa:	4293      	cmp	r3, r2
    7cfc:	d158      	bne.n	7db0 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    7cfe:	68c3      	ldr	r3, [r0, #12]
    7d00:	b93b      	cbnz	r3, 7d12 <z_impl_k_mutex_unlock+0x46>
    7d02:	4932      	ldr	r1, [pc, #200]	; (7dcc <z_impl_k_mutex_unlock+0x100>)
    7d04:	4a2d      	ldr	r2, [pc, #180]	; (7dbc <z_impl_k_mutex_unlock+0xf0>)
    7d06:	482e      	ldr	r0, [pc, #184]	; (7dc0 <z_impl_k_mutex_unlock+0xf4>)
    7d08:	23e5      	movs	r3, #229	; 0xe5
    7d0a:	f002 fbdc 	bl	a4c6 <assert_print>
    7d0e:	21e5      	movs	r1, #229	; 0xe5
    7d10:	e7eb      	b.n	7cea <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7d12:	2b01      	cmp	r3, #1
    7d14:	d003      	beq.n	7d1e <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
    7d16:	3b01      	subs	r3, #1
    7d18:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    7d1a:	2000      	movs	r0, #0
}
    7d1c:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    7d1e:	f04f 0320 	mov.w	r3, #32
    7d22:	f3ef 8511 	mrs	r5, BASEPRI
    7d26:	f383 8812 	msr	BASEPRI_MAX, r3
    7d2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d2e:	4828      	ldr	r0, [pc, #160]	; (7dd0 <z_impl_k_mutex_unlock+0x104>)
    7d30:	f7ff fea4 	bl	7a7c <z_spin_lock_valid>
    7d34:	b960      	cbnz	r0, 7d50 <z_impl_k_mutex_unlock+0x84>
    7d36:	4a27      	ldr	r2, [pc, #156]	; (7dd4 <z_impl_k_mutex_unlock+0x108>)
    7d38:	4927      	ldr	r1, [pc, #156]	; (7dd8 <z_impl_k_mutex_unlock+0x10c>)
    7d3a:	4821      	ldr	r0, [pc, #132]	; (7dc0 <z_impl_k_mutex_unlock+0xf4>)
    7d3c:	2394      	movs	r3, #148	; 0x94
    7d3e:	f002 fbc2 	bl	a4c6 <assert_print>
    7d42:	4923      	ldr	r1, [pc, #140]	; (7dd0 <z_impl_k_mutex_unlock+0x104>)
    7d44:	4825      	ldr	r0, [pc, #148]	; (7ddc <z_impl_k_mutex_unlock+0x110>)
    7d46:	f002 fbbe 	bl	a4c6 <assert_print>
    7d4a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d4c:	4821      	ldr	r0, [pc, #132]	; (7dd4 <z_impl_k_mutex_unlock+0x108>)
    7d4e:	e7cd      	b.n	7cec <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
    7d50:	481f      	ldr	r0, [pc, #124]	; (7dd0 <z_impl_k_mutex_unlock+0x104>)
    7d52:	f7ff feb1 	bl	7ab8 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7d56:	6921      	ldr	r1, [r4, #16]
    7d58:	68a0      	ldr	r0, [r4, #8]
    7d5a:	f002 ff94 	bl	ac86 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7d5e:	4620      	mov	r0, r4
    7d60:	f000 ffbe 	bl	8ce0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    7d64:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7d66:	b150      	cbz	r0, 7d7e <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
    7d68:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7d6c:	6122      	str	r2, [r4, #16]
    7d6e:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    7d70:	f000 f9ec 	bl	814c <z_ready_thread>
		z_reschedule(&lock, key);
    7d74:	4816      	ldr	r0, [pc, #88]	; (7dd0 <z_impl_k_mutex_unlock+0x104>)
    7d76:	4629      	mov	r1, r5
    7d78:	f000 fa76 	bl	8268 <z_reschedule>
    7d7c:	e7cd      	b.n	7d1a <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
    7d7e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d80:	4813      	ldr	r0, [pc, #76]	; (7dd0 <z_impl_k_mutex_unlock+0x104>)
    7d82:	f7ff fe89 	bl	7a98 <z_spin_unlock_valid>
    7d86:	b958      	cbnz	r0, 7da0 <z_impl_k_mutex_unlock+0xd4>
    7d88:	4a12      	ldr	r2, [pc, #72]	; (7dd4 <z_impl_k_mutex_unlock+0x108>)
    7d8a:	4915      	ldr	r1, [pc, #84]	; (7de0 <z_impl_k_mutex_unlock+0x114>)
    7d8c:	480c      	ldr	r0, [pc, #48]	; (7dc0 <z_impl_k_mutex_unlock+0xf4>)
    7d8e:	23c2      	movs	r3, #194	; 0xc2
    7d90:	f002 fb99 	bl	a4c6 <assert_print>
    7d94:	490e      	ldr	r1, [pc, #56]	; (7dd0 <z_impl_k_mutex_unlock+0x104>)
    7d96:	4813      	ldr	r0, [pc, #76]	; (7de4 <z_impl_k_mutex_unlock+0x118>)
    7d98:	f002 fb95 	bl	a4c6 <assert_print>
    7d9c:	21c2      	movs	r1, #194	; 0xc2
    7d9e:	e7d5      	b.n	7d4c <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
    7da0:	f385 8811 	msr	BASEPRI, r5
    7da4:	f3bf 8f6f 	isb	sy
    7da8:	e7b7      	b.n	7d1a <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
    7daa:	f06f 0015 	mvn.w	r0, #21
    7dae:	e7b5      	b.n	7d1c <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
    7db0:	f04f 30ff 	mov.w	r0, #4294967295
    7db4:	e7b2      	b.n	7d1c <z_impl_k_mutex_unlock+0x50>
    7db6:	bf00      	nop
    7db8:	0000cefd 	.word	0x0000cefd
    7dbc:	0000cfaa 	.word	0x0000cfaa
    7dc0:	0000b53f 	.word	0x0000b53f
    7dc4:	0000cfcc 	.word	0x0000cfcc
    7dc8:	20000b58 	.word	0x20000b58
    7dcc:	0000cff1 	.word	0x0000cff1
    7dd0:	20000b7c 	.word	0x20000b7c
    7dd4:	0000b7ed 	.word	0x0000b7ed
    7dd8:	0000b846 	.word	0x0000b846
    7ddc:	0000b85b 	.word	0x0000b85b
    7de0:	0000b81a 	.word	0x0000b81a
    7de4:	0000b831 	.word	0x0000b831

00007de8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7de8:	b538      	push	{r3, r4, r5, lr}
    7dea:	4604      	mov	r4, r0
	__asm__ volatile(
    7dec:	f04f 0320 	mov.w	r3, #32
    7df0:	f3ef 8511 	mrs	r5, BASEPRI
    7df4:	f383 8812 	msr	BASEPRI_MAX, r3
    7df8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7dfc:	4817      	ldr	r0, [pc, #92]	; (7e5c <z_impl_k_sem_give+0x74>)
    7dfe:	f7ff fe3d 	bl	7a7c <z_spin_lock_valid>
    7e02:	b968      	cbnz	r0, 7e20 <z_impl_k_sem_give+0x38>
    7e04:	4a16      	ldr	r2, [pc, #88]	; (7e60 <z_impl_k_sem_give+0x78>)
    7e06:	4917      	ldr	r1, [pc, #92]	; (7e64 <z_impl_k_sem_give+0x7c>)
    7e08:	4817      	ldr	r0, [pc, #92]	; (7e68 <z_impl_k_sem_give+0x80>)
    7e0a:	2394      	movs	r3, #148	; 0x94
    7e0c:	f002 fb5b 	bl	a4c6 <assert_print>
    7e10:	4912      	ldr	r1, [pc, #72]	; (7e5c <z_impl_k_sem_give+0x74>)
    7e12:	4816      	ldr	r0, [pc, #88]	; (7e6c <z_impl_k_sem_give+0x84>)
    7e14:	f002 fb57 	bl	a4c6 <assert_print>
    7e18:	4811      	ldr	r0, [pc, #68]	; (7e60 <z_impl_k_sem_give+0x78>)
    7e1a:	2194      	movs	r1, #148	; 0x94
    7e1c:	f002 fb4c 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7e20:	480e      	ldr	r0, [pc, #56]	; (7e5c <z_impl_k_sem_give+0x74>)
    7e22:	f7ff fe49 	bl	7ab8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7e26:	4620      	mov	r0, r4
    7e28:	f000 ff5a 	bl	8ce0 <z_unpend_first_thread>

	if (thread != NULL) {
    7e2c:	b148      	cbz	r0, 7e42 <z_impl_k_sem_give+0x5a>
    7e2e:	2200      	movs	r2, #0
    7e30:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7e32:	f000 f98b 	bl	814c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7e36:	4629      	mov	r1, r5
    7e38:	4808      	ldr	r0, [pc, #32]	; (7e5c <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7e3e:	f000 ba13 	b.w	8268 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7e42:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7e46:	429a      	cmp	r2, r3
    7e48:	bf18      	it	ne
    7e4a:	3301      	addne	r3, #1
    7e4c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    7e4e:	2102      	movs	r1, #2
    7e50:	f104 0010 	add.w	r0, r4, #16
    7e54:	f002 ffc1 	bl	adda <z_handle_obj_poll_events>
}
    7e58:	e7ed      	b.n	7e36 <z_impl_k_sem_give+0x4e>
    7e5a:	bf00      	nop
    7e5c:	20000b80 	.word	0x20000b80
    7e60:	0000b7ed 	.word	0x0000b7ed
    7e64:	0000b846 	.word	0x0000b846
    7e68:	0000b53f 	.word	0x0000b53f
    7e6c:	0000b85b 	.word	0x0000b85b

00007e70 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7e72:	4604      	mov	r4, r0
    7e74:	4616      	mov	r6, r2
    7e76:	461d      	mov	r5, r3
    7e78:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    7e7c:	b17b      	cbz	r3, 7e9e <z_impl_k_sem_take+0x2e>
    7e7e:	ea52 0305 	orrs.w	r3, r2, r5
    7e82:	d00c      	beq.n	7e9e <z_impl_k_sem_take+0x2e>
    7e84:	492d      	ldr	r1, [pc, #180]	; (7f3c <z_impl_k_sem_take+0xcc>)
    7e86:	4a2e      	ldr	r2, [pc, #184]	; (7f40 <z_impl_k_sem_take+0xd0>)
    7e88:	482e      	ldr	r0, [pc, #184]	; (7f44 <z_impl_k_sem_take+0xd4>)
    7e8a:	2379      	movs	r3, #121	; 0x79
    7e8c:	f002 fb1b 	bl	a4c6 <assert_print>
    7e90:	482d      	ldr	r0, [pc, #180]	; (7f48 <z_impl_k_sem_take+0xd8>)
    7e92:	f002 fb18 	bl	a4c6 <assert_print>
    7e96:	482a      	ldr	r0, [pc, #168]	; (7f40 <z_impl_k_sem_take+0xd0>)
    7e98:	2179      	movs	r1, #121	; 0x79
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e9a:	f002 fb0d 	bl	a4b8 <assert_post_action>
    7e9e:	f04f 0320 	mov.w	r3, #32
    7ea2:	f3ef 8711 	mrs	r7, BASEPRI
    7ea6:	f383 8812 	msr	BASEPRI_MAX, r3
    7eaa:	f3bf 8f6f 	isb	sy
    7eae:	4827      	ldr	r0, [pc, #156]	; (7f4c <z_impl_k_sem_take+0xdc>)
    7eb0:	f7ff fde4 	bl	7a7c <z_spin_lock_valid>
    7eb4:	b960      	cbnz	r0, 7ed0 <z_impl_k_sem_take+0x60>
    7eb6:	4a26      	ldr	r2, [pc, #152]	; (7f50 <z_impl_k_sem_take+0xe0>)
    7eb8:	4926      	ldr	r1, [pc, #152]	; (7f54 <z_impl_k_sem_take+0xe4>)
    7eba:	4822      	ldr	r0, [pc, #136]	; (7f44 <z_impl_k_sem_take+0xd4>)
    7ebc:	2394      	movs	r3, #148	; 0x94
    7ebe:	f002 fb02 	bl	a4c6 <assert_print>
    7ec2:	4922      	ldr	r1, [pc, #136]	; (7f4c <z_impl_k_sem_take+0xdc>)
    7ec4:	4824      	ldr	r0, [pc, #144]	; (7f58 <z_impl_k_sem_take+0xe8>)
    7ec6:	f002 fafe 	bl	a4c6 <assert_print>
    7eca:	2194      	movs	r1, #148	; 0x94
    7ecc:	4820      	ldr	r0, [pc, #128]	; (7f50 <z_impl_k_sem_take+0xe0>)
    7ece:	e7e4      	b.n	7e9a <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
    7ed0:	481e      	ldr	r0, [pc, #120]	; (7f4c <z_impl_k_sem_take+0xdc>)
    7ed2:	f7ff fdf1 	bl	7ab8 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7ed6:	68a3      	ldr	r3, [r4, #8]
    7ed8:	b1c3      	cbz	r3, 7f0c <z_impl_k_sem_take+0x9c>
		sem->count--;
    7eda:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7edc:	481b      	ldr	r0, [pc, #108]	; (7f4c <z_impl_k_sem_take+0xdc>)
    7ede:	60a3      	str	r3, [r4, #8]
    7ee0:	f7ff fdda 	bl	7a98 <z_spin_unlock_valid>
    7ee4:	b958      	cbnz	r0, 7efe <z_impl_k_sem_take+0x8e>
    7ee6:	4a1a      	ldr	r2, [pc, #104]	; (7f50 <z_impl_k_sem_take+0xe0>)
    7ee8:	491c      	ldr	r1, [pc, #112]	; (7f5c <z_impl_k_sem_take+0xec>)
    7eea:	4816      	ldr	r0, [pc, #88]	; (7f44 <z_impl_k_sem_take+0xd4>)
    7eec:	23c2      	movs	r3, #194	; 0xc2
    7eee:	f002 faea 	bl	a4c6 <assert_print>
    7ef2:	4916      	ldr	r1, [pc, #88]	; (7f4c <z_impl_k_sem_take+0xdc>)
    7ef4:	481a      	ldr	r0, [pc, #104]	; (7f60 <z_impl_k_sem_take+0xf0>)
    7ef6:	f002 fae6 	bl	a4c6 <assert_print>
    7efa:	21c2      	movs	r1, #194	; 0xc2
    7efc:	e7e6      	b.n	7ecc <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
    7efe:	f387 8811 	msr	BASEPRI, r7
    7f02:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7f06:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7f08:	b003      	add	sp, #12
    7f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7f0c:	ea56 0305 	orrs.w	r3, r6, r5
    7f10:	d10b      	bne.n	7f2a <z_impl_k_sem_take+0xba>
    7f12:	480e      	ldr	r0, [pc, #56]	; (7f4c <z_impl_k_sem_take+0xdc>)
    7f14:	f7ff fdc0 	bl	7a98 <z_spin_unlock_valid>
    7f18:	2800      	cmp	r0, #0
    7f1a:	d0e4      	beq.n	7ee6 <z_impl_k_sem_take+0x76>
    7f1c:	f387 8811 	msr	BASEPRI, r7
    7f20:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7f24:	f06f 000f 	mvn.w	r0, #15
    7f28:	e7ee      	b.n	7f08 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7f2a:	e9cd 6500 	strd	r6, r5, [sp]
    7f2e:	4622      	mov	r2, r4
    7f30:	4639      	mov	r1, r7
    7f32:	4806      	ldr	r0, [pc, #24]	; (7f4c <z_impl_k_sem_take+0xdc>)
    7f34:	f000 fc54 	bl	87e0 <z_pend_curr>
	return ret;
    7f38:	e7e6      	b.n	7f08 <z_impl_k_sem_take+0x98>
    7f3a:	bf00      	nop
    7f3c:	0000d028 	.word	0x0000d028
    7f40:	0000d008 	.word	0x0000d008
    7f44:	0000b53f 	.word	0x0000b53f
    7f48:	0000d076 	.word	0x0000d076
    7f4c:	20000b80 	.word	0x20000b80
    7f50:	0000b7ed 	.word	0x0000b7ed
    7f54:	0000b846 	.word	0x0000b846
    7f58:	0000b85b 	.word	0x0000b85b
    7f5c:	0000b81a 	.word	0x0000b81a
    7f60:	0000b831 	.word	0x0000b831

00007f64 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    7f64:	89c3      	ldrh	r3, [r0, #14]
    7f66:	2b7f      	cmp	r3, #127	; 0x7f
    7f68:	d812      	bhi.n	7f90 <sliceable+0x2c>
	int ret = slice_ticks;
    7f6a:	4b0a      	ldr	r3, [pc, #40]	; (7f94 <sliceable+0x30>)
    7f6c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    7f6e:	b163      	cbz	r3, 7f8a <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    7f70:	4b09      	ldr	r3, [pc, #36]	; (7f98 <sliceable+0x34>)
    7f72:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7f76:	681b      	ldr	r3, [r3, #0]
    7f78:	429a      	cmp	r2, r3
    7f7a:	db09      	blt.n	7f90 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    7f7c:	7b43      	ldrb	r3, [r0, #13]
    7f7e:	06db      	lsls	r3, r3, #27
    7f80:	d106      	bne.n	7f90 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    7f82:	4b06      	ldr	r3, [pc, #24]	; (7f9c <sliceable+0x38>)
    7f84:	1ac3      	subs	r3, r0, r3
    7f86:	bf18      	it	ne
    7f88:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    7f8a:	f003 0001 	and.w	r0, r3, #1
    7f8e:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    7f90:	2300      	movs	r3, #0
    7f92:	e7fa      	b.n	7f8a <sliceable+0x26>
    7f94:	20000b8c 	.word	0x20000b8c
    7f98:	20000b88 	.word	0x20000b88
    7f9c:	20000268 	.word	0x20000268

00007fa0 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
    7fa0:	b508      	push	{r3, lr}
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    7fa2:	b168      	cbz	r0, 7fc0 <slice_timeout+0x20>
    7fa4:	4b10      	ldr	r3, [pc, #64]	; (7fe8 <slice_timeout+0x48>)
    7fa6:	4298      	cmp	r0, r3
    7fa8:	d30a      	bcc.n	7fc0 <slice_timeout+0x20>
    7faa:	f103 0218 	add.w	r2, r3, #24
    7fae:	4290      	cmp	r0, r2
    7fb0:	d206      	bcs.n	7fc0 <slice_timeout+0x20>
    7fb2:	1ac0      	subs	r0, r0, r3
    7fb4:	2218      	movs	r2, #24
    7fb6:	fbb0 f3f2 	udiv	r3, r0, r2
    7fba:	fb02 0313 	mls	r3, r2, r3, r0
    7fbe:	b15b      	cbz	r3, 7fd8 <slice_timeout+0x38>
    7fc0:	490a      	ldr	r1, [pc, #40]	; (7fec <slice_timeout+0x4c>)
    7fc2:	480b      	ldr	r0, [pc, #44]	; (7ff0 <slice_timeout+0x50>)
    7fc4:	4a0b      	ldr	r2, [pc, #44]	; (7ff4 <slice_timeout+0x54>)
    7fc6:	f240 13cb 	movw	r3, #459	; 0x1cb
    7fca:	f002 fa7c 	bl	a4c6 <assert_print>
    7fce:	4809      	ldr	r0, [pc, #36]	; (7ff4 <slice_timeout+0x54>)
    7fd0:	f240 11cb 	movw	r1, #459	; 0x1cb
    7fd4:	f002 fa70 	bl	a4b8 <assert_post_action>
    7fd8:	4b07      	ldr	r3, [pc, #28]	; (7ff8 <slice_timeout+0x58>)
    7fda:	10c0      	asrs	r0, r0, #3
    7fdc:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    7fde:	4b07      	ldr	r3, [pc, #28]	; (7ffc <slice_timeout+0x5c>)
    7fe0:	2201      	movs	r2, #1
    7fe2:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    7fe4:	bd08      	pop	{r3, pc}
    7fe6:	bf00      	nop
    7fe8:	20000368 	.word	0x20000368
    7fec:	0000d09b 	.word	0x0000d09b
    7ff0:	0000b53f 	.word	0x0000b53f
    7ff4:	0000d079 	.word	0x0000d079
    7ff8:	aaaaaaab 	.word	0xaaaaaaab
    7ffc:	200011a6 	.word	0x200011a6

00008000 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    8000:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    8002:	4b0e      	ldr	r3, [pc, #56]	; (803c <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    8004:	4c0e      	ldr	r4, [pc, #56]	; (8040 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    8006:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    8008:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    800c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    8010:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    8012:	4620      	mov	r0, r4
    8014:	f001 fa88 	bl	9528 <z_abort_timeout>
	slice_expired[cpu] = false;
    8018:	4b0a      	ldr	r3, [pc, #40]	; (8044 <z_reset_time_slice+0x44>)
    801a:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    801c:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    801e:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    8020:	f7ff ffa0 	bl	7f64 <sliceable>
    8024:	b148      	cbz	r0, 803a <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    8026:	4b08      	ldr	r3, [pc, #32]	; (8048 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    8028:	4908      	ldr	r1, [pc, #32]	; (804c <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    802a:	681a      	ldr	r2, [r3, #0]
    802c:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    802e:	4620      	mov	r0, r4
    8030:	17d3      	asrs	r3, r2, #31
	}
}
    8032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    8036:	f001 b9b7 	b.w	93a8 <z_add_timeout>
}
    803a:	bd70      	pop	{r4, r5, r6, pc}
    803c:	20000b58 	.word	0x20000b58
    8040:	20000368 	.word	0x20000368
    8044:	200011a6 	.word	0x200011a6
    8048:	20000b8c 	.word	0x20000b8c
    804c:	00007fa1 	.word	0x00007fa1

00008050 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    8050:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    8052:	4d14      	ldr	r5, [pc, #80]	; (80a4 <update_cache+0x54>)
    8054:	462b      	mov	r3, r5
    8056:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    805a:	429c      	cmp	r4, r3
    805c:	d000      	beq.n	8060 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    805e:	b904      	cbnz	r4, 8062 <update_cache+0x12>
    8060:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
    8062:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    8064:	b9a8      	cbnz	r0, 8092 <update_cache+0x42>
	__ASSERT(_current != NULL, "");
    8066:	b963      	cbnz	r3, 8082 <update_cache+0x32>
    8068:	490f      	ldr	r1, [pc, #60]	; (80a8 <update_cache+0x58>)
    806a:	4a10      	ldr	r2, [pc, #64]	; (80ac <update_cache+0x5c>)
    806c:	4810      	ldr	r0, [pc, #64]	; (80b0 <update_cache+0x60>)
    806e:	238a      	movs	r3, #138	; 0x8a
    8070:	f002 fa29 	bl	a4c6 <assert_print>
    8074:	480f      	ldr	r0, [pc, #60]	; (80b4 <update_cache+0x64>)
    8076:	f002 fa26 	bl	a4c6 <assert_print>
    807a:	480c      	ldr	r0, [pc, #48]	; (80ac <update_cache+0x5c>)
    807c:	218a      	movs	r1, #138	; 0x8a
    807e:	f002 fa1b 	bl	a4b8 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    8082:	7b5a      	ldrb	r2, [r3, #13]
    8084:	06d2      	lsls	r2, r2, #27
    8086:	d104      	bne.n	8092 <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    8088:	69a2      	ldr	r2, [r4, #24]
    808a:	b912      	cbnz	r2, 8092 <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
    808c:	89da      	ldrh	r2, [r3, #14]
    808e:	2a7f      	cmp	r2, #127	; 0x7f
    8090:	d805      	bhi.n	809e <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    8092:	429c      	cmp	r4, r3
    8094:	d002      	beq.n	809c <update_cache+0x4c>
			z_reset_time_slice(thread);
    8096:	4620      	mov	r0, r4
    8098:	f7ff ffb2 	bl	8000 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    809c:	4623      	mov	r3, r4
    809e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    80a0:	bd38      	pop	{r3, r4, r5, pc}
    80a2:	bf00      	nop
    80a4:	20000b58 	.word	0x20000b58
    80a8:	0000d234 	.word	0x0000d234
    80ac:	0000d079 	.word	0x0000d079
    80b0:	0000b53f 	.word	0x0000b53f
    80b4:	0000d076 	.word	0x0000d076

000080b8 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
    80b8:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    80ba:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    80be:	7b42      	ldrb	r2, [r0, #13]
    80c0:	2b00      	cmp	r3, #0
    80c2:	db38      	blt.n	8136 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    80c4:	06d3      	lsls	r3, r2, #27
    80c6:	d136      	bne.n	8136 <ready_thread+0x7e>
	return node->next != NULL;
    80c8:	6983      	ldr	r3, [r0, #24]
    80ca:	2b00      	cmp	r3, #0
    80cc:	d133      	bne.n	8136 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
    80ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
    80d2:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    80d4:	4a18      	ldr	r2, [pc, #96]	; (8138 <ready_thread+0x80>)
    80d6:	4290      	cmp	r0, r2
    80d8:	d109      	bne.n	80ee <ready_thread+0x36>
    80da:	4918      	ldr	r1, [pc, #96]	; (813c <ready_thread+0x84>)
    80dc:	4818      	ldr	r0, [pc, #96]	; (8140 <ready_thread+0x88>)
    80de:	4a19      	ldr	r2, [pc, #100]	; (8144 <ready_thread+0x8c>)
    80e0:	23bc      	movs	r3, #188	; 0xbc
    80e2:	f002 f9f0 	bl	a4c6 <assert_print>
    80e6:	4817      	ldr	r0, [pc, #92]	; (8144 <ready_thread+0x8c>)
    80e8:	21bc      	movs	r1, #188	; 0xbc
    80ea:	f002 f9e5 	bl	a4b8 <assert_post_action>
	return list->head == list;
    80ee:	4916      	ldr	r1, [pc, #88]	; (8148 <ready_thread+0x90>)
    80f0:	460a      	mov	r2, r1
    80f2:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    80f6:	4294      	cmp	r4, r2
    80f8:	bf18      	it	ne
    80fa:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    80fc:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    80fe:	b923      	cbnz	r3, 810a <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    8100:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
    8104:	6020      	str	r0, [r4, #0]
	list->tail = node;
    8106:	6208      	str	r0, [r1, #32]
}
    8108:	e00c      	b.n	8124 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
    810a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    810e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    8112:	42b5      	cmp	r5, r6
    8114:	d00b      	beq.n	812e <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8116:	42ae      	cmp	r6, r5
    8118:	dd09      	ble.n	812e <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    811a:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
    811c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    8120:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    8122:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
    8124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    8128:	2000      	movs	r0, #0
    812a:	f7ff bf91 	b.w	8050 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    812e:	42a3      	cmp	r3, r4
    8130:	d0e6      	beq.n	8100 <ready_thread+0x48>
    8132:	681b      	ldr	r3, [r3, #0]
    8134:	e7e3      	b.n	80fe <ready_thread+0x46>
}
    8136:	bd70      	pop	{r4, r5, r6, pc}
    8138:	20000268 	.word	0x20000268
    813c:	0000d25b 	.word	0x0000d25b
    8140:	0000b53f 	.word	0x0000b53f
    8144:	0000d079 	.word	0x0000d079
    8148:	20000b58 	.word	0x20000b58

0000814c <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
    814c:	b538      	push	{r3, r4, r5, lr}
    814e:	4604      	mov	r4, r0
	__asm__ volatile(
    8150:	f04f 0320 	mov.w	r3, #32
    8154:	f3ef 8511 	mrs	r5, BASEPRI
    8158:	f383 8812 	msr	BASEPRI_MAX, r3
    815c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8160:	4816      	ldr	r0, [pc, #88]	; (81bc <z_ready_thread+0x70>)
    8162:	f7ff fc8b 	bl	7a7c <z_spin_lock_valid>
    8166:	b968      	cbnz	r0, 8184 <z_ready_thread+0x38>
    8168:	4a15      	ldr	r2, [pc, #84]	; (81c0 <z_ready_thread+0x74>)
    816a:	4916      	ldr	r1, [pc, #88]	; (81c4 <z_ready_thread+0x78>)
    816c:	4816      	ldr	r0, [pc, #88]	; (81c8 <z_ready_thread+0x7c>)
    816e:	2394      	movs	r3, #148	; 0x94
    8170:	f002 f9a9 	bl	a4c6 <assert_print>
    8174:	4911      	ldr	r1, [pc, #68]	; (81bc <z_ready_thread+0x70>)
    8176:	4815      	ldr	r0, [pc, #84]	; (81cc <z_ready_thread+0x80>)
    8178:	f002 f9a5 	bl	a4c6 <assert_print>
    817c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    817e:	4810      	ldr	r0, [pc, #64]	; (81c0 <z_ready_thread+0x74>)
    8180:	f002 f99a 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8184:	480d      	ldr	r0, [pc, #52]	; (81bc <z_ready_thread+0x70>)
    8186:	f7ff fc97 	bl	7ab8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
    818a:	4620      	mov	r0, r4
    818c:	f7ff ff94 	bl	80b8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8190:	480a      	ldr	r0, [pc, #40]	; (81bc <z_ready_thread+0x70>)
    8192:	f7ff fc81 	bl	7a98 <z_spin_unlock_valid>
    8196:	b958      	cbnz	r0, 81b0 <z_ready_thread+0x64>
    8198:	4a09      	ldr	r2, [pc, #36]	; (81c0 <z_ready_thread+0x74>)
    819a:	490d      	ldr	r1, [pc, #52]	; (81d0 <z_ready_thread+0x84>)
    819c:	480a      	ldr	r0, [pc, #40]	; (81c8 <z_ready_thread+0x7c>)
    819e:	23c2      	movs	r3, #194	; 0xc2
    81a0:	f002 f991 	bl	a4c6 <assert_print>
    81a4:	4905      	ldr	r1, [pc, #20]	; (81bc <z_ready_thread+0x70>)
    81a6:	480b      	ldr	r0, [pc, #44]	; (81d4 <z_ready_thread+0x88>)
    81a8:	f002 f98d 	bl	a4c6 <assert_print>
    81ac:	21c2      	movs	r1, #194	; 0xc2
    81ae:	e7e6      	b.n	817e <z_ready_thread+0x32>
	__asm__ volatile(
    81b0:	f385 8811 	msr	BASEPRI, r5
    81b4:	f3bf 8f6f 	isb	sy
		}
	}
}
    81b8:	bd38      	pop	{r3, r4, r5, pc}
    81ba:	bf00      	nop
    81bc:	20000b90 	.word	0x20000b90
    81c0:	0000b7ed 	.word	0x0000b7ed
    81c4:	0000b846 	.word	0x0000b846
    81c8:	0000b53f 	.word	0x0000b53f
    81cc:	0000b85b 	.word	0x0000b85b
    81d0:	0000b81a 	.word	0x0000b81a
    81d4:	0000b831 	.word	0x0000b831

000081d8 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    81d8:	b538      	push	{r3, r4, r5, lr}
    81da:	4604      	mov	r4, r0
	__asm__ volatile(
    81dc:	f04f 0320 	mov.w	r3, #32
    81e0:	f3ef 8511 	mrs	r5, BASEPRI
    81e4:	f383 8812 	msr	BASEPRI_MAX, r3
    81e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81ec:	4817      	ldr	r0, [pc, #92]	; (824c <z_unpend_thread_no_timeout+0x74>)
    81ee:	f7ff fc45 	bl	7a7c <z_spin_lock_valid>
    81f2:	b968      	cbnz	r0, 8210 <z_unpend_thread_no_timeout+0x38>
    81f4:	4a16      	ldr	r2, [pc, #88]	; (8250 <z_unpend_thread_no_timeout+0x78>)
    81f6:	4917      	ldr	r1, [pc, #92]	; (8254 <z_unpend_thread_no_timeout+0x7c>)
    81f8:	4817      	ldr	r0, [pc, #92]	; (8258 <z_unpend_thread_no_timeout+0x80>)
    81fa:	2394      	movs	r3, #148	; 0x94
    81fc:	f002 f963 	bl	a4c6 <assert_print>
    8200:	4912      	ldr	r1, [pc, #72]	; (824c <z_unpend_thread_no_timeout+0x74>)
    8202:	4816      	ldr	r0, [pc, #88]	; (825c <z_unpend_thread_no_timeout+0x84>)
    8204:	f002 f95f 	bl	a4c6 <assert_print>
    8208:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    820a:	4811      	ldr	r0, [pc, #68]	; (8250 <z_unpend_thread_no_timeout+0x78>)
    820c:	f002 f954 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8210:	480e      	ldr	r0, [pc, #56]	; (824c <z_unpend_thread_no_timeout+0x74>)
    8212:	f7ff fc51 	bl	7ab8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (thread->base.pended_on != NULL) {
    8216:	68a3      	ldr	r3, [r4, #8]
    8218:	b113      	cbz	r3, 8220 <z_unpend_thread_no_timeout+0x48>
			unpend_thread_no_timeout(thread);
    821a:	4620      	mov	r0, r4
    821c:	f000 fc50 	bl	8ac0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8220:	480a      	ldr	r0, [pc, #40]	; (824c <z_unpend_thread_no_timeout+0x74>)
    8222:	f7ff fc39 	bl	7a98 <z_spin_unlock_valid>
    8226:	b958      	cbnz	r0, 8240 <z_unpend_thread_no_timeout+0x68>
    8228:	4a09      	ldr	r2, [pc, #36]	; (8250 <z_unpend_thread_no_timeout+0x78>)
    822a:	490d      	ldr	r1, [pc, #52]	; (8260 <z_unpend_thread_no_timeout+0x88>)
    822c:	480a      	ldr	r0, [pc, #40]	; (8258 <z_unpend_thread_no_timeout+0x80>)
    822e:	23c2      	movs	r3, #194	; 0xc2
    8230:	f002 f949 	bl	a4c6 <assert_print>
    8234:	4905      	ldr	r1, [pc, #20]	; (824c <z_unpend_thread_no_timeout+0x74>)
    8236:	480b      	ldr	r0, [pc, #44]	; (8264 <z_unpend_thread_no_timeout+0x8c>)
    8238:	f002 f945 	bl	a4c6 <assert_print>
    823c:	21c2      	movs	r1, #194	; 0xc2
    823e:	e7e4      	b.n	820a <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
    8240:	f385 8811 	msr	BASEPRI, r5
    8244:	f3bf 8f6f 	isb	sy
		}
	}
}
    8248:	bd38      	pop	{r3, r4, r5, pc}
    824a:	bf00      	nop
    824c:	20000b90 	.word	0x20000b90
    8250:	0000b7ed 	.word	0x0000b7ed
    8254:	0000b846 	.word	0x0000b846
    8258:	0000b53f 	.word	0x0000b53f
    825c:	0000b85b 	.word	0x0000b85b
    8260:	0000b81a 	.word	0x0000b81a
    8264:	0000b831 	.word	0x0000b831

00008268 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    8268:	b570      	push	{r4, r5, r6, lr}
    826a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    826c:	460d      	mov	r5, r1
    826e:	b9e9      	cbnz	r1, 82ac <z_reschedule+0x44>
    8270:	f3ef 8605 	mrs	r6, IPSR
    8274:	b9d6      	cbnz	r6, 82ac <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    8276:	4b18      	ldr	r3, [pc, #96]	; (82d8 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
    8278:	699a      	ldr	r2, [r3, #24]
    827a:	689b      	ldr	r3, [r3, #8]
    827c:	429a      	cmp	r2, r3
    827e:	d015      	beq.n	82ac <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8280:	f7ff fc0a 	bl	7a98 <z_spin_unlock_valid>
    8284:	b968      	cbnz	r0, 82a2 <z_reschedule+0x3a>
    8286:	4a15      	ldr	r2, [pc, #84]	; (82dc <z_reschedule+0x74>)
    8288:	4915      	ldr	r1, [pc, #84]	; (82e0 <z_reschedule+0x78>)
    828a:	4816      	ldr	r0, [pc, #88]	; (82e4 <z_reschedule+0x7c>)
    828c:	23e1      	movs	r3, #225	; 0xe1
    828e:	f002 f91a 	bl	a4c6 <assert_print>
    8292:	4621      	mov	r1, r4
    8294:	4814      	ldr	r0, [pc, #80]	; (82e8 <z_reschedule+0x80>)
    8296:	f002 f916 	bl	a4c6 <assert_print>
    829a:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    829c:	480f      	ldr	r0, [pc, #60]	; (82dc <z_reschedule+0x74>)
    829e:	f002 f90b 	bl	a4b8 <assert_post_action>
	ret = arch_swap(key);
    82a2:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    82a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82a8:	f7fb b9a4 	b.w	35f4 <arch_swap>
    82ac:	4620      	mov	r0, r4
    82ae:	f7ff fbf3 	bl	7a98 <z_spin_unlock_valid>
    82b2:	b958      	cbnz	r0, 82cc <z_reschedule+0x64>
    82b4:	4a09      	ldr	r2, [pc, #36]	; (82dc <z_reschedule+0x74>)
    82b6:	490a      	ldr	r1, [pc, #40]	; (82e0 <z_reschedule+0x78>)
    82b8:	480a      	ldr	r0, [pc, #40]	; (82e4 <z_reschedule+0x7c>)
    82ba:	23c2      	movs	r3, #194	; 0xc2
    82bc:	f002 f903 	bl	a4c6 <assert_print>
    82c0:	4621      	mov	r1, r4
    82c2:	4809      	ldr	r0, [pc, #36]	; (82e8 <z_reschedule+0x80>)
    82c4:	f002 f8ff 	bl	a4c6 <assert_print>
    82c8:	21c2      	movs	r1, #194	; 0xc2
    82ca:	e7e7      	b.n	829c <z_reschedule+0x34>
    82cc:	f385 8811 	msr	BASEPRI, r5
    82d0:	f3bf 8f6f 	isb	sy
    82d4:	bd70      	pop	{r4, r5, r6, pc}
    82d6:	bf00      	nop
    82d8:	20000b58 	.word	0x20000b58
    82dc:	0000b7ed 	.word	0x0000b7ed
    82e0:	0000b81a 	.word	0x0000b81a
    82e4:	0000b53f 	.word	0x0000b53f
    82e8:	0000b831 	.word	0x0000b831

000082ec <z_sched_start>:
{
    82ec:	b538      	push	{r3, r4, r5, lr}
    82ee:	4604      	mov	r4, r0
	__asm__ volatile(
    82f0:	f04f 0320 	mov.w	r3, #32
    82f4:	f3ef 8511 	mrs	r5, BASEPRI
    82f8:	f383 8812 	msr	BASEPRI_MAX, r3
    82fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8300:	481c      	ldr	r0, [pc, #112]	; (8374 <z_sched_start+0x88>)
    8302:	f7ff fbbb 	bl	7a7c <z_spin_lock_valid>
    8306:	b968      	cbnz	r0, 8324 <z_sched_start+0x38>
    8308:	4a1b      	ldr	r2, [pc, #108]	; (8378 <z_sched_start+0x8c>)
    830a:	491c      	ldr	r1, [pc, #112]	; (837c <z_sched_start+0x90>)
    830c:	481c      	ldr	r0, [pc, #112]	; (8380 <z_sched_start+0x94>)
    830e:	2394      	movs	r3, #148	; 0x94
    8310:	f002 f8d9 	bl	a4c6 <assert_print>
    8314:	4917      	ldr	r1, [pc, #92]	; (8374 <z_sched_start+0x88>)
    8316:	481b      	ldr	r0, [pc, #108]	; (8384 <z_sched_start+0x98>)
    8318:	f002 f8d5 	bl	a4c6 <assert_print>
    831c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    831e:	4816      	ldr	r0, [pc, #88]	; (8378 <z_sched_start+0x8c>)
    8320:	f002 f8ca 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8324:	4813      	ldr	r0, [pc, #76]	; (8374 <z_sched_start+0x88>)
    8326:	f7ff fbc7 	bl	7ab8 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    832a:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    832c:	075a      	lsls	r2, r3, #29
    832e:	d414      	bmi.n	835a <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8330:	4810      	ldr	r0, [pc, #64]	; (8374 <z_sched_start+0x88>)
    8332:	f7ff fbb1 	bl	7a98 <z_spin_unlock_valid>
    8336:	b958      	cbnz	r0, 8350 <z_sched_start+0x64>
    8338:	4a0f      	ldr	r2, [pc, #60]	; (8378 <z_sched_start+0x8c>)
    833a:	4913      	ldr	r1, [pc, #76]	; (8388 <z_sched_start+0x9c>)
    833c:	4810      	ldr	r0, [pc, #64]	; (8380 <z_sched_start+0x94>)
    833e:	23c2      	movs	r3, #194	; 0xc2
    8340:	f002 f8c1 	bl	a4c6 <assert_print>
    8344:	490b      	ldr	r1, [pc, #44]	; (8374 <z_sched_start+0x88>)
    8346:	4811      	ldr	r0, [pc, #68]	; (838c <z_sched_start+0xa0>)
    8348:	f002 f8bd 	bl	a4c6 <assert_print>
    834c:	21c2      	movs	r1, #194	; 0xc2
    834e:	e7e6      	b.n	831e <z_sched_start+0x32>
	__asm__ volatile(
    8350:	f385 8811 	msr	BASEPRI, r5
    8354:	f3bf 8f6f 	isb	sy
}
    8358:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    835a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    835e:	4620      	mov	r0, r4
    8360:	7363      	strb	r3, [r4, #13]
    8362:	f7ff fea9 	bl	80b8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    8366:	4629      	mov	r1, r5
    8368:	4802      	ldr	r0, [pc, #8]	; (8374 <z_sched_start+0x88>)
}
    836a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    836e:	f7ff bf7b 	b.w	8268 <z_reschedule>
    8372:	bf00      	nop
    8374:	20000b90 	.word	0x20000b90
    8378:	0000b7ed 	.word	0x0000b7ed
    837c:	0000b846 	.word	0x0000b846
    8380:	0000b53f 	.word	0x0000b53f
    8384:	0000b85b 	.word	0x0000b85b
    8388:	0000b81a 	.word	0x0000b81a
    838c:	0000b831 	.word	0x0000b831

00008390 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
    8390:	b510      	push	{r4, lr}
	__asm__ volatile(
    8392:	f04f 0320 	mov.w	r3, #32
    8396:	f3ef 8411 	mrs	r4, BASEPRI
    839a:	f383 8812 	msr	BASEPRI_MAX, r3
    839e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    83a2:	4825      	ldr	r0, [pc, #148]	; (8438 <k_sched_lock+0xa8>)
    83a4:	f7ff fb6a 	bl	7a7c <z_spin_lock_valid>
    83a8:	b960      	cbnz	r0, 83c4 <k_sched_lock+0x34>
    83aa:	4a24      	ldr	r2, [pc, #144]	; (843c <k_sched_lock+0xac>)
    83ac:	4924      	ldr	r1, [pc, #144]	; (8440 <k_sched_lock+0xb0>)
    83ae:	4825      	ldr	r0, [pc, #148]	; (8444 <k_sched_lock+0xb4>)
    83b0:	2394      	movs	r3, #148	; 0x94
    83b2:	f002 f888 	bl	a4c6 <assert_print>
    83b6:	4920      	ldr	r1, [pc, #128]	; (8438 <k_sched_lock+0xa8>)
    83b8:	4823      	ldr	r0, [pc, #140]	; (8448 <k_sched_lock+0xb8>)
    83ba:	f002 f884 	bl	a4c6 <assert_print>
    83be:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    83c0:	481e      	ldr	r0, [pc, #120]	; (843c <k_sched_lock+0xac>)
    83c2:	e010      	b.n	83e6 <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
    83c4:	481c      	ldr	r0, [pc, #112]	; (8438 <k_sched_lock+0xa8>)
    83c6:	f7ff fb77 	bl	7ab8 <z_spin_lock_set_owner>
    83ca:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    83ce:	b163      	cbz	r3, 83ea <k_sched_lock+0x5a>
    83d0:	491e      	ldr	r1, [pc, #120]	; (844c <k_sched_lock+0xbc>)
    83d2:	4a1f      	ldr	r2, [pc, #124]	; (8450 <k_sched_lock+0xc0>)
    83d4:	481b      	ldr	r0, [pc, #108]	; (8444 <k_sched_lock+0xb4>)
    83d6:	23fd      	movs	r3, #253	; 0xfd
    83d8:	f002 f875 	bl	a4c6 <assert_print>
    83dc:	481d      	ldr	r0, [pc, #116]	; (8454 <k_sched_lock+0xc4>)
    83de:	f002 f872 	bl	a4c6 <assert_print>
    83e2:	21fd      	movs	r1, #253	; 0xfd
    83e4:	481a      	ldr	r0, [pc, #104]	; (8450 <k_sched_lock+0xc0>)
    83e6:	f002 f867 	bl	a4b8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    83ea:	4b1b      	ldr	r3, [pc, #108]	; (8458 <k_sched_lock+0xc8>)
    83ec:	689a      	ldr	r2, [r3, #8]
    83ee:	7bd3      	ldrb	r3, [r2, #15]
    83f0:	2b01      	cmp	r3, #1
    83f2:	d10a      	bne.n	840a <k_sched_lock+0x7a>
    83f4:	4919      	ldr	r1, [pc, #100]	; (845c <k_sched_lock+0xcc>)
    83f6:	4a16      	ldr	r2, [pc, #88]	; (8450 <k_sched_lock+0xc0>)
    83f8:	4812      	ldr	r0, [pc, #72]	; (8444 <k_sched_lock+0xb4>)
    83fa:	23fe      	movs	r3, #254	; 0xfe
    83fc:	f002 f863 	bl	a4c6 <assert_print>
    8400:	4814      	ldr	r0, [pc, #80]	; (8454 <k_sched_lock+0xc4>)
    8402:	f002 f860 	bl	a4c6 <assert_print>
    8406:	21fe      	movs	r1, #254	; 0xfe
    8408:	e7ec      	b.n	83e4 <k_sched_lock+0x54>

	--_current->base.sched_locked;
    840a:	3b01      	subs	r3, #1
    840c:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    840e:	480a      	ldr	r0, [pc, #40]	; (8438 <k_sched_lock+0xa8>)
    8410:	f7ff fb42 	bl	7a98 <z_spin_unlock_valid>
    8414:	b958      	cbnz	r0, 842e <k_sched_lock+0x9e>
    8416:	4a09      	ldr	r2, [pc, #36]	; (843c <k_sched_lock+0xac>)
    8418:	4911      	ldr	r1, [pc, #68]	; (8460 <k_sched_lock+0xd0>)
    841a:	480a      	ldr	r0, [pc, #40]	; (8444 <k_sched_lock+0xb4>)
    841c:	23c2      	movs	r3, #194	; 0xc2
    841e:	f002 f852 	bl	a4c6 <assert_print>
    8422:	4905      	ldr	r1, [pc, #20]	; (8438 <k_sched_lock+0xa8>)
    8424:	480f      	ldr	r0, [pc, #60]	; (8464 <k_sched_lock+0xd4>)
    8426:	f002 f84e 	bl	a4c6 <assert_print>
    842a:	21c2      	movs	r1, #194	; 0xc2
    842c:	e7c8      	b.n	83c0 <k_sched_lock+0x30>
	__asm__ volatile(
    842e:	f384 8811 	msr	BASEPRI, r4
    8432:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    8436:	bd10      	pop	{r4, pc}
    8438:	20000b90 	.word	0x20000b90
    843c:	0000b7ed 	.word	0x0000b7ed
    8440:	0000b846 	.word	0x0000b846
    8444:	0000b53f 	.word	0x0000b53f
    8448:	0000b85b 	.word	0x0000b85b
    844c:	0000cefd 	.word	0x0000cefd
    8450:	0000d27c 	.word	0x0000d27c
    8454:	0000d076 	.word	0x0000d076
    8458:	20000b58 	.word	0x20000b58
    845c:	0000d2a7 	.word	0x0000d2a7
    8460:	0000b81a 	.word	0x0000b81a
    8464:	0000b831 	.word	0x0000b831

00008468 <k_sched_unlock>:

void k_sched_unlock(void)
{
    8468:	b510      	push	{r4, lr}
	__asm__ volatile(
    846a:	f04f 0320 	mov.w	r3, #32
    846e:	f3ef 8411 	mrs	r4, BASEPRI
    8472:	f383 8812 	msr	BASEPRI_MAX, r3
    8476:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    847a:	4829      	ldr	r0, [pc, #164]	; (8520 <k_sched_unlock+0xb8>)
    847c:	f7ff fafe 	bl	7a7c <z_spin_lock_valid>
    8480:	b960      	cbnz	r0, 849c <k_sched_unlock+0x34>
    8482:	4a28      	ldr	r2, [pc, #160]	; (8524 <k_sched_unlock+0xbc>)
    8484:	4928      	ldr	r1, [pc, #160]	; (8528 <k_sched_unlock+0xc0>)
    8486:	4829      	ldr	r0, [pc, #164]	; (852c <k_sched_unlock+0xc4>)
    8488:	2394      	movs	r3, #148	; 0x94
    848a:	f002 f81c 	bl	a4c6 <assert_print>
    848e:	4924      	ldr	r1, [pc, #144]	; (8520 <k_sched_unlock+0xb8>)
    8490:	4827      	ldr	r0, [pc, #156]	; (8530 <k_sched_unlock+0xc8>)
    8492:	f002 f818 	bl	a4c6 <assert_print>
    8496:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8498:	4822      	ldr	r0, [pc, #136]	; (8524 <k_sched_unlock+0xbc>)
    849a:	e013      	b.n	84c4 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
    849c:	4820      	ldr	r0, [pc, #128]	; (8520 <k_sched_unlock+0xb8>)
    849e:	f7ff fb0b 	bl	7ab8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
    84a2:	4b24      	ldr	r3, [pc, #144]	; (8534 <k_sched_unlock+0xcc>)
    84a4:	689a      	ldr	r2, [r3, #8]
    84a6:	7bd3      	ldrb	r3, [r2, #15]
    84a8:	b973      	cbnz	r3, 84c8 <k_sched_unlock+0x60>
    84aa:	4923      	ldr	r1, [pc, #140]	; (8538 <k_sched_unlock+0xd0>)
    84ac:	4a23      	ldr	r2, [pc, #140]	; (853c <k_sched_unlock+0xd4>)
    84ae:	481f      	ldr	r0, [pc, #124]	; (852c <k_sched_unlock+0xc4>)
    84b0:	f240 33ef 	movw	r3, #1007	; 0x3ef
    84b4:	f002 f807 	bl	a4c6 <assert_print>
    84b8:	4821      	ldr	r0, [pc, #132]	; (8540 <k_sched_unlock+0xd8>)
    84ba:	f002 f804 	bl	a4c6 <assert_print>
    84be:	f240 31ef 	movw	r1, #1007	; 0x3ef
    84c2:	481e      	ldr	r0, [pc, #120]	; (853c <k_sched_unlock+0xd4>)
    84c4:	f001 fff8 	bl	a4b8 <assert_post_action>
    84c8:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    84cc:	b160      	cbz	r0, 84e8 <k_sched_unlock+0x80>
    84ce:	491d      	ldr	r1, [pc, #116]	; (8544 <k_sched_unlock+0xdc>)
    84d0:	4a1a      	ldr	r2, [pc, #104]	; (853c <k_sched_unlock+0xd4>)
    84d2:	4816      	ldr	r0, [pc, #88]	; (852c <k_sched_unlock+0xc4>)
    84d4:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
    84d8:	f001 fff5 	bl	a4c6 <assert_print>
    84dc:	4818      	ldr	r0, [pc, #96]	; (8540 <k_sched_unlock+0xd8>)
    84de:	f001 fff2 	bl	a4c6 <assert_print>
    84e2:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
    84e6:	e7ec      	b.n	84c2 <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
    84e8:	3301      	adds	r3, #1
    84ea:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    84ec:	f7ff fdb0 	bl	8050 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    84f0:	480b      	ldr	r0, [pc, #44]	; (8520 <k_sched_unlock+0xb8>)
    84f2:	f7ff fad1 	bl	7a98 <z_spin_unlock_valid>
    84f6:	b958      	cbnz	r0, 8510 <k_sched_unlock+0xa8>
    84f8:	4a0a      	ldr	r2, [pc, #40]	; (8524 <k_sched_unlock+0xbc>)
    84fa:	4913      	ldr	r1, [pc, #76]	; (8548 <k_sched_unlock+0xe0>)
    84fc:	480b      	ldr	r0, [pc, #44]	; (852c <k_sched_unlock+0xc4>)
    84fe:	23c2      	movs	r3, #194	; 0xc2
    8500:	f001 ffe1 	bl	a4c6 <assert_print>
    8504:	4906      	ldr	r1, [pc, #24]	; (8520 <k_sched_unlock+0xb8>)
    8506:	4811      	ldr	r0, [pc, #68]	; (854c <k_sched_unlock+0xe4>)
    8508:	f001 ffdd 	bl	a4c6 <assert_print>
    850c:	21c2      	movs	r1, #194	; 0xc2
    850e:	e7c3      	b.n	8498 <k_sched_unlock+0x30>
	__asm__ volatile(
    8510:	f384 8811 	msr	BASEPRI, r4
    8514:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    8518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    851c:	f002 bbce 	b.w	acbc <z_reschedule_unlocked>
    8520:	20000b90 	.word	0x20000b90
    8524:	0000b7ed 	.word	0x0000b7ed
    8528:	0000b846 	.word	0x0000b846
    852c:	0000b53f 	.word	0x0000b53f
    8530:	0000b85b 	.word	0x0000b85b
    8534:	20000b58 	.word	0x20000b58
    8538:	0000d2d8 	.word	0x0000d2d8
    853c:	0000d079 	.word	0x0000d079
    8540:	0000d076 	.word	0x0000d076
    8544:	0000cefd 	.word	0x0000cefd
    8548:	0000b81a 	.word	0x0000b81a
    854c:	0000b831 	.word	0x0000b831

00008550 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    8550:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8552:	4b0b      	ldr	r3, [pc, #44]	; (8580 <z_priq_dumb_remove+0x30>)
    8554:	4299      	cmp	r1, r3
    8556:	d10b      	bne.n	8570 <z_priq_dumb_remove+0x20>
    8558:	490a      	ldr	r1, [pc, #40]	; (8584 <z_priq_dumb_remove+0x34>)
    855a:	480b      	ldr	r0, [pc, #44]	; (8588 <z_priq_dumb_remove+0x38>)
    855c:	4a0b      	ldr	r2, [pc, #44]	; (858c <z_priq_dumb_remove+0x3c>)
    855e:	f240 437b 	movw	r3, #1147	; 0x47b
    8562:	f001 ffb0 	bl	a4c6 <assert_print>
    8566:	4809      	ldr	r0, [pc, #36]	; (858c <z_priq_dumb_remove+0x3c>)
    8568:	f240 417b 	movw	r1, #1147	; 0x47b
    856c:	f001 ffa4 	bl	a4b8 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    8570:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
    8574:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8576:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8578:	2300      	movs	r3, #0
	node->prev = NULL;
    857a:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    857e:	bd08      	pop	{r3, pc}
    8580:	20000268 	.word	0x20000268
    8584:	0000d25b 	.word	0x0000d25b
    8588:	0000b53f 	.word	0x0000b53f
    858c:	0000d079 	.word	0x0000d079

00008590 <move_thread_to_end_of_prio_q>:
{
    8590:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    8592:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    8596:	7b43      	ldrb	r3, [r0, #13]
    8598:	2a00      	cmp	r2, #0
{
    859a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    859c:	da06      	bge.n	85ac <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    859e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    85a2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    85a4:	4601      	mov	r1, r0
    85a6:	481d      	ldr	r0, [pc, #116]	; (861c <move_thread_to_end_of_prio_q+0x8c>)
    85a8:	f7ff ffd2 	bl	8550 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    85ac:	7b63      	ldrb	r3, [r4, #13]
    85ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
    85b2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    85b4:	4b1a      	ldr	r3, [pc, #104]	; (8620 <move_thread_to_end_of_prio_q+0x90>)
    85b6:	429c      	cmp	r4, r3
    85b8:	d109      	bne.n	85ce <move_thread_to_end_of_prio_q+0x3e>
    85ba:	491a      	ldr	r1, [pc, #104]	; (8624 <move_thread_to_end_of_prio_q+0x94>)
    85bc:	481a      	ldr	r0, [pc, #104]	; (8628 <move_thread_to_end_of_prio_q+0x98>)
    85be:	4a1b      	ldr	r2, [pc, #108]	; (862c <move_thread_to_end_of_prio_q+0x9c>)
    85c0:	23bc      	movs	r3, #188	; 0xbc
    85c2:	f001 ff80 	bl	a4c6 <assert_print>
    85c6:	4819      	ldr	r0, [pc, #100]	; (862c <move_thread_to_end_of_prio_q+0x9c>)
    85c8:	21bc      	movs	r1, #188	; 0xbc
    85ca:	f001 ff75 	bl	a4b8 <assert_post_action>
	return list->head == list;
    85ce:	4a18      	ldr	r2, [pc, #96]	; (8630 <move_thread_to_end_of_prio_q+0xa0>)
    85d0:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
    85d2:	6a10      	ldr	r0, [r2, #32]
	return list->head == list;
    85d4:	f851 3f1c 	ldr.w	r3, [r1, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    85d8:	428b      	cmp	r3, r1
    85da:	bf08      	it	eq
    85dc:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    85de:	b923      	cbnz	r3, 85ea <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
    85e0:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
    85e4:	6004      	str	r4, [r0, #0]
	list->tail = node;
    85e6:	6214      	str	r4, [r2, #32]
}
    85e8:	e00c      	b.n	8604 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
    85ea:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    85ee:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    85f2:	42b5      	cmp	r5, r6
    85f4:	d00e      	beq.n	8614 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
    85f6:	42ae      	cmp	r6, r5
    85f8:	dd0c      	ble.n	8614 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
    85fa:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    85fc:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    8600:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    8602:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    8604:	6890      	ldr	r0, [r2, #8]
    8606:	1b03      	subs	r3, r0, r4
    8608:	4258      	negs	r0, r3
}
    860a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    860e:	4158      	adcs	r0, r3
    8610:	f7ff bd1e 	b.w	8050 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8614:	4298      	cmp	r0, r3
    8616:	d0e3      	beq.n	85e0 <move_thread_to_end_of_prio_q+0x50>
    8618:	681b      	ldr	r3, [r3, #0]
    861a:	e7e0      	b.n	85de <move_thread_to_end_of_prio_q+0x4e>
    861c:	20000b74 	.word	0x20000b74
    8620:	20000268 	.word	0x20000268
    8624:	0000d25b 	.word	0x0000d25b
    8628:	0000b53f 	.word	0x0000b53f
    862c:	0000d079 	.word	0x0000d079
    8630:	20000b58 	.word	0x20000b58

00008634 <z_time_slice>:
{
    8634:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8636:	f04f 0320 	mov.w	r3, #32
    863a:	f3ef 8511 	mrs	r5, BASEPRI
    863e:	f383 8812 	msr	BASEPRI_MAX, r3
    8642:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8646:	4823      	ldr	r0, [pc, #140]	; (86d4 <z_time_slice+0xa0>)
    8648:	f7ff fa18 	bl	7a7c <z_spin_lock_valid>
    864c:	b968      	cbnz	r0, 866a <z_time_slice+0x36>
    864e:	4a22      	ldr	r2, [pc, #136]	; (86d8 <z_time_slice+0xa4>)
    8650:	4922      	ldr	r1, [pc, #136]	; (86dc <z_time_slice+0xa8>)
    8652:	4823      	ldr	r0, [pc, #140]	; (86e0 <z_time_slice+0xac>)
    8654:	2394      	movs	r3, #148	; 0x94
    8656:	f001 ff36 	bl	a4c6 <assert_print>
    865a:	491e      	ldr	r1, [pc, #120]	; (86d4 <z_time_slice+0xa0>)
    865c:	4821      	ldr	r0, [pc, #132]	; (86e4 <z_time_slice+0xb0>)
    865e:	f001 ff32 	bl	a4c6 <assert_print>
    8662:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8664:	481c      	ldr	r0, [pc, #112]	; (86d8 <z_time_slice+0xa4>)
    8666:	f001 ff27 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    866a:	481a      	ldr	r0, [pc, #104]	; (86d4 <z_time_slice+0xa0>)
    866c:	f7ff fa24 	bl	7ab8 <z_spin_lock_set_owner>
	struct k_thread *curr = _current;
    8670:	4b1d      	ldr	r3, [pc, #116]	; (86e8 <z_time_slice+0xb4>)
	if (pending_current == curr) {
    8672:	4a1e      	ldr	r2, [pc, #120]	; (86ec <z_time_slice+0xb8>)
	struct k_thread *curr = _current;
    8674:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    8676:	6810      	ldr	r0, [r2, #0]
    8678:	42a0      	cmp	r0, r4
    867a:	d111      	bne.n	86a0 <z_time_slice+0x6c>
		z_reset_time_slice(curr);
    867c:	f7ff fcc0 	bl	8000 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8680:	4814      	ldr	r0, [pc, #80]	; (86d4 <z_time_slice+0xa0>)
    8682:	f7ff fa09 	bl	7a98 <z_spin_unlock_valid>
    8686:	b9f8      	cbnz	r0, 86c8 <z_time_slice+0x94>
    8688:	4a13      	ldr	r2, [pc, #76]	; (86d8 <z_time_slice+0xa4>)
    868a:	4919      	ldr	r1, [pc, #100]	; (86f0 <z_time_slice+0xbc>)
    868c:	4814      	ldr	r0, [pc, #80]	; (86e0 <z_time_slice+0xac>)
    868e:	23c2      	movs	r3, #194	; 0xc2
    8690:	f001 ff19 	bl	a4c6 <assert_print>
    8694:	490f      	ldr	r1, [pc, #60]	; (86d4 <z_time_slice+0xa0>)
    8696:	4817      	ldr	r0, [pc, #92]	; (86f4 <z_time_slice+0xc0>)
    8698:	f001 ff15 	bl	a4c6 <assert_print>
    869c:	21c2      	movs	r1, #194	; 0xc2
    869e:	e7e1      	b.n	8664 <z_time_slice+0x30>
	pending_current = NULL;
    86a0:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    86a2:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    86a4:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    86a6:	4a14      	ldr	r2, [pc, #80]	; (86f8 <z_time_slice+0xc4>)
    86a8:	5cd3      	ldrb	r3, [r2, r3]
    86aa:	2b00      	cmp	r3, #0
    86ac:	d0e8      	beq.n	8680 <z_time_slice+0x4c>
    86ae:	4620      	mov	r0, r4
    86b0:	f7ff fc58 	bl	7f64 <sliceable>
    86b4:	2800      	cmp	r0, #0
    86b6:	d0e3      	beq.n	8680 <z_time_slice+0x4c>
		if (!z_is_thread_prevented_from_running(curr)) {
    86b8:	7b63      	ldrb	r3, [r4, #13]
    86ba:	06db      	lsls	r3, r3, #27
    86bc:	d102      	bne.n	86c4 <z_time_slice+0x90>
			move_thread_to_end_of_prio_q(curr);
    86be:	4620      	mov	r0, r4
    86c0:	f7ff ff66 	bl	8590 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    86c4:	4620      	mov	r0, r4
    86c6:	e7d9      	b.n	867c <z_time_slice+0x48>
	__asm__ volatile(
    86c8:	f385 8811 	msr	BASEPRI, r5
    86cc:	f3bf 8f6f 	isb	sy
}
    86d0:	bd38      	pop	{r3, r4, r5, pc}
    86d2:	bf00      	nop
    86d4:	20000b90 	.word	0x20000b90
    86d8:	0000b7ed 	.word	0x0000b7ed
    86dc:	0000b846 	.word	0x0000b846
    86e0:	0000b53f 	.word	0x0000b53f
    86e4:	0000b85b 	.word	0x0000b85b
    86e8:	20000b58 	.word	0x20000b58
    86ec:	20000b84 	.word	0x20000b84
    86f0:	0000b81a 	.word	0x0000b81a
    86f4:	0000b831 	.word	0x0000b831
    86f8:	200011a6 	.word	0x200011a6

000086fc <unready_thread>:
{
    86fc:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    86fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
    8702:	7b43      	ldrb	r3, [r0, #13]
    8704:	2a00      	cmp	r2, #0
{
    8706:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    8708:	da06      	bge.n	8718 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    870a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    870e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8710:	4601      	mov	r1, r0
    8712:	4806      	ldr	r0, [pc, #24]	; (872c <unready_thread+0x30>)
    8714:	f7ff ff1c 	bl	8550 <z_priq_dumb_remove>
	update_cache(thread == _current);
    8718:	4b05      	ldr	r3, [pc, #20]	; (8730 <unready_thread+0x34>)
    871a:	6898      	ldr	r0, [r3, #8]
    871c:	1b03      	subs	r3, r0, r4
    871e:	4258      	negs	r0, r3
}
    8720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    8724:	4158      	adcs	r0, r3
    8726:	f7ff bc93 	b.w	8050 <update_cache>
    872a:	bf00      	nop
    872c:	20000b74 	.word	0x20000b74
    8730:	20000b58 	.word	0x20000b58

00008734 <add_to_waitq_locked>:
{
    8734:	b538      	push	{r3, r4, r5, lr}
    8736:	4604      	mov	r4, r0
    8738:	460d      	mov	r5, r1
	unready_thread(thread);
    873a:	f7ff ffdf 	bl	86fc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    873e:	7b63      	ldrb	r3, [r4, #13]
    8740:	f043 0302 	orr.w	r3, r3, #2
    8744:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    8746:	b34d      	cbz	r5, 879c <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8748:	4b15      	ldr	r3, [pc, #84]	; (87a0 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
    874a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    874c:	429c      	cmp	r4, r3
    874e:	d109      	bne.n	8764 <add_to_waitq_locked+0x30>
    8750:	4914      	ldr	r1, [pc, #80]	; (87a4 <add_to_waitq_locked+0x70>)
    8752:	4815      	ldr	r0, [pc, #84]	; (87a8 <add_to_waitq_locked+0x74>)
    8754:	4a15      	ldr	r2, [pc, #84]	; (87ac <add_to_waitq_locked+0x78>)
    8756:	23bc      	movs	r3, #188	; 0xbc
    8758:	f001 feb5 	bl	a4c6 <assert_print>
    875c:	4813      	ldr	r0, [pc, #76]	; (87ac <add_to_waitq_locked+0x78>)
    875e:	21bc      	movs	r1, #188	; 0xbc
    8760:	f001 feaa 	bl	a4b8 <assert_post_action>
	return list->head == list;
    8764:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8766:	429d      	cmp	r5, r3
    8768:	d109      	bne.n	877e <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
    876a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    876c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    8770:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8772:	606c      	str	r4, [r5, #4]
}
    8774:	e012      	b.n	879c <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
    8776:	686a      	ldr	r2, [r5, #4]
    8778:	4293      	cmp	r3, r2
    877a:	d0f6      	beq.n	876a <add_to_waitq_locked+0x36>
    877c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    877e:	2b00      	cmp	r3, #0
    8780:	d0f3      	beq.n	876a <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
    8782:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8786:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    878a:	428a      	cmp	r2, r1
    878c:	d0f3      	beq.n	8776 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
    878e:	4291      	cmp	r1, r2
    8790:	ddf1      	ble.n	8776 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
    8792:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8794:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8798:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    879a:	605c      	str	r4, [r3, #4]
}
    879c:	bd38      	pop	{r3, r4, r5, pc}
    879e:	bf00      	nop
    87a0:	20000268 	.word	0x20000268
    87a4:	0000d25b 	.word	0x0000d25b
    87a8:	0000b53f 	.word	0x0000b53f
    87ac:	0000d079 	.word	0x0000d079

000087b0 <pend_locked>:
{
    87b0:	b570      	push	{r4, r5, r6, lr}
    87b2:	4615      	mov	r5, r2
    87b4:	461c      	mov	r4, r3
    87b6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    87b8:	f7ff ffbc 	bl	8734 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    87bc:	f1b4 3fff 	cmp.w	r4, #4294967295
    87c0:	bf08      	it	eq
    87c2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    87c6:	d008      	beq.n	87da <pend_locked+0x2a>
    87c8:	462a      	mov	r2, r5
    87ca:	4623      	mov	r3, r4
    87cc:	f106 0018 	add.w	r0, r6, #24
    87d0:	4902      	ldr	r1, [pc, #8]	; (87dc <pend_locked+0x2c>)
}
    87d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    87d6:	f000 bde7 	b.w	93a8 <z_add_timeout>
    87da:	bd70      	pop	{r4, r5, r6, pc}
    87dc:	0000acd1 	.word	0x0000acd1

000087e0 <z_pend_curr>:
{
    87e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
    87e4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 88a0 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
    87e8:	4c2e      	ldr	r4, [pc, #184]	; (88a4 <z_pend_curr+0xc4>)
	pending_current = _current;
    87ea:	4b2f      	ldr	r3, [pc, #188]	; (88a8 <z_pend_curr+0xc8>)
{
    87ec:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
    87ee:	42a0      	cmp	r0, r4
	pending_current = _current;
    87f0:	f8da 2008 	ldr.w	r2, [sl, #8]
    87f4:	601a      	str	r2, [r3, #0]
{
    87f6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    87fa:	4605      	mov	r5, r0
    87fc:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
    87fe:	d10b      	bne.n	8818 <z_pend_curr+0x38>
    8800:	492a      	ldr	r1, [pc, #168]	; (88ac <z_pend_curr+0xcc>)
    8802:	482b      	ldr	r0, [pc, #172]	; (88b0 <z_pend_curr+0xd0>)
    8804:	4a2b      	ldr	r2, [pc, #172]	; (88b4 <z_pend_curr+0xd4>)
    8806:	f240 3356 	movw	r3, #854	; 0x356
    880a:	f001 fe5c 	bl	a4c6 <assert_print>
    880e:	4829      	ldr	r0, [pc, #164]	; (88b4 <z_pend_curr+0xd4>)
    8810:	f240 3156 	movw	r1, #854	; 0x356
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8814:	f001 fe50 	bl	a4b8 <assert_post_action>
	__asm__ volatile(
    8818:	f04f 0220 	mov.w	r2, #32
    881c:	f3ef 8311 	mrs	r3, BASEPRI
    8820:	f382 8812 	msr	BASEPRI_MAX, r2
    8824:	f3bf 8f6f 	isb	sy
    8828:	4620      	mov	r0, r4
    882a:	f7ff f927 	bl	7a7c <z_spin_lock_valid>
    882e:	b960      	cbnz	r0, 884a <z_pend_curr+0x6a>
    8830:	4a21      	ldr	r2, [pc, #132]	; (88b8 <z_pend_curr+0xd8>)
    8832:	4922      	ldr	r1, [pc, #136]	; (88bc <z_pend_curr+0xdc>)
    8834:	481e      	ldr	r0, [pc, #120]	; (88b0 <z_pend_curr+0xd0>)
    8836:	2394      	movs	r3, #148	; 0x94
    8838:	f001 fe45 	bl	a4c6 <assert_print>
    883c:	4621      	mov	r1, r4
    883e:	4820      	ldr	r0, [pc, #128]	; (88c0 <z_pend_curr+0xe0>)
    8840:	f001 fe41 	bl	a4c6 <assert_print>
    8844:	2194      	movs	r1, #148	; 0x94
    8846:	481c      	ldr	r0, [pc, #112]	; (88b8 <z_pend_curr+0xd8>)
    8848:	e7e4      	b.n	8814 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
    884a:	4620      	mov	r0, r4
    884c:	f7ff f934 	bl	7ab8 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
    8850:	f8da 0008 	ldr.w	r0, [sl, #8]
    8854:	4642      	mov	r2, r8
    8856:	464b      	mov	r3, r9
    8858:	4639      	mov	r1, r7
    885a:	f7ff ffa9 	bl	87b0 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    885e:	4628      	mov	r0, r5
    8860:	f7ff f91a 	bl	7a98 <z_spin_unlock_valid>
    8864:	b958      	cbnz	r0, 887e <z_pend_curr+0x9e>
    8866:	4917      	ldr	r1, [pc, #92]	; (88c4 <z_pend_curr+0xe4>)
    8868:	4a13      	ldr	r2, [pc, #76]	; (88b8 <z_pend_curr+0xd8>)
    886a:	4811      	ldr	r0, [pc, #68]	; (88b0 <z_pend_curr+0xd0>)
    886c:	23e1      	movs	r3, #225	; 0xe1
    886e:	f001 fe2a 	bl	a4c6 <assert_print>
    8872:	4629      	mov	r1, r5
    8874:	4814      	ldr	r0, [pc, #80]	; (88c8 <z_pend_curr+0xe8>)
    8876:	f001 fe26 	bl	a4c6 <assert_print>
    887a:	21e1      	movs	r1, #225	; 0xe1
    887c:	e7e3      	b.n	8846 <z_pend_curr+0x66>
    887e:	4620      	mov	r0, r4
    8880:	f7ff f90a 	bl	7a98 <z_spin_unlock_valid>
    8884:	b938      	cbnz	r0, 8896 <z_pend_curr+0xb6>
    8886:	490f      	ldr	r1, [pc, #60]	; (88c4 <z_pend_curr+0xe4>)
    8888:	4a0b      	ldr	r2, [pc, #44]	; (88b8 <z_pend_curr+0xd8>)
    888a:	4809      	ldr	r0, [pc, #36]	; (88b0 <z_pend_curr+0xd0>)
    888c:	23e1      	movs	r3, #225	; 0xe1
    888e:	f001 fe1a 	bl	a4c6 <assert_print>
    8892:	4621      	mov	r1, r4
    8894:	e7ee      	b.n	8874 <z_pend_curr+0x94>
    8896:	4630      	mov	r0, r6
}
    8898:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    889c:	f7fa beaa 	b.w	35f4 <arch_swap>
    88a0:	20000b58 	.word	0x20000b58
    88a4:	20000b90 	.word	0x20000b90
    88a8:	20000b84 	.word	0x20000b84
    88ac:	0000d309 	.word	0x0000d309
    88b0:	0000b53f 	.word	0x0000b53f
    88b4:	0000d079 	.word	0x0000d079
    88b8:	0000b7ed 	.word	0x0000b7ed
    88bc:	0000b846 	.word	0x0000b846
    88c0:	0000b85b 	.word	0x0000b85b
    88c4:	0000b81a 	.word	0x0000b81a
    88c8:	0000b831 	.word	0x0000b831

000088cc <z_set_prio>:
{
    88cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    88d0:	4604      	mov	r4, r0
    88d2:	460e      	mov	r6, r1
    88d4:	f04f 0320 	mov.w	r3, #32
    88d8:	f3ef 8911 	mrs	r9, BASEPRI
    88dc:	f383 8812 	msr	BASEPRI_MAX, r3
    88e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    88e4:	4837      	ldr	r0, [pc, #220]	; (89c4 <z_set_prio+0xf8>)
    88e6:	f7ff f8c9 	bl	7a7c <z_spin_lock_valid>
    88ea:	4607      	mov	r7, r0
    88ec:	b960      	cbnz	r0, 8908 <z_set_prio+0x3c>
    88ee:	4a36      	ldr	r2, [pc, #216]	; (89c8 <z_set_prio+0xfc>)
    88f0:	4936      	ldr	r1, [pc, #216]	; (89cc <z_set_prio+0x100>)
    88f2:	4837      	ldr	r0, [pc, #220]	; (89d0 <z_set_prio+0x104>)
    88f4:	2394      	movs	r3, #148	; 0x94
    88f6:	f001 fde6 	bl	a4c6 <assert_print>
    88fa:	4932      	ldr	r1, [pc, #200]	; (89c4 <z_set_prio+0xf8>)
    88fc:	4835      	ldr	r0, [pc, #212]	; (89d4 <z_set_prio+0x108>)
    88fe:	f001 fde2 	bl	a4c6 <assert_print>
    8902:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8904:	4830      	ldr	r0, [pc, #192]	; (89c8 <z_set_prio+0xfc>)
    8906:	e021      	b.n	894c <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
    8908:	482e      	ldr	r0, [pc, #184]	; (89c4 <z_set_prio+0xf8>)
    890a:	f7ff f8d5 	bl	7ab8 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    890e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8910:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    8912:	b276      	sxtb	r6, r6
    8914:	d11c      	bne.n	8950 <z_set_prio+0x84>
	return node->next != NULL;
    8916:	69a5      	ldr	r5, [r4, #24]
    8918:	b9d5      	cbnz	r5, 8950 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
    891a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 89d8 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    891e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8922:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8924:	4621      	mov	r1, r4
    8926:	4640      	mov	r0, r8
    8928:	f7ff fe12 	bl	8550 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    892c:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    892e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8930:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8934:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8936:	4b29      	ldr	r3, [pc, #164]	; (89dc <z_set_prio+0x110>)
    8938:	429c      	cmp	r4, r3
    893a:	d11b      	bne.n	8974 <z_set_prio+0xa8>
    893c:	4928      	ldr	r1, [pc, #160]	; (89e0 <z_set_prio+0x114>)
    893e:	4824      	ldr	r0, [pc, #144]	; (89d0 <z_set_prio+0x104>)
    8940:	4a28      	ldr	r2, [pc, #160]	; (89e4 <z_set_prio+0x118>)
    8942:	23bc      	movs	r3, #188	; 0xbc
    8944:	f001 fdbf 	bl	a4c6 <assert_print>
    8948:	4826      	ldr	r0, [pc, #152]	; (89e4 <z_set_prio+0x118>)
    894a:	21bc      	movs	r1, #188	; 0xbc
    894c:	f001 fdb4 	bl	a4b8 <assert_post_action>
			thread->base.prio = prio;
    8950:	73a6      	strb	r6, [r4, #14]
    8952:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8954:	481b      	ldr	r0, [pc, #108]	; (89c4 <z_set_prio+0xf8>)
    8956:	f7ff f89f 	bl	7a98 <z_spin_unlock_valid>
    895a:	bb58      	cbnz	r0, 89b4 <z_set_prio+0xe8>
    895c:	4a1a      	ldr	r2, [pc, #104]	; (89c8 <z_set_prio+0xfc>)
    895e:	4922      	ldr	r1, [pc, #136]	; (89e8 <z_set_prio+0x11c>)
    8960:	481b      	ldr	r0, [pc, #108]	; (89d0 <z_set_prio+0x104>)
    8962:	23c2      	movs	r3, #194	; 0xc2
    8964:	f001 fdaf 	bl	a4c6 <assert_print>
    8968:	4916      	ldr	r1, [pc, #88]	; (89c4 <z_set_prio+0xf8>)
    896a:	4820      	ldr	r0, [pc, #128]	; (89ec <z_set_prio+0x120>)
    896c:	f001 fdab 	bl	a4c6 <assert_print>
    8970:	21c2      	movs	r1, #194	; 0xc2
    8972:	e7c7      	b.n	8904 <z_set_prio+0x38>
	return list->head == list;
    8974:	4643      	mov	r3, r8
    8976:	f853 291c 	ldr.w	r2, [r3], #-28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    897a:	4542      	cmp	r2, r8
    897c:	bf18      	it	ne
    897e:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
    8980:	6a1a      	ldr	r2, [r3, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8982:	b925      	cbnz	r5, 898e <z_set_prio+0xc2>
	node->prev = tail;
    8984:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
    8988:	6014      	str	r4, [r2, #0]
	list->tail = node;
    898a:	621c      	str	r4, [r3, #32]
}
    898c:	e00a      	b.n	89a4 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
    898e:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
    8992:	428e      	cmp	r6, r1
    8994:	d00a      	beq.n	89ac <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8996:	42b1      	cmp	r1, r6
    8998:	dd08      	ble.n	89ac <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
    899a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    899c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    89a0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    89a2:	606c      	str	r4, [r5, #4]
			update_cache(1);
    89a4:	2001      	movs	r0, #1
    89a6:	f7ff fb53 	bl	8050 <update_cache>
    89aa:	e7d3      	b.n	8954 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
    89ac:	42aa      	cmp	r2, r5
    89ae:	d0e9      	beq.n	8984 <z_set_prio+0xb8>
    89b0:	682d      	ldr	r5, [r5, #0]
    89b2:	e7e6      	b.n	8982 <z_set_prio+0xb6>
	__asm__ volatile(
    89b4:	f389 8811 	msr	BASEPRI, r9
    89b8:	f3bf 8f6f 	isb	sy
}
    89bc:	4638      	mov	r0, r7
    89be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    89c2:	bf00      	nop
    89c4:	20000b90 	.word	0x20000b90
    89c8:	0000b7ed 	.word	0x0000b7ed
    89cc:	0000b846 	.word	0x0000b846
    89d0:	0000b53f 	.word	0x0000b53f
    89d4:	0000b85b 	.word	0x0000b85b
    89d8:	20000b74 	.word	0x20000b74
    89dc:	20000268 	.word	0x20000268
    89e0:	0000d25b 	.word	0x0000d25b
    89e4:	0000d079 	.word	0x0000d079
    89e8:	0000b81a 	.word	0x0000b81a
    89ec:	0000b831 	.word	0x0000b831

000089f0 <z_impl_k_thread_suspend>:
{
    89f0:	b570      	push	{r4, r5, r6, lr}
    89f2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    89f4:	3018      	adds	r0, #24
    89f6:	f000 fd97 	bl	9528 <z_abort_timeout>
	__asm__ volatile(
    89fa:	f04f 0320 	mov.w	r3, #32
    89fe:	f3ef 8611 	mrs	r6, BASEPRI
    8a02:	f383 8812 	msr	BASEPRI_MAX, r3
    8a06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a0a:	4824      	ldr	r0, [pc, #144]	; (8a9c <z_impl_k_thread_suspend+0xac>)
    8a0c:	f7ff f836 	bl	7a7c <z_spin_lock_valid>
    8a10:	b968      	cbnz	r0, 8a2e <z_impl_k_thread_suspend+0x3e>
    8a12:	4a23      	ldr	r2, [pc, #140]	; (8aa0 <z_impl_k_thread_suspend+0xb0>)
    8a14:	4923      	ldr	r1, [pc, #140]	; (8aa4 <z_impl_k_thread_suspend+0xb4>)
    8a16:	4824      	ldr	r0, [pc, #144]	; (8aa8 <z_impl_k_thread_suspend+0xb8>)
    8a18:	2394      	movs	r3, #148	; 0x94
    8a1a:	f001 fd54 	bl	a4c6 <assert_print>
    8a1e:	491f      	ldr	r1, [pc, #124]	; (8a9c <z_impl_k_thread_suspend+0xac>)
    8a20:	4822      	ldr	r0, [pc, #136]	; (8aac <z_impl_k_thread_suspend+0xbc>)
    8a22:	f001 fd50 	bl	a4c6 <assert_print>
    8a26:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a28:	481d      	ldr	r0, [pc, #116]	; (8aa0 <z_impl_k_thread_suspend+0xb0>)
    8a2a:	f001 fd45 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8a2e:	481b      	ldr	r0, [pc, #108]	; (8a9c <z_impl_k_thread_suspend+0xac>)
    8a30:	f7ff f842 	bl	7ab8 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    8a34:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    8a38:	7b63      	ldrb	r3, [r4, #13]
    8a3a:	2a00      	cmp	r2, #0
    8a3c:	da06      	bge.n	8a4c <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    8a42:	481b      	ldr	r0, [pc, #108]	; (8ab0 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8a44:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8a46:	4621      	mov	r1, r4
    8a48:	f7ff fd82 	bl	8550 <z_priq_dumb_remove>
		update_cache(thread == _current);
    8a4c:	4d19      	ldr	r5, [pc, #100]	; (8ab4 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8a4e:	7b63      	ldrb	r3, [r4, #13]
    8a50:	68a8      	ldr	r0, [r5, #8]
    8a52:	f043 0310 	orr.w	r3, r3, #16
    8a56:	7363      	strb	r3, [r4, #13]
    8a58:	1b03      	subs	r3, r0, r4
    8a5a:	4258      	negs	r0, r3
    8a5c:	4158      	adcs	r0, r3
    8a5e:	f7ff faf7 	bl	8050 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a62:	480e      	ldr	r0, [pc, #56]	; (8a9c <z_impl_k_thread_suspend+0xac>)
    8a64:	f7ff f818 	bl	7a98 <z_spin_unlock_valid>
    8a68:	b958      	cbnz	r0, 8a82 <z_impl_k_thread_suspend+0x92>
    8a6a:	4a0d      	ldr	r2, [pc, #52]	; (8aa0 <z_impl_k_thread_suspend+0xb0>)
    8a6c:	4912      	ldr	r1, [pc, #72]	; (8ab8 <z_impl_k_thread_suspend+0xc8>)
    8a6e:	480e      	ldr	r0, [pc, #56]	; (8aa8 <z_impl_k_thread_suspend+0xb8>)
    8a70:	23c2      	movs	r3, #194	; 0xc2
    8a72:	f001 fd28 	bl	a4c6 <assert_print>
    8a76:	4909      	ldr	r1, [pc, #36]	; (8a9c <z_impl_k_thread_suspend+0xac>)
    8a78:	4810      	ldr	r0, [pc, #64]	; (8abc <z_impl_k_thread_suspend+0xcc>)
    8a7a:	f001 fd24 	bl	a4c6 <assert_print>
    8a7e:	21c2      	movs	r1, #194	; 0xc2
    8a80:	e7d2      	b.n	8a28 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
    8a82:	f386 8811 	msr	BASEPRI, r6
    8a86:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    8a8a:	68ab      	ldr	r3, [r5, #8]
    8a8c:	42a3      	cmp	r3, r4
    8a8e:	d103      	bne.n	8a98 <z_impl_k_thread_suspend+0xa8>
}
    8a90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8a94:	f002 b912 	b.w	acbc <z_reschedule_unlocked>
}
    8a98:	bd70      	pop	{r4, r5, r6, pc}
    8a9a:	bf00      	nop
    8a9c:	20000b90 	.word	0x20000b90
    8aa0:	0000b7ed 	.word	0x0000b7ed
    8aa4:	0000b846 	.word	0x0000b846
    8aa8:	0000b53f 	.word	0x0000b53f
    8aac:	0000b85b 	.word	0x0000b85b
    8ab0:	20000b74 	.word	0x20000b74
    8ab4:	20000b58 	.word	0x20000b58
    8ab8:	0000b81a 	.word	0x0000b81a
    8abc:	0000b831 	.word	0x0000b831

00008ac0 <unpend_thread_no_timeout>:
{
    8ac0:	b510      	push	{r4, lr}
    8ac2:	4604      	mov	r4, r0
    8ac4:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
    8ac6:	b958      	cbnz	r0, 8ae0 <unpend_thread_no_timeout+0x20>
    8ac8:	490a      	ldr	r1, [pc, #40]	; (8af4 <unpend_thread_no_timeout+0x34>)
    8aca:	480b      	ldr	r0, [pc, #44]	; (8af8 <unpend_thread_no_timeout+0x38>)
    8acc:	4a0b      	ldr	r2, [pc, #44]	; (8afc <unpend_thread_no_timeout+0x3c>)
    8ace:	f240 23c9 	movw	r3, #713	; 0x2c9
    8ad2:	f001 fcf8 	bl	a4c6 <assert_print>
    8ad6:	4809      	ldr	r0, [pc, #36]	; (8afc <unpend_thread_no_timeout+0x3c>)
    8ad8:	f240 21c9 	movw	r1, #713	; 0x2c9
    8adc:	f001 fcec 	bl	a4b8 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8ae0:	4621      	mov	r1, r4
    8ae2:	f7ff fd35 	bl	8550 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8ae6:	7b63      	ldrb	r3, [r4, #13]
    8ae8:	f023 0302 	bic.w	r3, r3, #2
    8aec:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8aee:	2300      	movs	r3, #0
    8af0:	60a3      	str	r3, [r4, #8]
}
    8af2:	bd10      	pop	{r4, pc}
    8af4:	0000d340 	.word	0x0000d340
    8af8:	0000b53f 	.word	0x0000b53f
    8afc:	0000d079 	.word	0x0000d079

00008b00 <z_unpend_thread>:
{
    8b00:	b538      	push	{r3, r4, r5, lr}
    8b02:	4604      	mov	r4, r0
	__asm__ volatile(
    8b04:	f04f 0320 	mov.w	r3, #32
    8b08:	f3ef 8511 	mrs	r5, BASEPRI
    8b0c:	f383 8812 	msr	BASEPRI_MAX, r3
    8b10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b14:	4819      	ldr	r0, [pc, #100]	; (8b7c <z_unpend_thread+0x7c>)
    8b16:	f7fe ffb1 	bl	7a7c <z_spin_lock_valid>
    8b1a:	b968      	cbnz	r0, 8b38 <z_unpend_thread+0x38>
    8b1c:	4a18      	ldr	r2, [pc, #96]	; (8b80 <z_unpend_thread+0x80>)
    8b1e:	4919      	ldr	r1, [pc, #100]	; (8b84 <z_unpend_thread+0x84>)
    8b20:	4819      	ldr	r0, [pc, #100]	; (8b88 <z_unpend_thread+0x88>)
    8b22:	2394      	movs	r3, #148	; 0x94
    8b24:	f001 fccf 	bl	a4c6 <assert_print>
    8b28:	4914      	ldr	r1, [pc, #80]	; (8b7c <z_unpend_thread+0x7c>)
    8b2a:	4818      	ldr	r0, [pc, #96]	; (8b8c <z_unpend_thread+0x8c>)
    8b2c:	f001 fccb 	bl	a4c6 <assert_print>
    8b30:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8b32:	4813      	ldr	r0, [pc, #76]	; (8b80 <z_unpend_thread+0x80>)
    8b34:	f001 fcc0 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8b38:	4810      	ldr	r0, [pc, #64]	; (8b7c <z_unpend_thread+0x7c>)
    8b3a:	f7fe ffbd 	bl	7ab8 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
    8b3e:	68a3      	ldr	r3, [r4, #8]
    8b40:	b113      	cbz	r3, 8b48 <z_unpend_thread+0x48>
			unpend_thread_no_timeout(thread);
    8b42:	4620      	mov	r0, r4
    8b44:	f7ff ffbc 	bl	8ac0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8b48:	480c      	ldr	r0, [pc, #48]	; (8b7c <z_unpend_thread+0x7c>)
    8b4a:	f7fe ffa5 	bl	7a98 <z_spin_unlock_valid>
    8b4e:	b958      	cbnz	r0, 8b68 <z_unpend_thread+0x68>
    8b50:	4a0b      	ldr	r2, [pc, #44]	; (8b80 <z_unpend_thread+0x80>)
    8b52:	490f      	ldr	r1, [pc, #60]	; (8b90 <z_unpend_thread+0x90>)
    8b54:	480c      	ldr	r0, [pc, #48]	; (8b88 <z_unpend_thread+0x88>)
    8b56:	23c2      	movs	r3, #194	; 0xc2
    8b58:	f001 fcb5 	bl	a4c6 <assert_print>
    8b5c:	4907      	ldr	r1, [pc, #28]	; (8b7c <z_unpend_thread+0x7c>)
    8b5e:	480d      	ldr	r0, [pc, #52]	; (8b94 <z_unpend_thread+0x94>)
    8b60:	f001 fcb1 	bl	a4c6 <assert_print>
    8b64:	21c2      	movs	r1, #194	; 0xc2
    8b66:	e7e4      	b.n	8b32 <z_unpend_thread+0x32>
	__asm__ volatile(
    8b68:	f385 8811 	msr	BASEPRI, r5
    8b6c:	f3bf 8f6f 	isb	sy
    8b70:	f104 0018 	add.w	r0, r4, #24
}
    8b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8b78:	f000 bcd6 	b.w	9528 <z_abort_timeout>
    8b7c:	20000b90 	.word	0x20000b90
    8b80:	0000b7ed 	.word	0x0000b7ed
    8b84:	0000b846 	.word	0x0000b846
    8b88:	0000b53f 	.word	0x0000b53f
    8b8c:	0000b85b 	.word	0x0000b85b
    8b90:	0000b81a 	.word	0x0000b81a
    8b94:	0000b831 	.word	0x0000b831

00008b98 <z_sched_wake_thread>:
{
    8b98:	b570      	push	{r4, r5, r6, lr}
    8b9a:	4604      	mov	r4, r0
    8b9c:	460d      	mov	r5, r1
	__asm__ volatile(
    8b9e:	f04f 0320 	mov.w	r3, #32
    8ba2:	f3ef 8611 	mrs	r6, BASEPRI
    8ba6:	f383 8812 	msr	BASEPRI_MAX, r3
    8baa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8bae:	481f      	ldr	r0, [pc, #124]	; (8c2c <z_sched_wake_thread+0x94>)
    8bb0:	f7fe ff64 	bl	7a7c <z_spin_lock_valid>
    8bb4:	b968      	cbnz	r0, 8bd2 <z_sched_wake_thread+0x3a>
    8bb6:	4a1e      	ldr	r2, [pc, #120]	; (8c30 <z_sched_wake_thread+0x98>)
    8bb8:	491e      	ldr	r1, [pc, #120]	; (8c34 <z_sched_wake_thread+0x9c>)
    8bba:	481f      	ldr	r0, [pc, #124]	; (8c38 <z_sched_wake_thread+0xa0>)
    8bbc:	2394      	movs	r3, #148	; 0x94
    8bbe:	f001 fc82 	bl	a4c6 <assert_print>
    8bc2:	491a      	ldr	r1, [pc, #104]	; (8c2c <z_sched_wake_thread+0x94>)
    8bc4:	481d      	ldr	r0, [pc, #116]	; (8c3c <z_sched_wake_thread+0xa4>)
    8bc6:	f001 fc7e 	bl	a4c6 <assert_print>
    8bca:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8bcc:	4818      	ldr	r0, [pc, #96]	; (8c30 <z_sched_wake_thread+0x98>)
    8bce:	f001 fc73 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8bd2:	4816      	ldr	r0, [pc, #88]	; (8c2c <z_sched_wake_thread+0x94>)
    8bd4:	f7fe ff70 	bl	7ab8 <z_spin_lock_set_owner>
		if (!killed) {
    8bd8:	7b63      	ldrb	r3, [r4, #13]
    8bda:	f013 0f28 	tst.w	r3, #40	; 0x28
    8bde:	d10c      	bne.n	8bfa <z_sched_wake_thread+0x62>
			if (thread->base.pended_on != NULL) {
    8be0:	68a3      	ldr	r3, [r4, #8]
    8be2:	b113      	cbz	r3, 8bea <z_sched_wake_thread+0x52>
				unpend_thread_no_timeout(thread);
    8be4:	4620      	mov	r0, r4
    8be6:	f7ff ff6b 	bl	8ac0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8bea:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    8bec:	b9ad      	cbnz	r5, 8c1a <z_sched_wake_thread+0x82>
    8bee:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    8bf2:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    8bf4:	4620      	mov	r0, r4
    8bf6:	f7ff fa5f 	bl	80b8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8bfa:	480c      	ldr	r0, [pc, #48]	; (8c2c <z_sched_wake_thread+0x94>)
    8bfc:	f7fe ff4c 	bl	7a98 <z_spin_unlock_valid>
    8c00:	b970      	cbnz	r0, 8c20 <z_sched_wake_thread+0x88>
    8c02:	4a0b      	ldr	r2, [pc, #44]	; (8c30 <z_sched_wake_thread+0x98>)
    8c04:	490e      	ldr	r1, [pc, #56]	; (8c40 <z_sched_wake_thread+0xa8>)
    8c06:	480c      	ldr	r0, [pc, #48]	; (8c38 <z_sched_wake_thread+0xa0>)
    8c08:	23c2      	movs	r3, #194	; 0xc2
    8c0a:	f001 fc5c 	bl	a4c6 <assert_print>
    8c0e:	4907      	ldr	r1, [pc, #28]	; (8c2c <z_sched_wake_thread+0x94>)
    8c10:	480c      	ldr	r0, [pc, #48]	; (8c44 <z_sched_wake_thread+0xac>)
    8c12:	f001 fc58 	bl	a4c6 <assert_print>
    8c16:	21c2      	movs	r1, #194	; 0xc2
    8c18:	e7d8      	b.n	8bcc <z_sched_wake_thread+0x34>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8c1a:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    8c1e:	e7e8      	b.n	8bf2 <z_sched_wake_thread+0x5a>
	__asm__ volatile(
    8c20:	f386 8811 	msr	BASEPRI, r6
    8c24:	f3bf 8f6f 	isb	sy
}
    8c28:	bd70      	pop	{r4, r5, r6, pc}
    8c2a:	bf00      	nop
    8c2c:	20000b90 	.word	0x20000b90
    8c30:	0000b7ed 	.word	0x0000b7ed
    8c34:	0000b846 	.word	0x0000b846
    8c38:	0000b53f 	.word	0x0000b53f
    8c3c:	0000b85b 	.word	0x0000b85b
    8c40:	0000b81a 	.word	0x0000b81a
    8c44:	0000b831 	.word	0x0000b831

00008c48 <z_unpend1_no_timeout>:
{
    8c48:	b570      	push	{r4, r5, r6, lr}
    8c4a:	4605      	mov	r5, r0
	__asm__ volatile(
    8c4c:	f04f 0320 	mov.w	r3, #32
    8c50:	f3ef 8611 	mrs	r6, BASEPRI
    8c54:	f383 8812 	msr	BASEPRI_MAX, r3
    8c58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c5c:	4819      	ldr	r0, [pc, #100]	; (8cc4 <z_unpend1_no_timeout+0x7c>)
    8c5e:	f7fe ff0d 	bl	7a7c <z_spin_lock_valid>
    8c62:	b968      	cbnz	r0, 8c80 <z_unpend1_no_timeout+0x38>
    8c64:	4a18      	ldr	r2, [pc, #96]	; (8cc8 <z_unpend1_no_timeout+0x80>)
    8c66:	4919      	ldr	r1, [pc, #100]	; (8ccc <z_unpend1_no_timeout+0x84>)
    8c68:	4819      	ldr	r0, [pc, #100]	; (8cd0 <z_unpend1_no_timeout+0x88>)
    8c6a:	2394      	movs	r3, #148	; 0x94
    8c6c:	f001 fc2b 	bl	a4c6 <assert_print>
    8c70:	4914      	ldr	r1, [pc, #80]	; (8cc4 <z_unpend1_no_timeout+0x7c>)
    8c72:	4818      	ldr	r0, [pc, #96]	; (8cd4 <z_unpend1_no_timeout+0x8c>)
    8c74:	f001 fc27 	bl	a4c6 <assert_print>
    8c78:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c7a:	4813      	ldr	r0, [pc, #76]	; (8cc8 <z_unpend1_no_timeout+0x80>)
    8c7c:	f001 fc1c 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8c80:	4810      	ldr	r0, [pc, #64]	; (8cc4 <z_unpend1_no_timeout+0x7c>)
    8c82:	f7fe ff19 	bl	7ab8 <z_spin_lock_set_owner>
	return list->head == list;
    8c86:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c88:	42a5      	cmp	r5, r4
    8c8a:	d013      	beq.n	8cb4 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
    8c8c:	b114      	cbz	r4, 8c94 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    8c8e:	4620      	mov	r0, r4
    8c90:	f7ff ff16 	bl	8ac0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c94:	480b      	ldr	r0, [pc, #44]	; (8cc4 <z_unpend1_no_timeout+0x7c>)
    8c96:	f7fe feff 	bl	7a98 <z_spin_unlock_valid>
    8c9a:	b968      	cbnz	r0, 8cb8 <z_unpend1_no_timeout+0x70>
    8c9c:	4a0a      	ldr	r2, [pc, #40]	; (8cc8 <z_unpend1_no_timeout+0x80>)
    8c9e:	490e      	ldr	r1, [pc, #56]	; (8cd8 <z_unpend1_no_timeout+0x90>)
    8ca0:	480b      	ldr	r0, [pc, #44]	; (8cd0 <z_unpend1_no_timeout+0x88>)
    8ca2:	23c2      	movs	r3, #194	; 0xc2
    8ca4:	f001 fc0f 	bl	a4c6 <assert_print>
    8ca8:	4906      	ldr	r1, [pc, #24]	; (8cc4 <z_unpend1_no_timeout+0x7c>)
    8caa:	480c      	ldr	r0, [pc, #48]	; (8cdc <z_unpend1_no_timeout+0x94>)
    8cac:	f001 fc0b 	bl	a4c6 <assert_print>
    8cb0:	21c2      	movs	r1, #194	; 0xc2
    8cb2:	e7e2      	b.n	8c7a <z_unpend1_no_timeout+0x32>
    8cb4:	2400      	movs	r4, #0
    8cb6:	e7ed      	b.n	8c94 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
    8cb8:	f386 8811 	msr	BASEPRI, r6
    8cbc:	f3bf 8f6f 	isb	sy
}
    8cc0:	4620      	mov	r0, r4
    8cc2:	bd70      	pop	{r4, r5, r6, pc}
    8cc4:	20000b90 	.word	0x20000b90
    8cc8:	0000b7ed 	.word	0x0000b7ed
    8ccc:	0000b846 	.word	0x0000b846
    8cd0:	0000b53f 	.word	0x0000b53f
    8cd4:	0000b85b 	.word	0x0000b85b
    8cd8:	0000b81a 	.word	0x0000b81a
    8cdc:	0000b831 	.word	0x0000b831

00008ce0 <z_unpend_first_thread>:
{
    8ce0:	b570      	push	{r4, r5, r6, lr}
    8ce2:	4605      	mov	r5, r0
	__asm__ volatile(
    8ce4:	f04f 0320 	mov.w	r3, #32
    8ce8:	f3ef 8611 	mrs	r6, BASEPRI
    8cec:	f383 8812 	msr	BASEPRI_MAX, r3
    8cf0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8cf4:	481b      	ldr	r0, [pc, #108]	; (8d64 <z_unpend_first_thread+0x84>)
    8cf6:	f7fe fec1 	bl	7a7c <z_spin_lock_valid>
    8cfa:	b968      	cbnz	r0, 8d18 <z_unpend_first_thread+0x38>
    8cfc:	4a1a      	ldr	r2, [pc, #104]	; (8d68 <z_unpend_first_thread+0x88>)
    8cfe:	491b      	ldr	r1, [pc, #108]	; (8d6c <z_unpend_first_thread+0x8c>)
    8d00:	481b      	ldr	r0, [pc, #108]	; (8d70 <z_unpend_first_thread+0x90>)
    8d02:	2394      	movs	r3, #148	; 0x94
    8d04:	f001 fbdf 	bl	a4c6 <assert_print>
    8d08:	4916      	ldr	r1, [pc, #88]	; (8d64 <z_unpend_first_thread+0x84>)
    8d0a:	481a      	ldr	r0, [pc, #104]	; (8d74 <z_unpend_first_thread+0x94>)
    8d0c:	f001 fbdb 	bl	a4c6 <assert_print>
    8d10:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8d12:	4815      	ldr	r0, [pc, #84]	; (8d68 <z_unpend_first_thread+0x88>)
    8d14:	f001 fbd0 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8d18:	4812      	ldr	r0, [pc, #72]	; (8d64 <z_unpend_first_thread+0x84>)
    8d1a:	f7fe fecd 	bl	7ab8 <z_spin_lock_set_owner>
	return list->head == list;
    8d1e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8d20:	42a5      	cmp	r5, r4
    8d22:	d017      	beq.n	8d54 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
    8d24:	b134      	cbz	r4, 8d34 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    8d26:	4620      	mov	r0, r4
    8d28:	f7ff feca 	bl	8ac0 <unpend_thread_no_timeout>
    8d2c:	f104 0018 	add.w	r0, r4, #24
    8d30:	f000 fbfa 	bl	9528 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8d34:	480b      	ldr	r0, [pc, #44]	; (8d64 <z_unpend_first_thread+0x84>)
    8d36:	f7fe feaf 	bl	7a98 <z_spin_unlock_valid>
    8d3a:	b968      	cbnz	r0, 8d58 <z_unpend_first_thread+0x78>
    8d3c:	4a0a      	ldr	r2, [pc, #40]	; (8d68 <z_unpend_first_thread+0x88>)
    8d3e:	490e      	ldr	r1, [pc, #56]	; (8d78 <z_unpend_first_thread+0x98>)
    8d40:	480b      	ldr	r0, [pc, #44]	; (8d70 <z_unpend_first_thread+0x90>)
    8d42:	23c2      	movs	r3, #194	; 0xc2
    8d44:	f001 fbbf 	bl	a4c6 <assert_print>
    8d48:	4906      	ldr	r1, [pc, #24]	; (8d64 <z_unpend_first_thread+0x84>)
    8d4a:	480c      	ldr	r0, [pc, #48]	; (8d7c <z_unpend_first_thread+0x9c>)
    8d4c:	f001 fbbb 	bl	a4c6 <assert_print>
    8d50:	21c2      	movs	r1, #194	; 0xc2
    8d52:	e7de      	b.n	8d12 <z_unpend_first_thread+0x32>
    8d54:	2400      	movs	r4, #0
    8d56:	e7ed      	b.n	8d34 <z_unpend_first_thread+0x54>
	__asm__ volatile(
    8d58:	f386 8811 	msr	BASEPRI, r6
    8d5c:	f3bf 8f6f 	isb	sy
}
    8d60:	4620      	mov	r0, r4
    8d62:	bd70      	pop	{r4, r5, r6, pc}
    8d64:	20000b90 	.word	0x20000b90
    8d68:	0000b7ed 	.word	0x0000b7ed
    8d6c:	0000b846 	.word	0x0000b846
    8d70:	0000b53f 	.word	0x0000b53f
    8d74:	0000b85b 	.word	0x0000b85b
    8d78:	0000b81a 	.word	0x0000b81a
    8d7c:	0000b831 	.word	0x0000b831

00008d80 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    8d80:	4b02      	ldr	r3, [pc, #8]	; (8d8c <z_sched_init+0xc>)
    8d82:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    8d86:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    8d8a:	4770      	bx	lr
    8d8c:	20000b58 	.word	0x20000b58

00008d90 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    8d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d92:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8d96:	b16b      	cbz	r3, 8db4 <z_impl_k_yield+0x24>
    8d98:	493c      	ldr	r1, [pc, #240]	; (8e8c <z_impl_k_yield+0xfc>)
    8d9a:	4a3d      	ldr	r2, [pc, #244]	; (8e90 <z_impl_k_yield+0x100>)
    8d9c:	483d      	ldr	r0, [pc, #244]	; (8e94 <z_impl_k_yield+0x104>)
    8d9e:	f240 5371 	movw	r3, #1393	; 0x571
    8da2:	f001 fb90 	bl	a4c6 <assert_print>
    8da6:	483c      	ldr	r0, [pc, #240]	; (8e98 <z_impl_k_yield+0x108>)
    8da8:	f001 fb8d 	bl	a4c6 <assert_print>
    8dac:	f240 5171 	movw	r1, #1393	; 0x571
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8db0:	4837      	ldr	r0, [pc, #220]	; (8e90 <z_impl_k_yield+0x100>)
    8db2:	e017      	b.n	8de4 <z_impl_k_yield+0x54>
	__asm__ volatile(
    8db4:	f04f 0320 	mov.w	r3, #32
    8db8:	f3ef 8611 	mrs	r6, BASEPRI
    8dbc:	f383 8812 	msr	BASEPRI_MAX, r3
    8dc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8dc4:	4835      	ldr	r0, [pc, #212]	; (8e9c <z_impl_k_yield+0x10c>)
    8dc6:	f7fe fe59 	bl	7a7c <z_spin_lock_valid>
    8dca:	b968      	cbnz	r0, 8de8 <z_impl_k_yield+0x58>
    8dcc:	4a34      	ldr	r2, [pc, #208]	; (8ea0 <z_impl_k_yield+0x110>)
    8dce:	4935      	ldr	r1, [pc, #212]	; (8ea4 <z_impl_k_yield+0x114>)
    8dd0:	4830      	ldr	r0, [pc, #192]	; (8e94 <z_impl_k_yield+0x104>)
    8dd2:	2394      	movs	r3, #148	; 0x94
    8dd4:	f001 fb77 	bl	a4c6 <assert_print>
    8dd8:	4930      	ldr	r1, [pc, #192]	; (8e9c <z_impl_k_yield+0x10c>)
    8dda:	4833      	ldr	r0, [pc, #204]	; (8ea8 <z_impl_k_yield+0x118>)
    8ddc:	f001 fb73 	bl	a4c6 <assert_print>
    8de0:	2194      	movs	r1, #148	; 0x94
    8de2:	482f      	ldr	r0, [pc, #188]	; (8ea0 <z_impl_k_yield+0x110>)
    8de4:	f001 fb68 	bl	a4b8 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    8de8:	4c30      	ldr	r4, [pc, #192]	; (8eac <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
    8dea:	482c      	ldr	r0, [pc, #176]	; (8e9c <z_impl_k_yield+0x10c>)
    8dec:	f7fe fe64 	bl	7ab8 <z_spin_lock_set_owner>
    8df0:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8df2:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8df4:	f104 051c 	add.w	r5, r4, #28
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8dfc:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8dfe:	4628      	mov	r0, r5
    8e00:	f7ff fba6 	bl	8550 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    8e04:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    8e06:	7b5a      	ldrb	r2, [r3, #13]
    8e08:	f062 027f 	orn	r2, r2, #127	; 0x7f
    8e0c:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8e0e:	4a28      	ldr	r2, [pc, #160]	; (8eb0 <z_impl_k_yield+0x120>)
    8e10:	4293      	cmp	r3, r2
    8e12:	d107      	bne.n	8e24 <z_impl_k_yield+0x94>
    8e14:	4927      	ldr	r1, [pc, #156]	; (8eb4 <z_impl_k_yield+0x124>)
    8e16:	4a1e      	ldr	r2, [pc, #120]	; (8e90 <z_impl_k_yield+0x100>)
    8e18:	481e      	ldr	r0, [pc, #120]	; (8e94 <z_impl_k_yield+0x104>)
    8e1a:	23bc      	movs	r3, #188	; 0xbc
    8e1c:	f001 fb53 	bl	a4c6 <assert_print>
    8e20:	21bc      	movs	r1, #188	; 0xbc
    8e22:	e7c5      	b.n	8db0 <z_impl_k_yield+0x20>
	return list->head == list;
    8e24:	69e2      	ldr	r2, [r4, #28]
	return (node == list->tail) ? NULL : node->next;
    8e26:	6a21      	ldr	r1, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8e28:	42aa      	cmp	r2, r5
    8e2a:	bf08      	it	eq
    8e2c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8e2e:	b922      	cbnz	r2, 8e3a <z_impl_k_yield+0xaa>
	node->prev = tail;
    8e30:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
    8e34:	600b      	str	r3, [r1, #0]
	list->tail = node;
    8e36:	6223      	str	r3, [r4, #32]
}
    8e38:	e00c      	b.n	8e54 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
    8e3a:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    8e3e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    8e42:	42b8      	cmp	r0, r7
    8e44:	d019      	beq.n	8e7a <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8e46:	4287      	cmp	r7, r0
    8e48:	dd17      	ble.n	8e7a <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
    8e4a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    8e4c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    8e50:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    8e52:	6053      	str	r3, [r2, #4]
	update_cache(1);
    8e54:	2001      	movs	r0, #1
    8e56:	f7ff f8fb 	bl	8050 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8e5a:	4810      	ldr	r0, [pc, #64]	; (8e9c <z_impl_k_yield+0x10c>)
    8e5c:	f7fe fe1c 	bl	7a98 <z_spin_unlock_valid>
    8e60:	b978      	cbnz	r0, 8e82 <z_impl_k_yield+0xf2>
    8e62:	4a0f      	ldr	r2, [pc, #60]	; (8ea0 <z_impl_k_yield+0x110>)
    8e64:	4914      	ldr	r1, [pc, #80]	; (8eb8 <z_impl_k_yield+0x128>)
    8e66:	480b      	ldr	r0, [pc, #44]	; (8e94 <z_impl_k_yield+0x104>)
    8e68:	23e1      	movs	r3, #225	; 0xe1
    8e6a:	f001 fb2c 	bl	a4c6 <assert_print>
    8e6e:	490b      	ldr	r1, [pc, #44]	; (8e9c <z_impl_k_yield+0x10c>)
    8e70:	4812      	ldr	r0, [pc, #72]	; (8ebc <z_impl_k_yield+0x12c>)
    8e72:	f001 fb28 	bl	a4c6 <assert_print>
    8e76:	21e1      	movs	r1, #225	; 0xe1
    8e78:	e7b3      	b.n	8de2 <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
    8e7a:	428a      	cmp	r2, r1
    8e7c:	d0d8      	beq.n	8e30 <z_impl_k_yield+0xa0>
    8e7e:	6812      	ldr	r2, [r2, #0]
    8e80:	e7d5      	b.n	8e2e <z_impl_k_yield+0x9e>
    8e82:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    8e84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8e88:	f7fa bbb4 	b.w	35f4 <arch_swap>
    8e8c:	0000cefd 	.word	0x0000cefd
    8e90:	0000d079 	.word	0x0000d079
    8e94:	0000b53f 	.word	0x0000b53f
    8e98:	0000d076 	.word	0x0000d076
    8e9c:	20000b90 	.word	0x20000b90
    8ea0:	0000b7ed 	.word	0x0000b7ed
    8ea4:	0000b846 	.word	0x0000b846
    8ea8:	0000b85b 	.word	0x0000b85b
    8eac:	20000b58 	.word	0x20000b58
    8eb0:	20000268 	.word	0x20000268
    8eb4:	0000d25b 	.word	0x0000d25b
    8eb8:	0000b81a 	.word	0x0000b81a
    8ebc:	0000b831 	.word	0x0000b831

00008ec0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    8ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ec4:	4605      	mov	r5, r0
    8ec6:	460e      	mov	r6, r1
    8ec8:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    8ecc:	b16b      	cbz	r3, 8eea <z_tick_sleep+0x2a>
    8ece:	493f      	ldr	r1, [pc, #252]	; (8fcc <z_tick_sleep+0x10c>)
    8ed0:	4a3f      	ldr	r2, [pc, #252]	; (8fd0 <z_tick_sleep+0x110>)
    8ed2:	4840      	ldr	r0, [pc, #256]	; (8fd4 <z_tick_sleep+0x114>)
    8ed4:	f240 538d 	movw	r3, #1421	; 0x58d
    8ed8:	f001 faf5 	bl	a4c6 <assert_print>
    8edc:	483e      	ldr	r0, [pc, #248]	; (8fd8 <z_tick_sleep+0x118>)
    8ede:	f001 faf2 	bl	a4c6 <assert_print>
    8ee2:	f240 518d 	movw	r1, #1421	; 0x58d
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    8ee6:	483a      	ldr	r0, [pc, #232]	; (8fd0 <z_tick_sleep+0x110>)
    8ee8:	e025      	b.n	8f36 <z_tick_sleep+0x76>
	if (ticks == 0) {
    8eea:	ea50 0301 	orrs.w	r3, r0, r1
    8eee:	d103      	bne.n	8ef8 <z_tick_sleep+0x38>
	z_impl_k_yield();
    8ef0:	f7ff ff4e 	bl	8d90 <z_impl_k_yield>
		return 0;
    8ef4:	2000      	movs	r0, #0
    8ef6:	e066      	b.n	8fc6 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
    8ef8:	1c82      	adds	r2, r0, #2
    8efa:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    8efe:	db1c      	blt.n	8f3a <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8f00:	f001 feea 	bl	acd8 <sys_clock_tick_get_32>
    8f04:	1944      	adds	r4, r0, r5
    8f06:	f04f 0320 	mov.w	r3, #32
    8f0a:	f3ef 8811 	mrs	r8, BASEPRI
    8f0e:	f383 8812 	msr	BASEPRI_MAX, r3
    8f12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8f16:	4831      	ldr	r0, [pc, #196]	; (8fdc <z_tick_sleep+0x11c>)
    8f18:	f7fe fdb0 	bl	7a7c <z_spin_lock_valid>
    8f1c:	b988      	cbnz	r0, 8f42 <z_tick_sleep+0x82>
    8f1e:	4a30      	ldr	r2, [pc, #192]	; (8fe0 <z_tick_sleep+0x120>)
    8f20:	4930      	ldr	r1, [pc, #192]	; (8fe4 <z_tick_sleep+0x124>)
    8f22:	482c      	ldr	r0, [pc, #176]	; (8fd4 <z_tick_sleep+0x114>)
    8f24:	2394      	movs	r3, #148	; 0x94
    8f26:	f001 face 	bl	a4c6 <assert_print>
    8f2a:	492c      	ldr	r1, [pc, #176]	; (8fdc <z_tick_sleep+0x11c>)
    8f2c:	482e      	ldr	r0, [pc, #184]	; (8fe8 <z_tick_sleep+0x128>)
    8f2e:	f001 faca 	bl	a4c6 <assert_print>
    8f32:	2194      	movs	r1, #148	; 0x94
    8f34:	482a      	ldr	r0, [pc, #168]	; (8fe0 <z_tick_sleep+0x120>)
    8f36:	f001 fabf 	bl	a4b8 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    8f3a:	f06f 0401 	mvn.w	r4, #1
    8f3e:	1a24      	subs	r4, r4, r0
    8f40:	e7e1      	b.n	8f06 <z_tick_sleep+0x46>
	pending_current = _current;
    8f42:	4f2a      	ldr	r7, [pc, #168]	; (8fec <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
    8f44:	4825      	ldr	r0, [pc, #148]	; (8fdc <z_tick_sleep+0x11c>)
    8f46:	f7fe fdb7 	bl	7ab8 <z_spin_lock_set_owner>
    8f4a:	4b29      	ldr	r3, [pc, #164]	; (8ff0 <z_tick_sleep+0x130>)
    8f4c:	68b8      	ldr	r0, [r7, #8]
    8f4e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    8f50:	f7ff fbd4 	bl	86fc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8f54:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8f56:	4927      	ldr	r1, [pc, #156]	; (8ff4 <z_tick_sleep+0x134>)
    8f58:	462a      	mov	r2, r5
    8f5a:	4633      	mov	r3, r6
    8f5c:	3018      	adds	r0, #24
    8f5e:	f000 fa23 	bl	93a8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8f62:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f64:	481d      	ldr	r0, [pc, #116]	; (8fdc <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8f66:	7b53      	ldrb	r3, [r2, #13]
    8f68:	f043 0310 	orr.w	r3, r3, #16
    8f6c:	7353      	strb	r3, [r2, #13]
    8f6e:	f7fe fd93 	bl	7a98 <z_spin_unlock_valid>
    8f72:	b958      	cbnz	r0, 8f8c <z_tick_sleep+0xcc>
    8f74:	4a1a      	ldr	r2, [pc, #104]	; (8fe0 <z_tick_sleep+0x120>)
    8f76:	4920      	ldr	r1, [pc, #128]	; (8ff8 <z_tick_sleep+0x138>)
    8f78:	4816      	ldr	r0, [pc, #88]	; (8fd4 <z_tick_sleep+0x114>)
    8f7a:	23e1      	movs	r3, #225	; 0xe1
    8f7c:	f001 faa3 	bl	a4c6 <assert_print>
    8f80:	4916      	ldr	r1, [pc, #88]	; (8fdc <z_tick_sleep+0x11c>)
    8f82:	481e      	ldr	r0, [pc, #120]	; (8ffc <z_tick_sleep+0x13c>)
    8f84:	f001 fa9f 	bl	a4c6 <assert_print>
    8f88:	21e1      	movs	r1, #225	; 0xe1
    8f8a:	e7d3      	b.n	8f34 <z_tick_sleep+0x74>
    8f8c:	4640      	mov	r0, r8
    8f8e:	f7fa fb31 	bl	35f4 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    8f92:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    8f94:	7b5b      	ldrb	r3, [r3, #13]
    8f96:	06db      	lsls	r3, r3, #27
    8f98:	d50c      	bpl.n	8fb4 <z_tick_sleep+0xf4>
    8f9a:	4919      	ldr	r1, [pc, #100]	; (9000 <z_tick_sleep+0x140>)
    8f9c:	4a0c      	ldr	r2, [pc, #48]	; (8fd0 <z_tick_sleep+0x110>)
    8f9e:	480d      	ldr	r0, [pc, #52]	; (8fd4 <z_tick_sleep+0x114>)
    8fa0:	f240 53a9 	movw	r3, #1449	; 0x5a9
    8fa4:	f001 fa8f 	bl	a4c6 <assert_print>
    8fa8:	480b      	ldr	r0, [pc, #44]	; (8fd8 <z_tick_sleep+0x118>)
    8faa:	f001 fa8c 	bl	a4c6 <assert_print>
    8fae:	f240 51a9 	movw	r1, #1449	; 0x5a9
    8fb2:	e798      	b.n	8ee6 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8fb4:	f001 fe90 	bl	acd8 <sys_clock_tick_get_32>
    8fb8:	1a20      	subs	r0, r4, r0
    8fba:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8fbe:	2801      	cmp	r0, #1
    8fc0:	f173 0300 	sbcs.w	r3, r3, #0
    8fc4:	db96      	blt.n	8ef4 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
    8fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8fca:	bf00      	nop
    8fcc:	0000cefd 	.word	0x0000cefd
    8fd0:	0000d079 	.word	0x0000d079
    8fd4:	0000b53f 	.word	0x0000b53f
    8fd8:	0000d076 	.word	0x0000d076
    8fdc:	20000b90 	.word	0x20000b90
    8fe0:	0000b7ed 	.word	0x0000b7ed
    8fe4:	0000b846 	.word	0x0000b846
    8fe8:	0000b85b 	.word	0x0000b85b
    8fec:	20000b58 	.word	0x20000b58
    8ff0:	20000b84 	.word	0x20000b84
    8ff4:	0000acd1 	.word	0x0000acd1
    8ff8:	0000b81a 	.word	0x0000b81a
    8ffc:	0000b831 	.word	0x0000b831
    9000:	0000d357 	.word	0x0000d357

00009004 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    9004:	b508      	push	{r3, lr}
    9006:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    900a:	b173      	cbz	r3, 902a <z_impl_k_sleep+0x26>
    900c:	4912      	ldr	r1, [pc, #72]	; (9058 <z_impl_k_sleep+0x54>)
    900e:	4a13      	ldr	r2, [pc, #76]	; (905c <z_impl_k_sleep+0x58>)
    9010:	4813      	ldr	r0, [pc, #76]	; (9060 <z_impl_k_sleep+0x5c>)
    9012:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
    9016:	f001 fa56 	bl	a4c6 <assert_print>
    901a:	4812      	ldr	r0, [pc, #72]	; (9064 <z_impl_k_sleep+0x60>)
    901c:	f001 fa53 	bl	a4c6 <assert_print>
    9020:	480e      	ldr	r0, [pc, #56]	; (905c <z_impl_k_sleep+0x58>)
    9022:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    9026:	f001 fa47 	bl	a4b8 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    902a:	f1b1 3fff 	cmp.w	r1, #4294967295
    902e:	bf08      	it	eq
    9030:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    9034:	d106      	bne.n	9044 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
    9036:	4b0c      	ldr	r3, [pc, #48]	; (9068 <z_impl_k_sleep+0x64>)
    9038:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    903a:	f7ff fcd9 	bl	89f0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    903e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    9042:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    9044:	f7ff ff3c 	bl	8ec0 <z_tick_sleep>
    9048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    904c:	fb80 0303 	smull	r0, r3, r0, r3
    9050:	0bc0      	lsrs	r0, r0, #15
    9052:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    9056:	e7f4      	b.n	9042 <z_impl_k_sleep+0x3e>
    9058:	0000cefd 	.word	0x0000cefd
    905c:	0000d079 	.word	0x0000d079
    9060:	0000b53f 	.word	0x0000b53f
    9064:	0000d076 	.word	0x0000d076
    9068:	20000b58 	.word	0x20000b58

0000906c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    906c:	4b01      	ldr	r3, [pc, #4]	; (9074 <z_impl_z_current_get+0x8>)
    906e:	6898      	ldr	r0, [r3, #8]
    9070:	4770      	bx	lr
    9072:	bf00      	nop
    9074:	20000b58 	.word	0x20000b58

00009078 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    9078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    907c:	4604      	mov	r4, r0
    907e:	f04f 0320 	mov.w	r3, #32
    9082:	f3ef 8611 	mrs	r6, BASEPRI
    9086:	f383 8812 	msr	BASEPRI_MAX, r3
    908a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    908e:	4851      	ldr	r0, [pc, #324]	; (91d4 <z_thread_abort+0x15c>)
    9090:	f7fe fcf4 	bl	7a7c <z_spin_lock_valid>
    9094:	b968      	cbnz	r0, 90b2 <z_thread_abort+0x3a>
    9096:	4a50      	ldr	r2, [pc, #320]	; (91d8 <z_thread_abort+0x160>)
    9098:	4950      	ldr	r1, [pc, #320]	; (91dc <z_thread_abort+0x164>)
    909a:	4851      	ldr	r0, [pc, #324]	; (91e0 <z_thread_abort+0x168>)
    909c:	2394      	movs	r3, #148	; 0x94
    909e:	f001 fa12 	bl	a4c6 <assert_print>
    90a2:	494c      	ldr	r1, [pc, #304]	; (91d4 <z_thread_abort+0x15c>)
    90a4:	484f      	ldr	r0, [pc, #316]	; (91e4 <z_thread_abort+0x16c>)
    90a6:	f001 fa0e 	bl	a4c6 <assert_print>
    90aa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    90ac:	484a      	ldr	r0, [pc, #296]	; (91d8 <z_thread_abort+0x160>)
    90ae:	f001 fa03 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    90b2:	4848      	ldr	r0, [pc, #288]	; (91d4 <z_thread_abort+0x15c>)
    90b4:	f7fe fd00 	bl	7ab8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    90b8:	7b23      	ldrb	r3, [r4, #12]
    90ba:	07d9      	lsls	r1, r3, #31
    90bc:	d522      	bpl.n	9104 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    90be:	4845      	ldr	r0, [pc, #276]	; (91d4 <z_thread_abort+0x15c>)
    90c0:	f7fe fcea 	bl	7a98 <z_spin_unlock_valid>
    90c4:	b958      	cbnz	r0, 90de <z_thread_abort+0x66>
    90c6:	4a44      	ldr	r2, [pc, #272]	; (91d8 <z_thread_abort+0x160>)
    90c8:	4947      	ldr	r1, [pc, #284]	; (91e8 <z_thread_abort+0x170>)
    90ca:	4845      	ldr	r0, [pc, #276]	; (91e0 <z_thread_abort+0x168>)
    90cc:	23c2      	movs	r3, #194	; 0xc2
    90ce:	f001 f9fa 	bl	a4c6 <assert_print>
    90d2:	4940      	ldr	r1, [pc, #256]	; (91d4 <z_thread_abort+0x15c>)
    90d4:	4845      	ldr	r0, [pc, #276]	; (91ec <z_thread_abort+0x174>)
    90d6:	f001 f9f6 	bl	a4c6 <assert_print>
    90da:	21c2      	movs	r1, #194	; 0xc2
    90dc:	e7e6      	b.n	90ac <z_thread_abort+0x34>
	__asm__ volatile(
    90de:	f386 8811 	msr	BASEPRI, r6
    90e2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
    90e6:	4a42      	ldr	r2, [pc, #264]	; (91f0 <z_thread_abort+0x178>)
    90e8:	4942      	ldr	r1, [pc, #264]	; (91f4 <z_thread_abort+0x17c>)
    90ea:	483d      	ldr	r0, [pc, #244]	; (91e0 <z_thread_abort+0x168>)
    90ec:	f240 63ca 	movw	r3, #1738	; 0x6ca
    90f0:	f001 f9e9 	bl	a4c6 <assert_print>
    90f4:	4621      	mov	r1, r4
    90f6:	4840      	ldr	r0, [pc, #256]	; (91f8 <z_thread_abort+0x180>)
    90f8:	f001 f9e5 	bl	a4c6 <assert_print>
    90fc:	f240 61ca 	movw	r1, #1738	; 0x6ca
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
    9100:	483b      	ldr	r0, [pc, #236]	; (91f0 <z_thread_abort+0x178>)
    9102:	e7d4      	b.n	90ae <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    9104:	7b63      	ldrb	r3, [r4, #13]
    9106:	071a      	lsls	r2, r3, #28
    9108:	d50a      	bpl.n	9120 <z_thread_abort+0xa8>
    910a:	4832      	ldr	r0, [pc, #200]	; (91d4 <z_thread_abort+0x15c>)
    910c:	f7fe fcc4 	bl	7a98 <z_spin_unlock_valid>
    9110:	2800      	cmp	r0, #0
    9112:	d0d8      	beq.n	90c6 <z_thread_abort+0x4e>
    9114:	f386 8811 	msr	BASEPRI, r6
    9118:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
    911c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    9120:	f023 0220 	bic.w	r2, r3, #32
    9124:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    9128:	09d2      	lsrs	r2, r2, #7
    912a:	d12c      	bne.n	9186 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    912c:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    912e:	68a3      	ldr	r3, [r4, #8]
    9130:	b113      	cbz	r3, 9138 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
    9132:	4620      	mov	r0, r4
    9134:	f7ff fcc4 	bl	8ac0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    9138:	f104 0018 	add.w	r0, r4, #24
    913c:	f000 f9f4 	bl	9528 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    9140:	f104 0758 	add.w	r7, r4, #88	; 0x58
    9144:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    9148:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    914a:	42bd      	cmp	r5, r7
    914c:	d000      	beq.n	9150 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    914e:	bb25      	cbnz	r5, 919a <z_thread_abort+0x122>
		update_cache(1);
    9150:	2001      	movs	r0, #1
    9152:	f7fe ff7d 	bl	8050 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    9156:	4b29      	ldr	r3, [pc, #164]	; (91fc <z_thread_abort+0x184>)
    9158:	689b      	ldr	r3, [r3, #8]
    915a:	42a3      	cmp	r3, r4
    915c:	d1d5      	bne.n	910a <z_thread_abort+0x92>
    915e:	f3ef 8305 	mrs	r3, IPSR
    9162:	2b00      	cmp	r3, #0
    9164:	d1d1      	bne.n	910a <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9166:	481b      	ldr	r0, [pc, #108]	; (91d4 <z_thread_abort+0x15c>)
    9168:	f7fe fc96 	bl	7a98 <z_spin_unlock_valid>
    916c:	bb10      	cbnz	r0, 91b4 <z_thread_abort+0x13c>
    916e:	4a1a      	ldr	r2, [pc, #104]	; (91d8 <z_thread_abort+0x160>)
    9170:	491d      	ldr	r1, [pc, #116]	; (91e8 <z_thread_abort+0x170>)
    9172:	481b      	ldr	r0, [pc, #108]	; (91e0 <z_thread_abort+0x168>)
    9174:	23e1      	movs	r3, #225	; 0xe1
    9176:	f001 f9a6 	bl	a4c6 <assert_print>
    917a:	4916      	ldr	r1, [pc, #88]	; (91d4 <z_thread_abort+0x15c>)
    917c:	481b      	ldr	r0, [pc, #108]	; (91ec <z_thread_abort+0x174>)
    917e:	f001 f9a2 	bl	a4c6 <assert_print>
    9182:	21e1      	movs	r1, #225	; 0xe1
    9184:	e792      	b.n	90ac <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9186:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    918a:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    918e:	481c      	ldr	r0, [pc, #112]	; (9200 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9190:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9192:	4621      	mov	r1, r4
    9194:	f7ff f9dc 	bl	8550 <z_priq_dumb_remove>
}
    9198:	e7c9      	b.n	912e <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
    919a:	4628      	mov	r0, r5
    919c:	f7ff fc90 	bl	8ac0 <unpend_thread_no_timeout>
    91a0:	f105 0018 	add.w	r0, r5, #24
    91a4:	f000 f9c0 	bl	9528 <z_abort_timeout>
    91a8:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    91ac:	4628      	mov	r0, r5
    91ae:	f7fe ff83 	bl	80b8 <ready_thread>
    91b2:	e7c9      	b.n	9148 <z_thread_abort+0xd0>
    91b4:	4630      	mov	r0, r6
    91b6:	f7fa fa1d 	bl	35f4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    91ba:	490e      	ldr	r1, [pc, #56]	; (91f4 <z_thread_abort+0x17c>)
    91bc:	4a0c      	ldr	r2, [pc, #48]	; (91f0 <z_thread_abort+0x178>)
    91be:	4808      	ldr	r0, [pc, #32]	; (91e0 <z_thread_abort+0x168>)
    91c0:	f240 63f9 	movw	r3, #1785	; 0x6f9
    91c4:	f001 f97f 	bl	a4c6 <assert_print>
    91c8:	480e      	ldr	r0, [pc, #56]	; (9204 <z_thread_abort+0x18c>)
    91ca:	f001 f97c 	bl	a4c6 <assert_print>
    91ce:	f240 61f9 	movw	r1, #1785	; 0x6f9
    91d2:	e795      	b.n	9100 <z_thread_abort+0x88>
    91d4:	20000b90 	.word	0x20000b90
    91d8:	0000b7ed 	.word	0x0000b7ed
    91dc:	0000b846 	.word	0x0000b846
    91e0:	0000b53f 	.word	0x0000b53f
    91e4:	0000b85b 	.word	0x0000b85b
    91e8:	0000b81a 	.word	0x0000b81a
    91ec:	0000b831 	.word	0x0000b831
    91f0:	0000d079 	.word	0x0000d079
    91f4:	0000c9f6 	.word	0x0000c9f6
    91f8:	0000d397 	.word	0x0000d397
    91fc:	20000b58 	.word	0x20000b58
    9200:	20000b74 	.word	0x20000b74
    9204:	0000d3b6 	.word	0x0000d3b6

00009208 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    9208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    920c:	4606      	mov	r6, r0
    920e:	4688      	mov	r8, r1
    9210:	4617      	mov	r7, r2
	__asm__ volatile(
    9212:	f04f 0320 	mov.w	r3, #32
    9216:	f3ef 8911 	mrs	r9, BASEPRI
    921a:	f383 8812 	msr	BASEPRI_MAX, r3
    921e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9222:	4821      	ldr	r0, [pc, #132]	; (92a8 <z_sched_wake+0xa0>)
    9224:	f7fe fc2a 	bl	7a7c <z_spin_lock_valid>
    9228:	4605      	mov	r5, r0
    922a:	b968      	cbnz	r0, 9248 <z_sched_wake+0x40>
    922c:	4a1f      	ldr	r2, [pc, #124]	; (92ac <z_sched_wake+0xa4>)
    922e:	4920      	ldr	r1, [pc, #128]	; (92b0 <z_sched_wake+0xa8>)
    9230:	4820      	ldr	r0, [pc, #128]	; (92b4 <z_sched_wake+0xac>)
    9232:	2394      	movs	r3, #148	; 0x94
    9234:	f001 f947 	bl	a4c6 <assert_print>
    9238:	491b      	ldr	r1, [pc, #108]	; (92a8 <z_sched_wake+0xa0>)
    923a:	481f      	ldr	r0, [pc, #124]	; (92b8 <z_sched_wake+0xb0>)
    923c:	f001 f943 	bl	a4c6 <assert_print>
    9240:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9242:	481a      	ldr	r0, [pc, #104]	; (92ac <z_sched_wake+0xa4>)
    9244:	f001 f938 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    9248:	4817      	ldr	r0, [pc, #92]	; (92a8 <z_sched_wake+0xa0>)
    924a:	f7fe fc35 	bl	7ab8 <z_spin_lock_set_owner>
	return list->head == list;
    924e:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9250:	42a6      	cmp	r6, r4
    9252:	d01d      	beq.n	9290 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
    9254:	b1f4      	cbz	r4, 9294 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
    9256:	4620      	mov	r0, r4
    9258:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
    925c:	6167      	str	r7, [r4, #20]
    925e:	f7ff fc2f 	bl	8ac0 <unpend_thread_no_timeout>
    9262:	f104 0018 	add.w	r0, r4, #24
    9266:	f000 f95f 	bl	9528 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    926a:	4620      	mov	r0, r4
    926c:	f7fe ff24 	bl	80b8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9270:	480d      	ldr	r0, [pc, #52]	; (92a8 <z_sched_wake+0xa0>)
    9272:	f7fe fc11 	bl	7a98 <z_spin_unlock_valid>
    9276:	b978      	cbnz	r0, 9298 <z_sched_wake+0x90>
    9278:	4a0c      	ldr	r2, [pc, #48]	; (92ac <z_sched_wake+0xa4>)
    927a:	4910      	ldr	r1, [pc, #64]	; (92bc <z_sched_wake+0xb4>)
    927c:	480d      	ldr	r0, [pc, #52]	; (92b4 <z_sched_wake+0xac>)
    927e:	23c2      	movs	r3, #194	; 0xc2
    9280:	f001 f921 	bl	a4c6 <assert_print>
    9284:	4908      	ldr	r1, [pc, #32]	; (92a8 <z_sched_wake+0xa0>)
    9286:	480e      	ldr	r0, [pc, #56]	; (92c0 <z_sched_wake+0xb8>)
    9288:	f001 f91d 	bl	a4c6 <assert_print>
    928c:	21c2      	movs	r1, #194	; 0xc2
    928e:	e7d8      	b.n	9242 <z_sched_wake+0x3a>
	bool ret = false;
    9290:	2500      	movs	r5, #0
    9292:	e7ed      	b.n	9270 <z_sched_wake+0x68>
    9294:	4625      	mov	r5, r4
    9296:	e7eb      	b.n	9270 <z_sched_wake+0x68>
	__asm__ volatile(
    9298:	f389 8811 	msr	BASEPRI, r9
    929c:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
    92a0:	4628      	mov	r0, r5
    92a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    92a6:	bf00      	nop
    92a8:	20000b90 	.word	0x20000b90
    92ac:	0000b7ed 	.word	0x0000b7ed
    92b0:	0000b846 	.word	0x0000b846
    92b4:	0000b53f 	.word	0x0000b53f
    92b8:	0000b85b 	.word	0x0000b85b
    92bc:	0000b81a 	.word	0x0000b81a
    92c0:	0000b831 	.word	0x0000b831

000092c4 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    92c4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    92c6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    92ca:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    92cc:	e9cd 6700 	strd	r6, r7, [sp]
    92d0:	f7ff fa86 	bl	87e0 <z_pend_curr>

	if (data != NULL) {
    92d4:	b11c      	cbz	r4, 92de <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    92d6:	4b03      	ldr	r3, [pc, #12]	; (92e4 <z_sched_wait+0x20>)
    92d8:	689b      	ldr	r3, [r3, #8]
    92da:	695b      	ldr	r3, [r3, #20]
    92dc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    92de:	b002      	add	sp, #8
    92e0:	bdd0      	pop	{r4, r6, r7, pc}
    92e2:	bf00      	nop
    92e4:	20000b58 	.word	0x20000b58

000092e8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    92e8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    92ea:	4806      	ldr	r0, [pc, #24]	; (9304 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    92ec:	4a06      	ldr	r2, [pc, #24]	; (9308 <z_data_copy+0x20>)
    92ee:	4907      	ldr	r1, [pc, #28]	; (930c <z_data_copy+0x24>)
    92f0:	1a12      	subs	r2, r2, r0
    92f2:	f001 fc8d 	bl	ac10 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    92f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    92fa:	4a05      	ldr	r2, [pc, #20]	; (9310 <z_data_copy+0x28>)
    92fc:	4905      	ldr	r1, [pc, #20]	; (9314 <z_data_copy+0x2c>)
    92fe:	4806      	ldr	r0, [pc, #24]	; (9318 <z_data_copy+0x30>)
    9300:	f001 bc86 	b.w	ac10 <z_early_memcpy>
    9304:	20000000 	.word	0x20000000
    9308:	20000244 	.word	0x20000244
    930c:	0000d6e8 	.word	0x0000d6e8
    9310:	00000000 	.word	0x00000000
    9314:	0000d6e8 	.word	0x0000d6e8
    9318:	20000000 	.word	0x20000000

0000931c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    931c:	4b03      	ldr	r3, [pc, #12]	; (932c <elapsed+0x10>)
    931e:	681b      	ldr	r3, [r3, #0]
    9320:	b90b      	cbnz	r3, 9326 <elapsed+0xa>
    9322:	f7fc bb63 	b.w	59ec <sys_clock_elapsed>
}
    9326:	2000      	movs	r0, #0
    9328:	4770      	bx	lr
    932a:	bf00      	nop
    932c:	20000b94 	.word	0x20000b94

00009330 <next_timeout>:

static int32_t next_timeout(void)
{
    9330:	b510      	push	{r4, lr}
	return list->head == list;
    9332:	4b0e      	ldr	r3, [pc, #56]	; (936c <next_timeout+0x3c>)
    9334:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9336:	429c      	cmp	r4, r3
    9338:	d104      	bne.n	9344 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    933a:	f7ff ffef 	bl	931c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    933e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    9342:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    9344:	f7ff ffea 	bl	931c <elapsed>
	if ((to == NULL) ||
    9348:	2c00      	cmp	r4, #0
    934a:	d0f8      	beq.n	933e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    934c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    9350:	1a1b      	subs	r3, r3, r0
    9352:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    9356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    935a:	f172 0100 	sbcs.w	r1, r2, #0
    935e:	daee      	bge.n	933e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    9360:	2a00      	cmp	r2, #0
    9362:	bfac      	ite	ge
    9364:	4618      	movge	r0, r3
    9366:	2000      	movlt	r0, #0
	return ret;
    9368:	e7eb      	b.n	9342 <next_timeout+0x12>
    936a:	bf00      	nop
    936c:	2000017c 	.word	0x2000017c

00009370 <remove_timeout>:
{
    9370:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9372:	b170      	cbz	r0, 9392 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    9374:	4b0b      	ldr	r3, [pc, #44]	; (93a4 <remove_timeout+0x34>)
    9376:	685b      	ldr	r3, [r3, #4]
    9378:	4298      	cmp	r0, r3
    937a:	d00a      	beq.n	9392 <remove_timeout+0x22>
    937c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    937e:	b143      	cbz	r3, 9392 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    9380:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    9384:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    9388:	1912      	adds	r2, r2, r4
    938a:	eb41 0105 	adc.w	r1, r1, r5
    938e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
    9392:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    9396:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9398:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    939a:	2300      	movs	r3, #0
	node->prev = NULL;
    939c:	e9c0 3300 	strd	r3, r3, [r0]
}
    93a0:	bd30      	pop	{r4, r5, pc}
    93a2:	bf00      	nop
    93a4:	2000017c 	.word	0x2000017c

000093a8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    93a8:	f1b3 3fff 	cmp.w	r3, #4294967295
    93ac:	bf08      	it	eq
    93ae:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    93b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    93b6:	4604      	mov	r4, r0
    93b8:	4692      	mov	sl, r2
    93ba:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    93bc:	f000 8099 	beq.w	94f2 <z_add_timeout+0x14a>
	return node->next != NULL;
    93c0:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    93c2:	b166      	cbz	r6, 93de <z_add_timeout+0x36>
    93c4:	494c      	ldr	r1, [pc, #304]	; (94f8 <z_add_timeout+0x150>)
    93c6:	4a4d      	ldr	r2, [pc, #308]	; (94fc <z_add_timeout+0x154>)
    93c8:	484d      	ldr	r0, [pc, #308]	; (9500 <z_add_timeout+0x158>)
    93ca:	235e      	movs	r3, #94	; 0x5e
    93cc:	f001 f87b 	bl	a4c6 <assert_print>
    93d0:	484c      	ldr	r0, [pc, #304]	; (9504 <z_add_timeout+0x15c>)
    93d2:	f001 f878 	bl	a4c6 <assert_print>
    93d6:	4849      	ldr	r0, [pc, #292]	; (94fc <z_add_timeout+0x154>)
    93d8:	215e      	movs	r1, #94	; 0x5e
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    93da:	f001 f86d 	bl	a4b8 <assert_post_action>
	to->fn = fn;
    93de:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    93e0:	f04f 0320 	mov.w	r3, #32
    93e4:	f3ef 8711 	mrs	r7, BASEPRI
    93e8:	f383 8812 	msr	BASEPRI_MAX, r3
    93ec:	f3bf 8f6f 	isb	sy
    93f0:	4845      	ldr	r0, [pc, #276]	; (9508 <z_add_timeout+0x160>)
    93f2:	f7fe fb43 	bl	7a7c <z_spin_lock_valid>
    93f6:	b960      	cbnz	r0, 9412 <z_add_timeout+0x6a>
    93f8:	4a44      	ldr	r2, [pc, #272]	; (950c <z_add_timeout+0x164>)
    93fa:	4945      	ldr	r1, [pc, #276]	; (9510 <z_add_timeout+0x168>)
    93fc:	4840      	ldr	r0, [pc, #256]	; (9500 <z_add_timeout+0x158>)
    93fe:	2394      	movs	r3, #148	; 0x94
    9400:	f001 f861 	bl	a4c6 <assert_print>
    9404:	4940      	ldr	r1, [pc, #256]	; (9508 <z_add_timeout+0x160>)
    9406:	4843      	ldr	r0, [pc, #268]	; (9514 <z_add_timeout+0x16c>)
    9408:	f001 f85d 	bl	a4c6 <assert_print>
    940c:	2194      	movs	r1, #148	; 0x94
    940e:	483f      	ldr	r0, [pc, #252]	; (950c <z_add_timeout+0x164>)
    9410:	e7e3      	b.n	93da <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
    9412:	483d      	ldr	r0, [pc, #244]	; (9508 <z_add_timeout+0x160>)
    9414:	f7fe fb50 	bl	7ab8 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    9418:	f1ba 3fff 	cmp.w	sl, #4294967295
    941c:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    9420:	da23      	bge.n	946a <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    9422:	493d      	ldr	r1, [pc, #244]	; (9518 <z_add_timeout+0x170>)
    9424:	e9d1 2000 	ldrd	r2, r0, [r1]
    9428:	f06f 0301 	mvn.w	r3, #1
    942c:	1a9b      	subs	r3, r3, r2
    942e:	f04f 32ff 	mov.w	r2, #4294967295
    9432:	eb62 0000 	sbc.w	r0, r2, r0
    9436:	ebb3 030a 	subs.w	r3, r3, sl
    943a:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    943e:	2b01      	cmp	r3, #1
    9440:	f170 0200 	sbcs.w	r2, r0, #0
    9444:	da01      	bge.n	944a <z_add_timeout+0xa2>
    9446:	2301      	movs	r3, #1
    9448:	4630      	mov	r0, r6
    944a:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
    944e:	4b33      	ldr	r3, [pc, #204]	; (951c <z_add_timeout+0x174>)
    9450:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
    9452:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9456:	429a      	cmp	r2, r3
    9458:	bf18      	it	ne
    945a:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    945c:	b986      	cbnz	r6, 9480 <z_add_timeout+0xd8>
	node->prev = tail;
    945e:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
    9462:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    9466:	605c      	str	r4, [r3, #4]
}
    9468:	e01c      	b.n	94a4 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
    946a:	f7ff ff57 	bl	931c <elapsed>
    946e:	f11a 0801 	adds.w	r8, sl, #1
    9472:	f145 0500 	adc.w	r5, r5, #0
    9476:	eb18 0300 	adds.w	r3, r8, r0
    947a:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    947e:	e7e4      	b.n	944a <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
    9480:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
    9484:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    9488:	428a      	cmp	r2, r1
    948a:	eb70 0e05 	sbcs.w	lr, r0, r5
    948e:	da23      	bge.n	94d8 <z_add_timeout+0x130>
				t->dticks -= to->dticks;
    9490:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
    9492:	6872      	ldr	r2, [r6, #4]
    9494:	eb65 0500 	sbc.w	r5, r5, r0
    9498:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
    949c:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
    94a0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    94a2:	6074      	str	r4, [r6, #4]
	return list->head == list;
    94a4:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    94a6:	429a      	cmp	r2, r3
    94a8:	d006      	beq.n	94b8 <z_add_timeout+0x110>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    94aa:	4294      	cmp	r4, r2
    94ac:	d104      	bne.n	94b8 <z_add_timeout+0x110>
			sys_clock_set_timeout(next_timeout(), false);
    94ae:	f7ff ff3f 	bl	9330 <next_timeout>
    94b2:	2100      	movs	r1, #0
    94b4:	f7fc fa6e 	bl	5994 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    94b8:	4813      	ldr	r0, [pc, #76]	; (9508 <z_add_timeout+0x160>)
    94ba:	f7fe faed 	bl	7a98 <z_spin_unlock_valid>
    94be:	b9a0      	cbnz	r0, 94ea <z_add_timeout+0x142>
    94c0:	4a12      	ldr	r2, [pc, #72]	; (950c <z_add_timeout+0x164>)
    94c2:	4917      	ldr	r1, [pc, #92]	; (9520 <z_add_timeout+0x178>)
    94c4:	480e      	ldr	r0, [pc, #56]	; (9500 <z_add_timeout+0x158>)
    94c6:	23c2      	movs	r3, #194	; 0xc2
    94c8:	f000 fffd 	bl	a4c6 <assert_print>
    94cc:	490e      	ldr	r1, [pc, #56]	; (9508 <z_add_timeout+0x160>)
    94ce:	4815      	ldr	r0, [pc, #84]	; (9524 <z_add_timeout+0x17c>)
    94d0:	f000 fff9 	bl	a4c6 <assert_print>
    94d4:	21c2      	movs	r1, #194	; 0xc2
    94d6:	e79a      	b.n	940e <z_add_timeout+0x66>
			to->dticks -= t->dticks;
    94d8:	1a52      	subs	r2, r2, r1
    94da:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
    94de:	4566      	cmp	r6, ip
    94e0:	e9c4 2004 	strd	r2, r0, [r4, #16]
    94e4:	d0bb      	beq.n	945e <z_add_timeout+0xb6>
    94e6:	6836      	ldr	r6, [r6, #0]
    94e8:	e7b8      	b.n	945c <z_add_timeout+0xb4>
	__asm__ volatile(
    94ea:	f387 8811 	msr	BASEPRI, r7
    94ee:	f3bf 8f6f 	isb	sy
		}
	}
}
    94f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    94f6:	bf00      	nop
    94f8:	0000d3fc 	.word	0x0000d3fc
    94fc:	0000d3d8 	.word	0x0000d3d8
    9500:	0000b53f 	.word	0x0000b53f
    9504:	0000d076 	.word	0x0000d076
    9508:	20000b98 	.word	0x20000b98
    950c:	0000b7ed 	.word	0x0000b7ed
    9510:	0000b846 	.word	0x0000b846
    9514:	0000b85b 	.word	0x0000b85b
    9518:	20000380 	.word	0x20000380
    951c:	2000017c 	.word	0x2000017c
    9520:	0000b81a 	.word	0x0000b81a
    9524:	0000b831 	.word	0x0000b831

00009528 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    9528:	b538      	push	{r3, r4, r5, lr}
    952a:	4604      	mov	r4, r0
	__asm__ volatile(
    952c:	f04f 0320 	mov.w	r3, #32
    9530:	f3ef 8511 	mrs	r5, BASEPRI
    9534:	f383 8812 	msr	BASEPRI_MAX, r3
    9538:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    953c:	4819      	ldr	r0, [pc, #100]	; (95a4 <z_abort_timeout+0x7c>)
    953e:	f7fe fa9d 	bl	7a7c <z_spin_lock_valid>
    9542:	b968      	cbnz	r0, 9560 <z_abort_timeout+0x38>
    9544:	4a18      	ldr	r2, [pc, #96]	; (95a8 <z_abort_timeout+0x80>)
    9546:	4919      	ldr	r1, [pc, #100]	; (95ac <z_abort_timeout+0x84>)
    9548:	4819      	ldr	r0, [pc, #100]	; (95b0 <z_abort_timeout+0x88>)
    954a:	2394      	movs	r3, #148	; 0x94
    954c:	f000 ffbb 	bl	a4c6 <assert_print>
    9550:	4914      	ldr	r1, [pc, #80]	; (95a4 <z_abort_timeout+0x7c>)
    9552:	4818      	ldr	r0, [pc, #96]	; (95b4 <z_abort_timeout+0x8c>)
    9554:	f000 ffb7 	bl	a4c6 <assert_print>
    9558:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    955a:	4813      	ldr	r0, [pc, #76]	; (95a8 <z_abort_timeout+0x80>)
    955c:	f000 ffac 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    9560:	4810      	ldr	r0, [pc, #64]	; (95a4 <z_abort_timeout+0x7c>)
    9562:	f7fe faa9 	bl	7ab8 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    9566:	6823      	ldr	r3, [r4, #0]
    9568:	b19b      	cbz	r3, 9592 <z_abort_timeout+0x6a>
			remove_timeout(to);
    956a:	4620      	mov	r0, r4
    956c:	f7ff ff00 	bl	9370 <remove_timeout>
			ret = 0;
    9570:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9572:	480c      	ldr	r0, [pc, #48]	; (95a4 <z_abort_timeout+0x7c>)
    9574:	f7fe fa90 	bl	7a98 <z_spin_unlock_valid>
    9578:	b970      	cbnz	r0, 9598 <z_abort_timeout+0x70>
    957a:	4a0b      	ldr	r2, [pc, #44]	; (95a8 <z_abort_timeout+0x80>)
    957c:	490e      	ldr	r1, [pc, #56]	; (95b8 <z_abort_timeout+0x90>)
    957e:	480c      	ldr	r0, [pc, #48]	; (95b0 <z_abort_timeout+0x88>)
    9580:	23c2      	movs	r3, #194	; 0xc2
    9582:	f000 ffa0 	bl	a4c6 <assert_print>
    9586:	4907      	ldr	r1, [pc, #28]	; (95a4 <z_abort_timeout+0x7c>)
    9588:	480c      	ldr	r0, [pc, #48]	; (95bc <z_abort_timeout+0x94>)
    958a:	f000 ff9c 	bl	a4c6 <assert_print>
    958e:	21c2      	movs	r1, #194	; 0xc2
    9590:	e7e3      	b.n	955a <z_abort_timeout+0x32>
	int ret = -EINVAL;
    9592:	f06f 0415 	mvn.w	r4, #21
    9596:	e7ec      	b.n	9572 <z_abort_timeout+0x4a>
	__asm__ volatile(
    9598:	f385 8811 	msr	BASEPRI, r5
    959c:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    95a0:	4620      	mov	r0, r4
    95a2:	bd38      	pop	{r3, r4, r5, pc}
    95a4:	20000b98 	.word	0x20000b98
    95a8:	0000b7ed 	.word	0x0000b7ed
    95ac:	0000b846 	.word	0x0000b846
    95b0:	0000b53f 	.word	0x0000b53f
    95b4:	0000b85b 	.word	0x0000b85b
    95b8:	0000b81a 	.word	0x0000b81a
    95bc:	0000b831 	.word	0x0000b831

000095c0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    95c0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    95c2:	f04f 0320 	mov.w	r3, #32
    95c6:	f3ef 8511 	mrs	r5, BASEPRI
    95ca:	f383 8812 	msr	BASEPRI_MAX, r3
    95ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    95d2:	4817      	ldr	r0, [pc, #92]	; (9630 <z_get_next_timeout_expiry+0x70>)
    95d4:	f7fe fa52 	bl	7a7c <z_spin_lock_valid>
    95d8:	b968      	cbnz	r0, 95f6 <z_get_next_timeout_expiry+0x36>
    95da:	4a16      	ldr	r2, [pc, #88]	; (9634 <z_get_next_timeout_expiry+0x74>)
    95dc:	4916      	ldr	r1, [pc, #88]	; (9638 <z_get_next_timeout_expiry+0x78>)
    95de:	4817      	ldr	r0, [pc, #92]	; (963c <z_get_next_timeout_expiry+0x7c>)
    95e0:	2394      	movs	r3, #148	; 0x94
    95e2:	f000 ff70 	bl	a4c6 <assert_print>
    95e6:	4912      	ldr	r1, [pc, #72]	; (9630 <z_get_next_timeout_expiry+0x70>)
    95e8:	4815      	ldr	r0, [pc, #84]	; (9640 <z_get_next_timeout_expiry+0x80>)
    95ea:	f000 ff6c 	bl	a4c6 <assert_print>
    95ee:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    95f0:	4810      	ldr	r0, [pc, #64]	; (9634 <z_get_next_timeout_expiry+0x74>)
    95f2:	f000 ff61 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    95f6:	480e      	ldr	r0, [pc, #56]	; (9630 <z_get_next_timeout_expiry+0x70>)
    95f8:	f7fe fa5e 	bl	7ab8 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    95fc:	f7ff fe98 	bl	9330 <next_timeout>
    9600:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9602:	480b      	ldr	r0, [pc, #44]	; (9630 <z_get_next_timeout_expiry+0x70>)
    9604:	f7fe fa48 	bl	7a98 <z_spin_unlock_valid>
    9608:	b958      	cbnz	r0, 9622 <z_get_next_timeout_expiry+0x62>
    960a:	4a0a      	ldr	r2, [pc, #40]	; (9634 <z_get_next_timeout_expiry+0x74>)
    960c:	490d      	ldr	r1, [pc, #52]	; (9644 <z_get_next_timeout_expiry+0x84>)
    960e:	480b      	ldr	r0, [pc, #44]	; (963c <z_get_next_timeout_expiry+0x7c>)
    9610:	23c2      	movs	r3, #194	; 0xc2
    9612:	f000 ff58 	bl	a4c6 <assert_print>
    9616:	4906      	ldr	r1, [pc, #24]	; (9630 <z_get_next_timeout_expiry+0x70>)
    9618:	480b      	ldr	r0, [pc, #44]	; (9648 <z_get_next_timeout_expiry+0x88>)
    961a:	f000 ff54 	bl	a4c6 <assert_print>
    961e:	21c2      	movs	r1, #194	; 0xc2
    9620:	e7e6      	b.n	95f0 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
    9622:	f385 8811 	msr	BASEPRI, r5
    9626:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    962a:	4620      	mov	r0, r4
    962c:	bd38      	pop	{r3, r4, r5, pc}
    962e:	bf00      	nop
    9630:	20000b98 	.word	0x20000b98
    9634:	0000b7ed 	.word	0x0000b7ed
    9638:	0000b846 	.word	0x0000b846
    963c:	0000b53f 	.word	0x0000b53f
    9640:	0000b85b 	.word	0x0000b85b
    9644:	0000b81a 	.word	0x0000b81a
    9648:	0000b831 	.word	0x0000b831

0000964c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    964c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9650:	4604      	mov	r4, r0
	__asm__ volatile(
    9652:	f04f 0320 	mov.w	r3, #32
    9656:	f3ef 8811 	mrs	r8, BASEPRI
    965a:	f383 8812 	msr	BASEPRI_MAX, r3
    965e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9662:	4847      	ldr	r0, [pc, #284]	; (9780 <sys_clock_announce+0x134>)
    9664:	f7fe fa0a 	bl	7a7c <z_spin_lock_valid>
    9668:	b968      	cbnz	r0, 9686 <sys_clock_announce+0x3a>
    966a:	4a46      	ldr	r2, [pc, #280]	; (9784 <sys_clock_announce+0x138>)
    966c:	4946      	ldr	r1, [pc, #280]	; (9788 <sys_clock_announce+0x13c>)
    966e:	4847      	ldr	r0, [pc, #284]	; (978c <sys_clock_announce+0x140>)
    9670:	2394      	movs	r3, #148	; 0x94
    9672:	f000 ff28 	bl	a4c6 <assert_print>
    9676:	4942      	ldr	r1, [pc, #264]	; (9780 <sys_clock_announce+0x134>)
    9678:	4845      	ldr	r0, [pc, #276]	; (9790 <sys_clock_announce+0x144>)
    967a:	f000 ff24 	bl	a4c6 <assert_print>
    967e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9680:	4840      	ldr	r0, [pc, #256]	; (9784 <sys_clock_announce+0x138>)
    9682:	f000 ff19 	bl	a4b8 <assert_post_action>
	return list->head == list;
    9686:	f8df 910c 	ldr.w	r9, [pc, #268]	; 9794 <sys_clock_announce+0x148>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    968a:	f8df b10c 	ldr.w	fp, [pc, #268]	; 9798 <sys_clock_announce+0x14c>
	z_spin_lock_set_owner(l);
    968e:	483c      	ldr	r0, [pc, #240]	; (9780 <sys_clock_announce+0x134>)
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    9690:	f8df a108 	ldr.w	sl, [pc, #264]	; 979c <sys_clock_announce+0x150>
    9694:	f7fe fa10 	bl	7ab8 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    9698:	f8cb 4000 	str.w	r4, [fp]
    969c:	f8d9 4000 	ldr.w	r4, [r9]
		t->dticks = 0;
    96a0:	2600      	movs	r6, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    96a2:	454c      	cmp	r4, r9
    96a4:	bf08      	it	eq
    96a6:	2400      	moveq	r4, #0
    96a8:	2700      	movs	r7, #0
		curr_tick += dt;
    96aa:	e9da 2100 	ldrd	r2, r1, [sl]
	     (t != NULL) && (t->dticks <= announce_remaining);
    96ae:	f8db 3000 	ldr.w	r3, [fp]
    96b2:	2c00      	cmp	r4, #0
    96b4:	d049      	beq.n	974a <sys_clock_announce+0xfe>
    96b6:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
    96ba:	ea4f 7ce3 	mov.w	ip, r3, asr #31
    96be:	42ab      	cmp	r3, r5
    96c0:	eb7c 0e00 	sbcs.w	lr, ip, r0
    96c4:	da05      	bge.n	96d2 <sys_clock_announce+0x86>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    96c6:	1aed      	subs	r5, r5, r3
    96c8:	eb60 000c 	sbc.w	r0, r0, ip
    96cc:	e9c4 5004 	strd	r5, r0, [r4, #16]
    96d0:	e03b      	b.n	974a <sys_clock_announce+0xfe>
		curr_tick += dt;
    96d2:	18aa      	adds	r2, r5, r2
    96d4:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
		remove_timeout(t);
    96d8:	4620      	mov	r0, r4
		t->dticks = 0;
    96da:	e9c4 6704 	strd	r6, r7, [r4, #16]
		curr_tick += dt;
    96de:	e9ca 2100 	strd	r2, r1, [sl]
		remove_timeout(t);
    96e2:	f7ff fe45 	bl	9370 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    96e6:	4826      	ldr	r0, [pc, #152]	; (9780 <sys_clock_announce+0x134>)
    96e8:	f7fe f9d6 	bl	7a98 <z_spin_unlock_valid>
    96ec:	b958      	cbnz	r0, 9706 <sys_clock_announce+0xba>
    96ee:	4a25      	ldr	r2, [pc, #148]	; (9784 <sys_clock_announce+0x138>)
    96f0:	492b      	ldr	r1, [pc, #172]	; (97a0 <sys_clock_announce+0x154>)
    96f2:	4826      	ldr	r0, [pc, #152]	; (978c <sys_clock_announce+0x140>)
    96f4:	23c2      	movs	r3, #194	; 0xc2
    96f6:	f000 fee6 	bl	a4c6 <assert_print>
    96fa:	4921      	ldr	r1, [pc, #132]	; (9780 <sys_clock_announce+0x134>)
    96fc:	4829      	ldr	r0, [pc, #164]	; (97a4 <sys_clock_announce+0x158>)
    96fe:	f000 fee2 	bl	a4c6 <assert_print>
    9702:	21c2      	movs	r1, #194	; 0xc2
    9704:	e7bc      	b.n	9680 <sys_clock_announce+0x34>
	__asm__ volatile(
    9706:	f388 8811 	msr	BASEPRI, r8
    970a:	f3bf 8f6f 	isb	sy
		t->fn(t);
    970e:	68a3      	ldr	r3, [r4, #8]
    9710:	4620      	mov	r0, r4
    9712:	4798      	blx	r3
	__asm__ volatile(
    9714:	f04f 0320 	mov.w	r3, #32
    9718:	f3ef 8811 	mrs	r8, BASEPRI
    971c:	f383 8812 	msr	BASEPRI_MAX, r3
    9720:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9724:	4816      	ldr	r0, [pc, #88]	; (9780 <sys_clock_announce+0x134>)
    9726:	f7fe f9a9 	bl	7a7c <z_spin_lock_valid>
    972a:	2800      	cmp	r0, #0
    972c:	d09d      	beq.n	966a <sys_clock_announce+0x1e>
	z_spin_lock_set_owner(l);
    972e:	4814      	ldr	r0, [pc, #80]	; (9780 <sys_clock_announce+0x134>)
    9730:	f7fe f9c2 	bl	7ab8 <z_spin_lock_set_owner>
		announce_remaining -= dt;
    9734:	f8db 3000 	ldr.w	r3, [fp]
	return list->head == list;
    9738:	f8d9 4000 	ldr.w	r4, [r9]
    973c:	1b5b      	subs	r3, r3, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
    973e:	454c      	cmp	r4, r9
    9740:	f8cb 3000 	str.w	r3, [fp]
    9744:	d1b1      	bne.n	96aa <sys_clock_announce+0x5e>
		curr_tick += dt;
    9746:	e9da 2100 	ldrd	r2, r1, [sl]
	}

	curr_tick += announce_remaining;
    974a:	189a      	adds	r2, r3, r2
    974c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	announce_remaining = 0;
    9750:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    9752:	e9ca 2100 	strd	r2, r1, [sl]
	announce_remaining = 0;
    9756:	f8cb 4000 	str.w	r4, [fp]

	sys_clock_set_timeout(next_timeout(), false);
    975a:	f7ff fde9 	bl	9330 <next_timeout>
    975e:	4621      	mov	r1, r4
    9760:	f7fc f918 	bl	5994 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9764:	4806      	ldr	r0, [pc, #24]	; (9780 <sys_clock_announce+0x134>)
    9766:	f7fe f997 	bl	7a98 <z_spin_unlock_valid>
    976a:	2800      	cmp	r0, #0
    976c:	d0bf      	beq.n	96ee <sys_clock_announce+0xa2>
	__asm__ volatile(
    976e:	f388 8811 	msr	BASEPRI, r8
    9772:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    9776:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    977a:	f7fe bf5b 	b.w	8634 <z_time_slice>
    977e:	bf00      	nop
    9780:	20000b98 	.word	0x20000b98
    9784:	0000b7ed 	.word	0x0000b7ed
    9788:	0000b846 	.word	0x0000b846
    978c:	0000b53f 	.word	0x0000b53f
    9790:	0000b85b 	.word	0x0000b85b
    9794:	2000017c 	.word	0x2000017c
    9798:	20000b94 	.word	0x20000b94
    979c:	20000380 	.word	0x20000380
    97a0:	0000b81a 	.word	0x0000b81a
    97a4:	0000b831 	.word	0x0000b831

000097a8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    97a8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    97aa:	f04f 0320 	mov.w	r3, #32
    97ae:	f3ef 8611 	mrs	r6, BASEPRI
    97b2:	f383 8812 	msr	BASEPRI_MAX, r3
    97b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    97ba:	481a      	ldr	r0, [pc, #104]	; (9824 <sys_clock_tick_get+0x7c>)
    97bc:	f7fe f95e 	bl	7a7c <z_spin_lock_valid>
    97c0:	b968      	cbnz	r0, 97de <sys_clock_tick_get+0x36>
    97c2:	4a19      	ldr	r2, [pc, #100]	; (9828 <sys_clock_tick_get+0x80>)
    97c4:	4919      	ldr	r1, [pc, #100]	; (982c <sys_clock_tick_get+0x84>)
    97c6:	481a      	ldr	r0, [pc, #104]	; (9830 <sys_clock_tick_get+0x88>)
    97c8:	2394      	movs	r3, #148	; 0x94
    97ca:	f000 fe7c 	bl	a4c6 <assert_print>
    97ce:	4915      	ldr	r1, [pc, #84]	; (9824 <sys_clock_tick_get+0x7c>)
    97d0:	4818      	ldr	r0, [pc, #96]	; (9834 <sys_clock_tick_get+0x8c>)
    97d2:	f000 fe78 	bl	a4c6 <assert_print>
    97d6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    97d8:	4813      	ldr	r0, [pc, #76]	; (9828 <sys_clock_tick_get+0x80>)
    97da:	f000 fe6d 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    97de:	4811      	ldr	r0, [pc, #68]	; (9824 <sys_clock_tick_get+0x7c>)
    97e0:	f7fe f96a 	bl	7ab8 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    97e4:	f7ff fd9a 	bl	931c <elapsed>
    97e8:	4a13      	ldr	r2, [pc, #76]	; (9838 <sys_clock_tick_get+0x90>)
    97ea:	e9d2 4500 	ldrd	r4, r5, [r2]
    97ee:	1904      	adds	r4, r0, r4
    97f0:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    97f4:	480b      	ldr	r0, [pc, #44]	; (9824 <sys_clock_tick_get+0x7c>)
    97f6:	f7fe f94f 	bl	7a98 <z_spin_unlock_valid>
    97fa:	b958      	cbnz	r0, 9814 <sys_clock_tick_get+0x6c>
    97fc:	4a0a      	ldr	r2, [pc, #40]	; (9828 <sys_clock_tick_get+0x80>)
    97fe:	490f      	ldr	r1, [pc, #60]	; (983c <sys_clock_tick_get+0x94>)
    9800:	480b      	ldr	r0, [pc, #44]	; (9830 <sys_clock_tick_get+0x88>)
    9802:	23c2      	movs	r3, #194	; 0xc2
    9804:	f000 fe5f 	bl	a4c6 <assert_print>
    9808:	4906      	ldr	r1, [pc, #24]	; (9824 <sys_clock_tick_get+0x7c>)
    980a:	480d      	ldr	r0, [pc, #52]	; (9840 <sys_clock_tick_get+0x98>)
    980c:	f000 fe5b 	bl	a4c6 <assert_print>
    9810:	21c2      	movs	r1, #194	; 0xc2
    9812:	e7e1      	b.n	97d8 <sys_clock_tick_get+0x30>
	__asm__ volatile(
    9814:	f386 8811 	msr	BASEPRI, r6
    9818:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    981c:	4620      	mov	r0, r4
    981e:	4629      	mov	r1, r5
    9820:	bd70      	pop	{r4, r5, r6, pc}
    9822:	bf00      	nop
    9824:	20000b98 	.word	0x20000b98
    9828:	0000b7ed 	.word	0x0000b7ed
    982c:	0000b846 	.word	0x0000b846
    9830:	0000b53f 	.word	0x0000b53f
    9834:	0000b85b 	.word	0x0000b85b
    9838:	20000380 	.word	0x20000380
    983c:	0000b81a 	.word	0x0000b81a
    9840:	0000b831 	.word	0x0000b831

00009844 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    9844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9846:	4604      	mov	r4, r0
	__asm__ volatile(
    9848:	f04f 0320 	mov.w	r3, #32
    984c:	f3ef 8711 	mrs	r7, BASEPRI
    9850:	f383 8812 	msr	BASEPRI_MAX, r3
    9854:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9858:	484e      	ldr	r0, [pc, #312]	; (9994 <z_timer_expiration_handler+0x150>)
    985a:	f7fe f90f 	bl	7a7c <z_spin_lock_valid>
    985e:	b968      	cbnz	r0, 987c <z_timer_expiration_handler+0x38>
    9860:	4a4d      	ldr	r2, [pc, #308]	; (9998 <z_timer_expiration_handler+0x154>)
    9862:	494e      	ldr	r1, [pc, #312]	; (999c <z_timer_expiration_handler+0x158>)
    9864:	484e      	ldr	r0, [pc, #312]	; (99a0 <z_timer_expiration_handler+0x15c>)
    9866:	2394      	movs	r3, #148	; 0x94
    9868:	f000 fe2d 	bl	a4c6 <assert_print>
    986c:	4949      	ldr	r1, [pc, #292]	; (9994 <z_timer_expiration_handler+0x150>)
    986e:	484d      	ldr	r0, [pc, #308]	; (99a4 <z_timer_expiration_handler+0x160>)
    9870:	f000 fe29 	bl	a4c6 <assert_print>
    9874:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9876:	4848      	ldr	r0, [pc, #288]	; (9998 <z_timer_expiration_handler+0x154>)
    9878:	f000 fe1e 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    987c:	4845      	ldr	r0, [pc, #276]	; (9994 <z_timer_expiration_handler+0x150>)
    987e:	f7fe f91b 	bl	7ab8 <z_spin_lock_set_owner>
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    9882:	6822      	ldr	r2, [r4, #0]
    9884:	b182      	cbz	r2, 98a8 <z_timer_expiration_handler+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9886:	4843      	ldr	r0, [pc, #268]	; (9994 <z_timer_expiration_handler+0x150>)
    9888:	f7fe f906 	bl	7a98 <z_spin_unlock_valid>
    988c:	2800      	cmp	r0, #0
    988e:	d17b      	bne.n	9988 <z_timer_expiration_handler+0x144>
    9890:	4a41      	ldr	r2, [pc, #260]	; (9998 <z_timer_expiration_handler+0x154>)
    9892:	4945      	ldr	r1, [pc, #276]	; (99a8 <z_timer_expiration_handler+0x164>)
    9894:	4842      	ldr	r0, [pc, #264]	; (99a0 <z_timer_expiration_handler+0x15c>)
    9896:	23c2      	movs	r3, #194	; 0xc2
    9898:	f000 fe15 	bl	a4c6 <assert_print>
    989c:	493d      	ldr	r1, [pc, #244]	; (9994 <z_timer_expiration_handler+0x150>)
    989e:	4843      	ldr	r0, [pc, #268]	; (99ac <z_timer_expiration_handler+0x168>)
    98a0:	f000 fe11 	bl	a4c6 <assert_print>
    98a4:	21c2      	movs	r1, #194	; 0xc2
    98a6:	e7e6      	b.n	9876 <z_timer_expiration_handler+0x32>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    98a8:	e9d4 360a 	ldrd	r3, r6, [r4, #40]	; 0x28
    98ac:	1c58      	adds	r0, r3, #1
    98ae:	f146 0100 	adc.w	r1, r6, #0
    98b2:	2802      	cmp	r0, #2
    98b4:	f171 0100 	sbcs.w	r1, r1, #0
    98b8:	d327      	bcc.n	990a <z_timer_expiration_handler+0xc6>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		k_timeout_t next = timer->period;

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
    98ba:	2b01      	cmp	r3, #1
    98bc:	f176 0100 	sbcs.w	r1, r6, #0
    98c0:	bfbc      	itt	lt
    98c2:	2301      	movlt	r3, #1
    98c4:	4616      	movlt	r6, r2
    98c6:	1e5d      	subs	r5, r3, #1
    98c8:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
    98cc:	f001 fa08 	bl	ace0 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    98d0:	3001      	adds	r0, #1
    98d2:	f141 0100 	adc.w	r1, r1, #0
    98d6:	1940      	adds	r0, r0, r5
    98d8:	eb46 0101 	adc.w	r1, r6, r1
    98dc:	2801      	cmp	r0, #1
    98de:	f171 0100 	sbcs.w	r1, r1, #0
    98e2:	db4c      	blt.n	997e <z_timer_expiration_handler+0x13a>
    98e4:	f001 f9fc 	bl	ace0 <z_impl_k_uptime_ticks>
    98e8:	3001      	adds	r0, #1
    98ea:	f141 0100 	adc.w	r1, r1, #0
    98ee:	f06f 0201 	mvn.w	r2, #1
    98f2:	1940      	adds	r0, r0, r5
    98f4:	eb46 0301 	adc.w	r3, r6, r1
    98f8:	1a12      	subs	r2, r2, r0
    98fa:	f04f 31ff 	mov.w	r1, #4294967295
    98fe:	eb61 0303 	sbc.w	r3, r1, r3
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9902:	492b      	ldr	r1, [pc, #172]	; (99b0 <z_timer_expiration_handler+0x16c>)
    9904:	4620      	mov	r0, r4
    9906:	f7ff fd4f 	bl	93a8 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    990a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    990c:	3301      	adds	r3, #1
    990e:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    9910:	6a23      	ldr	r3, [r4, #32]
    9912:	b1db      	cbz	r3, 994c <z_timer_expiration_handler+0x108>
    9914:	481f      	ldr	r0, [pc, #124]	; (9994 <z_timer_expiration_handler+0x150>)
    9916:	f7fe f8bf 	bl	7a98 <z_spin_unlock_valid>
    991a:	2800      	cmp	r0, #0
    991c:	d0b8      	beq.n	9890 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
    991e:	f387 8811 	msr	BASEPRI, r7
    9922:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    9926:	6a23      	ldr	r3, [r4, #32]
    9928:	4620      	mov	r0, r4
    992a:	4798      	blx	r3
	__asm__ volatile(
    992c:	f04f 0320 	mov.w	r3, #32
    9930:	f3ef 8711 	mrs	r7, BASEPRI
    9934:	f383 8812 	msr	BASEPRI_MAX, r3
    9938:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    993c:	4815      	ldr	r0, [pc, #84]	; (9994 <z_timer_expiration_handler+0x150>)
    993e:	f7fe f89d 	bl	7a7c <z_spin_lock_valid>
    9942:	2800      	cmp	r0, #0
    9944:	d08c      	beq.n	9860 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
    9946:	4813      	ldr	r0, [pc, #76]	; (9994 <z_timer_expiration_handler+0x150>)
    9948:	f7fe f8b6 	bl	7ab8 <z_spin_lock_set_owner>
	return list->head == list;
    994c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9950:	42a5      	cmp	r5, r4
    9952:	d098      	beq.n	9886 <z_timer_expiration_handler+0x42>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    9954:	2d00      	cmp	r5, #0
    9956:	d096      	beq.n	9886 <z_timer_expiration_handler+0x42>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    9958:	4628      	mov	r0, r5
    995a:	f7fe fc3d 	bl	81d8 <z_unpend_thread_no_timeout>
    995e:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9960:	480c      	ldr	r0, [pc, #48]	; (9994 <z_timer_expiration_handler+0x150>)
    9962:	67eb      	str	r3, [r5, #124]	; 0x7c
    9964:	f7fe f898 	bl	7a98 <z_spin_unlock_valid>
    9968:	2800      	cmp	r0, #0
    996a:	d091      	beq.n	9890 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
    996c:	f387 8811 	msr	BASEPRI, r7
    9970:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    9974:	4628      	mov	r0, r5
}
    9976:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    997a:	f7fe bbe7 	b.w	814c <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    997e:	f06f 0201 	mvn.w	r2, #1
    9982:	f04f 33ff 	mov.w	r3, #4294967295
    9986:	e7bc      	b.n	9902 <z_timer_expiration_handler+0xbe>
    9988:	f387 8811 	msr	BASEPRI, r7
    998c:	f3bf 8f6f 	isb	sy
}
    9990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9992:	bf00      	nop
    9994:	20000b9c 	.word	0x20000b9c
    9998:	0000b7ed 	.word	0x0000b7ed
    999c:	0000b846 	.word	0x0000b846
    99a0:	0000b53f 	.word	0x0000b53f
    99a4:	0000b85b 	.word	0x0000b85b
    99a8:	0000b81a 	.word	0x0000b81a
    99ac:	0000b831 	.word	0x0000b831
    99b0:	00009845 	.word	0x00009845

000099b4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    99b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    99b8:	f1b3 3fff 	cmp.w	r3, #4294967295
    99bc:	bf08      	it	eq
    99be:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    99c2:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    99c6:	4605      	mov	r5, r0
    99c8:	461c      	mov	r4, r3
    99ca:	4691      	mov	r9, r2
    99cc:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    99ce:	d01c      	beq.n	9a0a <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    99d0:	1c53      	adds	r3, r2, #1
    99d2:	f174 33ff 	sbcs.w	r3, r4, #4294967295
    99d6:	db09      	blt.n	99ec <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    99d8:	2a01      	cmp	r2, #1
    99da:	f174 0300 	sbcs.w	r3, r4, #0
    99de:	bfbc      	itt	lt
    99e0:	2201      	movlt	r2, #1
    99e2:	2400      	movlt	r4, #0
    99e4:	f112 39ff 	adds.w	r9, r2, #4294967295
    99e8:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    99ec:	4628      	mov	r0, r5
    99ee:	f7ff fd9b 	bl	9528 <z_abort_timeout>
	timer->period = period;
    99f2:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    99f6:	2300      	movs	r3, #0
    99f8:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    99fa:	464a      	mov	r2, r9
    99fc:	4643      	mov	r3, r8
    99fe:	4628      	mov	r0, r5
    9a00:	4903      	ldr	r1, [pc, #12]	; (9a10 <z_impl_k_timer_start+0x5c>)
		     duration);
}
    9a02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9a06:	f7ff bccf 	b.w	93a8 <z_add_timeout>
}
    9a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a0e:	bf00      	nop
    9a10:	00009845 	.word	0x00009845

00009a14 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    9a14:	b570      	push	{r4, r5, r6, lr}
    9a16:	4604      	mov	r4, r0
    9a18:	460d      	mov	r5, r1
	__asm__ volatile(
    9a1a:	f04f 0320 	mov.w	r3, #32
    9a1e:	f3ef 8611 	mrs	r6, BASEPRI
    9a22:	f383 8812 	msr	BASEPRI_MAX, r3
    9a26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9a2a:	4820      	ldr	r0, [pc, #128]	; (9aac <z_impl_k_poll_signal_raise+0x98>)
    9a2c:	f7fe f826 	bl	7a7c <z_spin_lock_valid>
    9a30:	b968      	cbnz	r0, 9a4e <z_impl_k_poll_signal_raise+0x3a>
    9a32:	4a1f      	ldr	r2, [pc, #124]	; (9ab0 <z_impl_k_poll_signal_raise+0x9c>)
    9a34:	491f      	ldr	r1, [pc, #124]	; (9ab4 <z_impl_k_poll_signal_raise+0xa0>)
    9a36:	4820      	ldr	r0, [pc, #128]	; (9ab8 <z_impl_k_poll_signal_raise+0xa4>)
    9a38:	2394      	movs	r3, #148	; 0x94
    9a3a:	f000 fd44 	bl	a4c6 <assert_print>
    9a3e:	491b      	ldr	r1, [pc, #108]	; (9aac <z_impl_k_poll_signal_raise+0x98>)
    9a40:	481e      	ldr	r0, [pc, #120]	; (9abc <z_impl_k_poll_signal_raise+0xa8>)
    9a42:	f000 fd40 	bl	a4c6 <assert_print>
    9a46:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9a48:	4819      	ldr	r0, [pc, #100]	; (9ab0 <z_impl_k_poll_signal_raise+0x9c>)
    9a4a:	f000 fd35 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    9a4e:	4817      	ldr	r0, [pc, #92]	; (9aac <z_impl_k_poll_signal_raise+0x98>)
    9a50:	f7fe f832 	bl	7ab8 <z_spin_lock_set_owner>
	return list->head == list;
    9a54:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    9a56:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
    9a58:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    9a5a:	4284      	cmp	r4, r0
    9a5c:	60a1      	str	r1, [r4, #8]
    9a5e:	d10f      	bne.n	9a80 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9a60:	4812      	ldr	r0, [pc, #72]	; (9aac <z_impl_k_poll_signal_raise+0x98>)
    9a62:	f7fe f819 	bl	7a98 <z_spin_unlock_valid>
    9a66:	b9d8      	cbnz	r0, 9aa0 <z_impl_k_poll_signal_raise+0x8c>
    9a68:	4a11      	ldr	r2, [pc, #68]	; (9ab0 <z_impl_k_poll_signal_raise+0x9c>)
    9a6a:	4915      	ldr	r1, [pc, #84]	; (9ac0 <z_impl_k_poll_signal_raise+0xac>)
    9a6c:	4812      	ldr	r0, [pc, #72]	; (9ab8 <z_impl_k_poll_signal_raise+0xa4>)
    9a6e:	23c2      	movs	r3, #194	; 0xc2
    9a70:	f000 fd29 	bl	a4c6 <assert_print>
    9a74:	490d      	ldr	r1, [pc, #52]	; (9aac <z_impl_k_poll_signal_raise+0x98>)
    9a76:	4813      	ldr	r0, [pc, #76]	; (9ac4 <z_impl_k_poll_signal_raise+0xb0>)
    9a78:	f000 fd25 	bl	a4c6 <assert_print>
    9a7c:	21c2      	movs	r1, #194	; 0xc2
    9a7e:	e7e3      	b.n	9a48 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
    9a80:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    9a84:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9a86:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9a88:	2300      	movs	r3, #0
	node->prev = NULL;
    9a8a:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    9a8e:	f001 f94a 	bl	ad26 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
    9a92:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    9a94:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    9a96:	4805      	ldr	r0, [pc, #20]	; (9aac <z_impl_k_poll_signal_raise+0x98>)
    9a98:	f7fe fbe6 	bl	8268 <z_reschedule>
	return rc;
}
    9a9c:	4620      	mov	r0, r4
    9a9e:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    9aa0:	f386 8811 	msr	BASEPRI, r6
    9aa4:	f3bf 8f6f 	isb	sy
		return 0;
    9aa8:	2400      	movs	r4, #0
    9aaa:	e7f7      	b.n	9a9c <z_impl_k_poll_signal_raise+0x88>
    9aac:	20000ba0 	.word	0x20000ba0
    9ab0:	0000b7ed 	.word	0x0000b7ed
    9ab4:	0000b846 	.word	0x0000b846
    9ab8:	0000b53f 	.word	0x0000b53f
    9abc:	0000b85b 	.word	0x0000b85b
    9ac0:	0000b81a 	.word	0x0000b81a
    9ac4:	0000b831 	.word	0x0000b831

00009ac8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    9ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    9aca:	4b09      	ldr	r3, [pc, #36]	; (9af0 <k_sys_work_q_init+0x28>)
    9acc:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    9ace:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    9ad0:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    9ad2:	9300      	str	r3, [sp, #0]
    9ad4:	4907      	ldr	r1, [pc, #28]	; (9af4 <k_sys_work_q_init+0x2c>)
    9ad6:	4808      	ldr	r0, [pc, #32]	; (9af8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    9ad8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    9adc:	f04f 33ff 	mov.w	r3, #4294967295
    9ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9ae4:	f000 f9c4 	bl	9e70 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    9ae8:	4620      	mov	r0, r4
    9aea:	b004      	add	sp, #16
    9aec:	bd10      	pop	{r4, pc}
    9aee:	bf00      	nop
    9af0:	0000d534 	.word	0x0000d534
    9af4:	20001fc0 	.word	0x20001fc0
    9af8:	20000388 	.word	0x20000388

00009afc <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    9afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b00:	4e6e      	ldr	r6, [pc, #440]	; (9cbc <work_queue_main+0x1c0>)
	return list->head;
    9b02:	4f6f      	ldr	r7, [pc, #444]	; (9cc0 <work_queue_main+0x1c4>)
    9b04:	b085      	sub	sp, #20
    9b06:	4604      	mov	r4, r0
	__asm__ volatile(
    9b08:	f04f 0320 	mov.w	r3, #32
    9b0c:	f3ef 8811 	mrs	r8, BASEPRI
    9b10:	f383 8812 	msr	BASEPRI_MAX, r3
    9b14:	f3bf 8f6f 	isb	sy
    9b18:	4630      	mov	r0, r6
    9b1a:	f7fd ffaf 	bl	7a7c <z_spin_lock_valid>
    9b1e:	b968      	cbnz	r0, 9b3c <work_queue_main+0x40>
    9b20:	4a68      	ldr	r2, [pc, #416]	; (9cc4 <work_queue_main+0x1c8>)
    9b22:	4969      	ldr	r1, [pc, #420]	; (9cc8 <work_queue_main+0x1cc>)
    9b24:	4869      	ldr	r0, [pc, #420]	; (9ccc <work_queue_main+0x1d0>)
    9b26:	2394      	movs	r3, #148	; 0x94
    9b28:	f000 fccd 	bl	a4c6 <assert_print>
    9b2c:	4963      	ldr	r1, [pc, #396]	; (9cbc <work_queue_main+0x1c0>)
    9b2e:	4868      	ldr	r0, [pc, #416]	; (9cd0 <work_queue_main+0x1d4>)
    9b30:	f000 fcc9 	bl	a4c6 <assert_print>
    9b34:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9b36:	4863      	ldr	r0, [pc, #396]	; (9cc4 <work_queue_main+0x1c8>)
    9b38:	f000 fcbe 	bl	a4b8 <assert_post_action>
	z_spin_lock_set_owner(l);
    9b3c:	4630      	mov	r0, r6
    9b3e:	f7fd ffbb 	bl	7ab8 <z_spin_lock_set_owner>
    9b42:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
    9b46:	b9ad      	cbnz	r5, 9b74 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    9b48:	2102      	movs	r1, #2
    9b4a:	f104 0098 	add.w	r0, r4, #152	; 0x98
    9b4e:	f001 f953 	bl	adf8 <flag_test_and_clear>
    9b52:	2800      	cmp	r0, #0
    9b54:	d135      	bne.n	9bc2 <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    9b56:	2300      	movs	r3, #0
    9b58:	9302      	str	r3, [sp, #8]
    9b5a:	f04f 32ff 	mov.w	r2, #4294967295
    9b5e:	f04f 33ff 	mov.w	r3, #4294967295
    9b62:	e9cd 2300 	strd	r2, r3, [sp]
    9b66:	4641      	mov	r1, r8
    9b68:	f104 0288 	add.w	r2, r4, #136	; 0x88
    9b6c:	4630      	mov	r0, r6
    9b6e:	f7ff fba9 	bl	92c4 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
    9b72:	e7c9      	b.n	9b08 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9b74:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    9b78:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    9b7a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9b7e:	4295      	cmp	r5, r2
	list->tail = node;
    9b80:	bf08      	it	eq
    9b82:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    9b86:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    9b8a:	f043 0302 	orr.w	r3, r3, #2
    9b8e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    9b92:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
    9b94:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
    9b98:	f023 0304 	bic.w	r3, r3, #4
    9b9c:	f043 0301 	orr.w	r3, r3, #1
    9ba0:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9ba2:	4630      	mov	r0, r6
    9ba4:	f7fd ff78 	bl	7a98 <z_spin_unlock_valid>
    9ba8:	b9a8      	cbnz	r0, 9bd6 <work_queue_main+0xda>
    9baa:	4a46      	ldr	r2, [pc, #280]	; (9cc4 <work_queue_main+0x1c8>)
    9bac:	4949      	ldr	r1, [pc, #292]	; (9cd4 <work_queue_main+0x1d8>)
    9bae:	4847      	ldr	r0, [pc, #284]	; (9ccc <work_queue_main+0x1d0>)
    9bb0:	23c2      	movs	r3, #194	; 0xc2
    9bb2:	f000 fc88 	bl	a4c6 <assert_print>
    9bb6:	4941      	ldr	r1, [pc, #260]	; (9cbc <work_queue_main+0x1c0>)
    9bb8:	4847      	ldr	r0, [pc, #284]	; (9cd8 <work_queue_main+0x1dc>)
    9bba:	f000 fc84 	bl	a4c6 <assert_print>
    9bbe:	21c2      	movs	r1, #194	; 0xc2
    9bc0:	e7b9      	b.n	9b36 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    9bc2:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    9bc6:	2200      	movs	r2, #0
    9bc8:	2101      	movs	r1, #1
    9bca:	4628      	mov	r0, r5
    9bcc:	f7ff fb1c 	bl	9208 <z_sched_wake>
    9bd0:	2800      	cmp	r0, #0
    9bd2:	d1f8      	bne.n	9bc6 <work_queue_main+0xca>
    9bd4:	e7bf      	b.n	9b56 <work_queue_main+0x5a>
	__asm__ volatile(
    9bd6:	f388 8811 	msr	BASEPRI, r8
    9bda:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
    9bde:	f1b9 0f00 	cmp.w	r9, #0
    9be2:	d10a      	bne.n	9bfa <work_queue_main+0xfe>
    9be4:	493d      	ldr	r1, [pc, #244]	; (9cdc <work_queue_main+0x1e0>)
    9be6:	4839      	ldr	r0, [pc, #228]	; (9ccc <work_queue_main+0x1d0>)
    9be8:	4a3d      	ldr	r2, [pc, #244]	; (9ce0 <work_queue_main+0x1e4>)
    9bea:	f240 239b 	movw	r3, #667	; 0x29b
    9bee:	f000 fc6a 	bl	a4c6 <assert_print>
    9bf2:	483b      	ldr	r0, [pc, #236]	; (9ce0 <work_queue_main+0x1e4>)
    9bf4:	f240 219b 	movw	r1, #667	; 0x29b
    9bf8:	e79e      	b.n	9b38 <work_queue_main+0x3c>
		handler(work);
    9bfa:	4628      	mov	r0, r5
    9bfc:	47c8      	blx	r9
	__asm__ volatile(
    9bfe:	f04f 0320 	mov.w	r3, #32
    9c02:	f3ef 8a11 	mrs	sl, BASEPRI
    9c06:	f383 8812 	msr	BASEPRI_MAX, r3
    9c0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9c0e:	4630      	mov	r0, r6
    9c10:	f7fd ff34 	bl	7a7c <z_spin_lock_valid>
    9c14:	2800      	cmp	r0, #0
    9c16:	d083      	beq.n	9b20 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
    9c18:	4630      	mov	r0, r6
    9c1a:	f7fd ff4d 	bl	7ab8 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    9c1e:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9c20:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    9c22:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9c26:	d417      	bmi.n	9c58 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
    9c28:	60ea      	str	r2, [r5, #12]
    9c2a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    9c2e:	f023 0302 	bic.w	r3, r3, #2
    9c32:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9c36:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
    9c38:	f3c3 2500 	ubfx	r5, r3, #8, #1
    9c3c:	f7fd ff2c 	bl	7a98 <z_spin_unlock_valid>
    9c40:	2800      	cmp	r0, #0
    9c42:	d0b2      	beq.n	9baa <work_queue_main+0xae>
	__asm__ volatile(
    9c44:	f38a 8811 	msr	BASEPRI, sl
    9c48:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    9c4c:	2d00      	cmp	r5, #0
    9c4e:	f47f af5b 	bne.w	9b08 <work_queue_main+0xc>
	z_impl_k_yield();
    9c52:	f7ff f89d 	bl	8d90 <z_impl_k_yield>
}
    9c56:	e757      	b.n	9b08 <work_queue_main+0xc>
	return list->head;
    9c58:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
    9c5a:	f023 0303 	bic.w	r3, r3, #3
    9c5e:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9c60:	2800      	cmp	r0, #0
    9c62:	d0e2      	beq.n	9c2a <work_queue_main+0x12e>
	return node->next;
    9c64:	f04f 0800 	mov.w	r8, #0
    9c68:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
    9c6c:	46c3      	mov	fp, r8
    9c6e:	2800      	cmp	r0, #0
    9c70:	d0db      	beq.n	9c2a <work_queue_main+0x12e>
		if (wc->work == work) {
    9c72:	6843      	ldr	r3, [r0, #4]
    9c74:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    9c76:	4602      	mov	r2, r0
		if (wc->work == work) {
    9c78:	d10d      	bne.n	9c96 <work_queue_main+0x19a>
	return node->next;
    9c7a:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    9c7c:	f1b8 0f00 	cmp.w	r8, #0
    9c80:	d112      	bne.n	9ca8 <work_queue_main+0x1ac>
    9c82:	687b      	ldr	r3, [r7, #4]
	list->head = node;
    9c84:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    9c86:	4283      	cmp	r3, r0
    9c88:	d100      	bne.n	9c8c <work_queue_main+0x190>
	list->tail = node;
    9c8a:	607a      	str	r2, [r7, #4]
	parent->next = child;
    9c8c:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
    9c90:	f7fe f8aa 	bl	7de8 <z_impl_k_sem_give>
}
    9c94:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9c96:	f1b9 0f00 	cmp.w	r9, #0
    9c9a:	d00d      	beq.n	9cb8 <work_queue_main+0x1bc>
	return node->next;
    9c9c:	f8d9 3000 	ldr.w	r3, [r9]
    9ca0:	4648      	mov	r0, r9
    9ca2:	4690      	mov	r8, r2
    9ca4:	4699      	mov	r9, r3
    9ca6:	e7e2      	b.n	9c6e <work_queue_main+0x172>
	parent->next = child;
    9ca8:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
    9cac:	687b      	ldr	r3, [r7, #4]
    9cae:	4283      	cmp	r3, r0
	list->tail = node;
    9cb0:	bf08      	it	eq
    9cb2:	f8c7 8004 	streq.w	r8, [r7, #4]
}
    9cb6:	e7e9      	b.n	9c8c <work_queue_main+0x190>
    9cb8:	464b      	mov	r3, r9
    9cba:	e7f1      	b.n	9ca0 <work_queue_main+0x1a4>
    9cbc:	20000bac 	.word	0x20000bac
    9cc0:	20000ba4 	.word	0x20000ba4
    9cc4:	0000b7ed 	.word	0x0000b7ed
    9cc8:	0000b846 	.word	0x0000b846
    9ccc:	0000b53f 	.word	0x0000b53f
    9cd0:	0000b85b 	.word	0x0000b85b
    9cd4:	0000b81a 	.word	0x0000b81a
    9cd8:	0000b831 	.word	0x0000b831
    9cdc:	0000d55e 	.word	0x0000d55e
    9ce0:	0000d53d 	.word	0x0000d53d

00009ce4 <submit_to_queue_locked>:
{
    9ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    9ce6:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9ce8:	079a      	lsls	r2, r3, #30
{
    9cea:	4604      	mov	r4, r0
    9cec:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9cee:	f3c3 0640 	ubfx	r6, r3, #1, #1
    9cf2:	d439      	bmi.n	9d68 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    9cf4:	075b      	lsls	r3, r3, #29
    9cf6:	d425      	bmi.n	9d44 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
    9cf8:	680b      	ldr	r3, [r1, #0]
    9cfa:	b90b      	cbnz	r3, 9d00 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    9cfc:	6883      	ldr	r3, [r0, #8]
    9cfe:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    9d00:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    9d02:	07dd      	lsls	r5, r3, #31
    9d04:	d521      	bpl.n	9d4a <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
    9d06:	68a3      	ldr	r3, [r4, #8]
    9d08:	b95b      	cbnz	r3, 9d22 <submit_to_queue_locked+0x3e>
    9d0a:	4928      	ldr	r1, [pc, #160]	; (9dac <submit_to_queue_locked+0xc8>)
    9d0c:	4828      	ldr	r0, [pc, #160]	; (9db0 <submit_to_queue_locked+0xcc>)
    9d0e:	4a29      	ldr	r2, [pc, #164]	; (9db4 <submit_to_queue_locked+0xd0>)
    9d10:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    9d14:	f000 fbd7 	bl	a4c6 <assert_print>
    9d18:	4826      	ldr	r0, [pc, #152]	; (9db4 <submit_to_queue_locked+0xd0>)
    9d1a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    9d1e:	f000 fbcb 	bl	a4b8 <assert_post_action>
			*queuep = work->queue;
    9d22:	603b      	str	r3, [r7, #0]
			ret = 2;
    9d24:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
    9d26:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
    9d28:	2d00      	cmp	r5, #0
    9d2a:	d03c      	beq.n	9da6 <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    9d2c:	4b22      	ldr	r3, [pc, #136]	; (9db8 <submit_to_queue_locked+0xd4>)
    9d2e:	689b      	ldr	r3, [r3, #8]
    9d30:	42ab      	cmp	r3, r5
    9d32:	d00c      	beq.n	9d4e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    9d34:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9d38:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    9d3a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9d3e:	d416      	bmi.n	9d6e <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
    9d40:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    9d44:	2300      	movs	r3, #0
    9d46:	603b      	str	r3, [r7, #0]
	return ret;
    9d48:	e027      	b.n	9d9a <submit_to_queue_locked+0xb6>
		ret = 1;
    9d4a:	2601      	movs	r6, #1
    9d4c:	e7eb      	b.n	9d26 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    9d4e:	f000 ff86 	bl	ac5e <k_is_in_isr>
    9d52:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    9d56:	2800      	cmp	r0, #0
    9d58:	d1ee      	bne.n	9d38 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9d5a:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    9d5c:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9d60:	d5ee      	bpl.n	9d40 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
    9d62:	b152      	cbz	r2, 9d7a <submit_to_queue_locked+0x96>
    9d64:	075b      	lsls	r3, r3, #29
    9d66:	d408      	bmi.n	9d7a <submit_to_queue_locked+0x96>
		ret = -EBUSY;
    9d68:	f06f 060f 	mvn.w	r6, #15
    9d6c:	e7ea      	b.n	9d44 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
    9d6e:	2a00      	cmp	r2, #0
    9d70:	d1fa      	bne.n	9d68 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
    9d72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    9d76:	2b00      	cmp	r3, #0
    9d78:	d1f6      	bne.n	9d68 <submit_to_queue_locked+0x84>
	parent->next = child;
    9d7a:	2300      	movs	r3, #0
    9d7c:	6023      	str	r3, [r4, #0]
	return list->tail;
    9d7e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    9d82:	b963      	cbnz	r3, 9d9e <submit_to_queue_locked+0xba>
	list->head = node;
    9d84:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    9d88:	4628      	mov	r0, r5
    9d8a:	f001 f840 	bl	ae0e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    9d8e:	68e3      	ldr	r3, [r4, #12]
    9d90:	f043 0304 	orr.w	r3, r3, #4
    9d94:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    9d96:	683b      	ldr	r3, [r7, #0]
    9d98:	60a3      	str	r3, [r4, #8]
}
    9d9a:	4630      	mov	r0, r6
    9d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    9d9e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9da0:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    9da4:	e7f0      	b.n	9d88 <submit_to_queue_locked+0xa4>
		return -EINVAL;
    9da6:	f06f 0615 	mvn.w	r6, #21
    9daa:	e7cb      	b.n	9d44 <submit_to_queue_locked+0x60>
    9dac:	0000d575 	.word	0x0000d575
    9db0:	0000b53f 	.word	0x0000b53f
    9db4:	0000d53d 	.word	0x0000d53d
    9db8:	20000b58 	.word	0x20000b58

00009dbc <z_work_submit_to_queue>:
{
    9dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
    9dbe:	460c      	mov	r4, r1
{
    9dc0:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
    9dc2:	b959      	cbnz	r1, 9ddc <z_work_submit_to_queue+0x20>
    9dc4:	4921      	ldr	r1, [pc, #132]	; (9e4c <z_work_submit_to_queue+0x90>)
    9dc6:	4822      	ldr	r0, [pc, #136]	; (9e50 <z_work_submit_to_queue+0x94>)
    9dc8:	4a22      	ldr	r2, [pc, #136]	; (9e54 <z_work_submit_to_queue+0x98>)
    9dca:	f44f 73ba 	mov.w	r3, #372	; 0x174
    9dce:	f000 fb7a 	bl	a4c6 <assert_print>
    9dd2:	4820      	ldr	r0, [pc, #128]	; (9e54 <z_work_submit_to_queue+0x98>)
    9dd4:	f44f 71ba 	mov.w	r1, #372	; 0x174
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9dd8:	f000 fb6e 	bl	a4b8 <assert_post_action>
	__asm__ volatile(
    9ddc:	f04f 0320 	mov.w	r3, #32
    9de0:	f3ef 8511 	mrs	r5, BASEPRI
    9de4:	f383 8812 	msr	BASEPRI_MAX, r3
    9de8:	f3bf 8f6f 	isb	sy
    9dec:	481a      	ldr	r0, [pc, #104]	; (9e58 <z_work_submit_to_queue+0x9c>)
    9dee:	f7fd fe45 	bl	7a7c <z_spin_lock_valid>
    9df2:	b960      	cbnz	r0, 9e0e <z_work_submit_to_queue+0x52>
    9df4:	4a19      	ldr	r2, [pc, #100]	; (9e5c <z_work_submit_to_queue+0xa0>)
    9df6:	491a      	ldr	r1, [pc, #104]	; (9e60 <z_work_submit_to_queue+0xa4>)
    9df8:	4815      	ldr	r0, [pc, #84]	; (9e50 <z_work_submit_to_queue+0x94>)
    9dfa:	2394      	movs	r3, #148	; 0x94
    9dfc:	f000 fb63 	bl	a4c6 <assert_print>
    9e00:	4915      	ldr	r1, [pc, #84]	; (9e58 <z_work_submit_to_queue+0x9c>)
    9e02:	4818      	ldr	r0, [pc, #96]	; (9e64 <z_work_submit_to_queue+0xa8>)
    9e04:	f000 fb5f 	bl	a4c6 <assert_print>
    9e08:	2194      	movs	r1, #148	; 0x94
    9e0a:	4814      	ldr	r0, [pc, #80]	; (9e5c <z_work_submit_to_queue+0xa0>)
    9e0c:	e7e4      	b.n	9dd8 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
    9e0e:	4812      	ldr	r0, [pc, #72]	; (9e58 <z_work_submit_to_queue+0x9c>)
    9e10:	f7fd fe52 	bl	7ab8 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
    9e14:	4620      	mov	r0, r4
    9e16:	a901      	add	r1, sp, #4
    9e18:	f7ff ff64 	bl	9ce4 <submit_to_queue_locked>
    9e1c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9e1e:	480e      	ldr	r0, [pc, #56]	; (9e58 <z_work_submit_to_queue+0x9c>)
    9e20:	f7fd fe3a 	bl	7a98 <z_spin_unlock_valid>
    9e24:	b958      	cbnz	r0, 9e3e <z_work_submit_to_queue+0x82>
    9e26:	4a0d      	ldr	r2, [pc, #52]	; (9e5c <z_work_submit_to_queue+0xa0>)
    9e28:	490f      	ldr	r1, [pc, #60]	; (9e68 <z_work_submit_to_queue+0xac>)
    9e2a:	4809      	ldr	r0, [pc, #36]	; (9e50 <z_work_submit_to_queue+0x94>)
    9e2c:	23c2      	movs	r3, #194	; 0xc2
    9e2e:	f000 fb4a 	bl	a4c6 <assert_print>
    9e32:	4909      	ldr	r1, [pc, #36]	; (9e58 <z_work_submit_to_queue+0x9c>)
    9e34:	480d      	ldr	r0, [pc, #52]	; (9e6c <z_work_submit_to_queue+0xb0>)
    9e36:	f000 fb46 	bl	a4c6 <assert_print>
    9e3a:	21c2      	movs	r1, #194	; 0xc2
    9e3c:	e7e5      	b.n	9e0a <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
    9e3e:	f385 8811 	msr	BASEPRI, r5
    9e42:	f3bf 8f6f 	isb	sy
}
    9e46:	4620      	mov	r0, r4
    9e48:	b003      	add	sp, #12
    9e4a:	bd30      	pop	{r4, r5, pc}
    9e4c:	0000d590 	.word	0x0000d590
    9e50:	0000b53f 	.word	0x0000b53f
    9e54:	0000d53d 	.word	0x0000d53d
    9e58:	20000bac 	.word	0x20000bac
    9e5c:	0000b7ed 	.word	0x0000b7ed
    9e60:	0000b846 	.word	0x0000b846
    9e64:	0000b85b 	.word	0x0000b85b
    9e68:	0000b81a 	.word	0x0000b81a
    9e6c:	0000b831 	.word	0x0000b831

00009e70 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    9e70:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e72:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
    9e74:	4604      	mov	r4, r0
{
    9e76:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
    9e78:	b958      	cbnz	r0, 9e92 <k_work_queue_start+0x22>
    9e7a:	492b      	ldr	r1, [pc, #172]	; (9f28 <k_work_queue_start+0xb8>)
    9e7c:	4a2b      	ldr	r2, [pc, #172]	; (9f2c <k_work_queue_start+0xbc>)
    9e7e:	482c      	ldr	r0, [pc, #176]	; (9f30 <k_work_queue_start+0xc0>)
    9e80:	f44f 7332 	mov.w	r3, #712	; 0x2c8
    9e84:	f000 fb1f 	bl	a4c6 <assert_print>
    9e88:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
    9e8c:	4827      	ldr	r0, [pc, #156]	; (9f2c <k_work_queue_start+0xbc>)
    9e8e:	f000 fb13 	bl	a4b8 <assert_post_action>
    9e92:	b949      	cbnz	r1, 9ea8 <k_work_queue_start+0x38>
    9e94:	4927      	ldr	r1, [pc, #156]	; (9f34 <k_work_queue_start+0xc4>)
    9e96:	4a25      	ldr	r2, [pc, #148]	; (9f2c <k_work_queue_start+0xbc>)
    9e98:	4825      	ldr	r0, [pc, #148]	; (9f30 <k_work_queue_start+0xc0>)
    9e9a:	f240 23c9 	movw	r3, #713	; 0x2c9
    9e9e:	f000 fb12 	bl	a4c6 <assert_print>
    9ea2:	f240 21c9 	movw	r1, #713	; 0x2c9
    9ea6:	e7f1      	b.n	9e8c <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
    9ea8:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    9eac:	f010 0001 	ands.w	r0, r0, #1
    9eb0:	d009      	beq.n	9ec6 <k_work_queue_start+0x56>
    9eb2:	4921      	ldr	r1, [pc, #132]	; (9f38 <k_work_queue_start+0xc8>)
    9eb4:	4a1d      	ldr	r2, [pc, #116]	; (9f2c <k_work_queue_start+0xbc>)
    9eb6:	481e      	ldr	r0, [pc, #120]	; (9f30 <k_work_queue_start+0xc0>)
    9eb8:	f240 23ca 	movw	r3, #714	; 0x2ca
    9ebc:	f000 fb03 	bl	a4c6 <assert_print>
    9ec0:	f240 21ca 	movw	r1, #714	; 0x2ca
    9ec4:	e7e2      	b.n	9e8c <k_work_queue_start+0x1c>
	list->tail = NULL;
    9ec6:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
	sys_dlist_init(&w->waitq);
    9eca:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    9ece:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    9ed2:	f104 0090 	add.w	r0, r4, #144	; 0x90
    9ed6:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    9eda:	b31d      	cbz	r5, 9f24 <k_work_queue_start+0xb4>
    9edc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    9ede:	2800      	cmp	r0, #0
    9ee0:	f240 1001 	movw	r0, #257	; 0x101
    9ee4:	bf08      	it	eq
    9ee6:	2001      	moveq	r0, #1
	*flagp = flags;
    9ee8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9eec:	2000      	movs	r0, #0
    9eee:	f04f 36ff 	mov.w	r6, #4294967295
    9ef2:	f04f 37ff 	mov.w	r7, #4294967295
    9ef6:	e9cd 3003 	strd	r3, r0, [sp, #12]
    9efa:	e9cd 0001 	strd	r0, r0, [sp, #4]
    9efe:	e9cd 6706 	strd	r6, r7, [sp, #24]
    9f02:	4b0e      	ldr	r3, [pc, #56]	; (9f3c <k_work_queue_start+0xcc>)
    9f04:	9400      	str	r4, [sp, #0]
    9f06:	4620      	mov	r0, r4
    9f08:	f7fd fcee 	bl	78e8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    9f0c:	b125      	cbz	r5, 9f18 <k_work_queue_start+0xa8>
    9f0e:	6829      	ldr	r1, [r5, #0]
    9f10:	b111      	cbz	r1, 9f18 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
    9f12:	4620      	mov	r0, r4
    9f14:	f000 fea9 	bl	ac6a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    9f18:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    9f1a:	b009      	add	sp, #36	; 0x24
    9f1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9f20:	f000 bea8 	b.w	ac74 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    9f24:	2001      	movs	r0, #1
    9f26:	e7df      	b.n	9ee8 <k_work_queue_start+0x78>
    9f28:	0000d5a4 	.word	0x0000d5a4
    9f2c:	0000d53d 	.word	0x0000d53d
    9f30:	0000b53f 	.word	0x0000b53f
    9f34:	0000d5aa 	.word	0x0000d5aa
    9f38:	0000d5b0 	.word	0x0000d5b0
    9f3c:	00009afd 	.word	0x00009afd

00009f40 <nrf_cc3xx_platform_init_no_rng>:
    9f40:	b510      	push	{r4, lr}
    9f42:	4c0a      	ldr	r4, [pc, #40]	; (9f6c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    9f44:	6823      	ldr	r3, [r4, #0]
    9f46:	b11b      	cbz	r3, 9f50 <nrf_cc3xx_platform_init_no_rng+0x10>
    9f48:	2301      	movs	r3, #1
    9f4a:	6023      	str	r3, [r4, #0]
    9f4c:	2000      	movs	r0, #0
    9f4e:	bd10      	pop	{r4, pc}
    9f50:	f000 f8ea 	bl	a128 <CC_LibInitNoRng>
    9f54:	2800      	cmp	r0, #0
    9f56:	d0f7      	beq.n	9f48 <nrf_cc3xx_platform_init_no_rng+0x8>
    9f58:	3801      	subs	r0, #1
    9f5a:	2806      	cmp	r0, #6
    9f5c:	d803      	bhi.n	9f66 <nrf_cc3xx_platform_init_no_rng+0x26>
    9f5e:	4b04      	ldr	r3, [pc, #16]	; (9f70 <nrf_cc3xx_platform_init_no_rng+0x30>)
    9f60:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    9f64:	bd10      	pop	{r4, pc}
    9f66:	4803      	ldr	r0, [pc, #12]	; (9f74 <nrf_cc3xx_platform_init_no_rng+0x34>)
    9f68:	bd10      	pop	{r4, pc}
    9f6a:	bf00      	nop
    9f6c:	20000bb0 	.word	0x20000bb0
    9f70:	0000b448 	.word	0x0000b448
    9f74:	ffff8ffe 	.word	0xffff8ffe

00009f78 <nrf_cc3xx_platform_abort>:
    9f78:	f3bf 8f4f 	dsb	sy
    9f7c:	4905      	ldr	r1, [pc, #20]	; (9f94 <nrf_cc3xx_platform_abort+0x1c>)
    9f7e:	4b06      	ldr	r3, [pc, #24]	; (9f98 <nrf_cc3xx_platform_abort+0x20>)
    9f80:	68ca      	ldr	r2, [r1, #12]
    9f82:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9f86:	4313      	orrs	r3, r2
    9f88:	60cb      	str	r3, [r1, #12]
    9f8a:	f3bf 8f4f 	dsb	sy
    9f8e:	bf00      	nop
    9f90:	e7fd      	b.n	9f8e <nrf_cc3xx_platform_abort+0x16>
    9f92:	bf00      	nop
    9f94:	e000ed00 	.word	0xe000ed00
    9f98:	05fa0004 	.word	0x05fa0004

00009f9c <CC_PalAbort>:
    9f9c:	b410      	push	{r4}
    9f9e:	4b09      	ldr	r3, [pc, #36]	; (9fc4 <CC_PalAbort+0x28>)
    9fa0:	4909      	ldr	r1, [pc, #36]	; (9fc8 <CC_PalAbort+0x2c>)
    9fa2:	4c0a      	ldr	r4, [pc, #40]	; (9fcc <CC_PalAbort+0x30>)
    9fa4:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    9fa8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    9fac:	6849      	ldr	r1, [r1, #4]
    9fae:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    9fb2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    9fb6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    9fba:	2300      	movs	r3, #0
    9fbc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    9fc0:	bc10      	pop	{r4}
    9fc2:	4708      	bx	r1
    9fc4:	5002b000 	.word	0x5002b000
    9fc8:	20000184 	.word	0x20000184
    9fcc:	5002a000 	.word	0x5002a000

00009fd0 <nrf_cc3xx_platform_set_abort>:
    9fd0:	e9d0 1200 	ldrd	r1, r2, [r0]
    9fd4:	4b01      	ldr	r3, [pc, #4]	; (9fdc <nrf_cc3xx_platform_set_abort+0xc>)
    9fd6:	e9c3 1200 	strd	r1, r2, [r3]
    9fda:	4770      	bx	lr
    9fdc:	20000184 	.word	0x20000184

00009fe0 <mutex_free>:
    9fe0:	b510      	push	{r4, lr}
    9fe2:	4604      	mov	r4, r0
    9fe4:	b150      	cbz	r0, 9ffc <mutex_free+0x1c>
    9fe6:	6863      	ldr	r3, [r4, #4]
    9fe8:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    9fec:	d005      	beq.n	9ffa <mutex_free+0x1a>
    9fee:	4a06      	ldr	r2, [pc, #24]	; (a008 <mutex_free+0x28>)
    9ff0:	4293      	cmp	r3, r2
    9ff2:	d002      	beq.n	9ffa <mutex_free+0x1a>
    9ff4:	2300      	movs	r3, #0
    9ff6:	6023      	str	r3, [r4, #0]
    9ff8:	6062      	str	r2, [r4, #4]
    9ffa:	bd10      	pop	{r4, pc}
    9ffc:	4b03      	ldr	r3, [pc, #12]	; (a00c <mutex_free+0x2c>)
    9ffe:	4804      	ldr	r0, [pc, #16]	; (a010 <mutex_free+0x30>)
    a000:	685b      	ldr	r3, [r3, #4]
    a002:	4798      	blx	r3
    a004:	e7ef      	b.n	9fe6 <mutex_free+0x6>
    a006:	bf00      	nop
    a008:	a95c5f2c 	.word	0xa95c5f2c
    a00c:	20000184 	.word	0x20000184
    a010:	0000b464 	.word	0x0000b464

0000a014 <mutex_lock>:
    a014:	b1c8      	cbz	r0, a04a <mutex_lock+0x36>
    a016:	6843      	ldr	r3, [r0, #4]
    a018:	4a0d      	ldr	r2, [pc, #52]	; (a050 <mutex_lock+0x3c>)
    a01a:	4293      	cmp	r3, r2
    a01c:	d013      	beq.n	a046 <mutex_lock+0x32>
    a01e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    a022:	d00e      	beq.n	a042 <mutex_lock+0x2e>
    a024:	2301      	movs	r3, #1
    a026:	e850 2f00 	ldrex	r2, [r0]
    a02a:	4619      	mov	r1, r3
    a02c:	e840 1c00 	strex	ip, r1, [r0]
    a030:	f09c 0f00 	teq	ip, #0
    a034:	d1f7      	bne.n	a026 <mutex_lock+0x12>
    a036:	2a01      	cmp	r2, #1
    a038:	d0f5      	beq.n	a026 <mutex_lock+0x12>
    a03a:	f3bf 8f5f 	dmb	sy
    a03e:	2000      	movs	r0, #0
    a040:	4770      	bx	lr
    a042:	4804      	ldr	r0, [pc, #16]	; (a054 <mutex_lock+0x40>)
    a044:	4770      	bx	lr
    a046:	4804      	ldr	r0, [pc, #16]	; (a058 <mutex_lock+0x44>)
    a048:	4770      	bx	lr
    a04a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a04e:	4770      	bx	lr
    a050:	a95c5f2c 	.word	0xa95c5f2c
    a054:	ffff8fe9 	.word	0xffff8fe9
    a058:	ffff8fea 	.word	0xffff8fea

0000a05c <mutex_unlock>:
    a05c:	b180      	cbz	r0, a080 <mutex_unlock+0x24>
    a05e:	6843      	ldr	r3, [r0, #4]
    a060:	4a09      	ldr	r2, [pc, #36]	; (a088 <mutex_unlock+0x2c>)
    a062:	4293      	cmp	r3, r2
    a064:	d00a      	beq.n	a07c <mutex_unlock+0x20>
    a066:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    a06a:	d005      	beq.n	a078 <mutex_unlock+0x1c>
    a06c:	f3bf 8f5f 	dmb	sy
    a070:	2300      	movs	r3, #0
    a072:	6003      	str	r3, [r0, #0]
    a074:	4618      	mov	r0, r3
    a076:	4770      	bx	lr
    a078:	4804      	ldr	r0, [pc, #16]	; (a08c <mutex_unlock+0x30>)
    a07a:	4770      	bx	lr
    a07c:	4804      	ldr	r0, [pc, #16]	; (a090 <mutex_unlock+0x34>)
    a07e:	4770      	bx	lr
    a080:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a084:	4770      	bx	lr
    a086:	bf00      	nop
    a088:	a95c5f2c 	.word	0xa95c5f2c
    a08c:	ffff8fe9 	.word	0xffff8fe9
    a090:	ffff8fea 	.word	0xffff8fea

0000a094 <mutex_init>:
    a094:	b510      	push	{r4, lr}
    a096:	4604      	mov	r4, r0
    a098:	b120      	cbz	r0, a0a4 <mutex_init+0x10>
    a09a:	4b04      	ldr	r3, [pc, #16]	; (a0ac <mutex_init+0x18>)
    a09c:	6063      	str	r3, [r4, #4]
    a09e:	2200      	movs	r2, #0
    a0a0:	6022      	str	r2, [r4, #0]
    a0a2:	bd10      	pop	{r4, pc}
    a0a4:	4802      	ldr	r0, [pc, #8]	; (a0b0 <mutex_init+0x1c>)
    a0a6:	f7ff ff79 	bl	9f9c <CC_PalAbort>
    a0aa:	e7f6      	b.n	a09a <mutex_init+0x6>
    a0ac:	3a00003a 	.word	0x3a00003a
    a0b0:	0000b48c 	.word	0x0000b48c

0000a0b4 <nrf_cc3xx_platform_set_mutexes>:
    a0b4:	b570      	push	{r4, r5, r6, lr}
    a0b6:	e9d0 2300 	ldrd	r2, r3, [r0]
    a0ba:	4c17      	ldr	r4, [pc, #92]	; (a118 <nrf_cc3xx_platform_set_mutexes+0x64>)
    a0bc:	4d17      	ldr	r5, [pc, #92]	; (a11c <nrf_cc3xx_platform_set_mutexes+0x68>)
    a0be:	6063      	str	r3, [r4, #4]
    a0c0:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    a0c4:	e9c4 3002 	strd	r3, r0, [r4, #8]
    a0c8:	6022      	str	r2, [r4, #0]
    a0ca:	6848      	ldr	r0, [r1, #4]
    a0cc:	f8d1 c000 	ldr.w	ip, [r1]
    a0d0:	4b13      	ldr	r3, [pc, #76]	; (a120 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    a0d2:	e9c3 c000 	strd	ip, r0, [r3]
    a0d6:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
    a0da:	f8d1 c008 	ldr.w	ip, [r1, #8]
    a0de:	f8c3 c008 	str.w	ip, [r3, #8]
    a0e2:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
    a0e6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    a0ea:	6909      	ldr	r1, [r1, #16]
    a0ec:	f8c3 c00c 	str.w	ip, [r3, #12]
    a0f0:	6119      	str	r1, [r3, #16]
    a0f2:	d010      	beq.n	a116 <nrf_cc3xx_platform_set_mutexes+0x62>
    a0f4:	490b      	ldr	r1, [pc, #44]	; (a124 <nrf_cc3xx_platform_set_mutexes+0x70>)
    a0f6:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    a0fa:	2300      	movs	r3, #0
    a0fc:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    a100:	f505 708a 	add.w	r0, r5, #276	; 0x114
    a104:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    a108:	4790      	blx	r2
    a10a:	6823      	ldr	r3, [r4, #0]
    a10c:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    a110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a114:	4718      	bx	r3
    a116:	bd70      	pop	{r4, r5, r6, pc}
    a118:	200001a0 	.word	0x200001a0
    a11c:	20000bc8 	.word	0x20000bc8
    a120:	2000018c 	.word	0x2000018c
    a124:	a95c5f2c 	.word	0xa95c5f2c

0000a128 <CC_LibInitNoRng>:
    a128:	b538      	push	{r3, r4, r5, lr}
    a12a:	f000 f82f 	bl	a18c <CC_HalInit>
    a12e:	b120      	cbz	r0, a13a <CC_LibInitNoRng+0x12>
    a130:	2403      	movs	r4, #3
    a132:	f000 f863 	bl	a1fc <CC_PalTerminate>
    a136:	4620      	mov	r0, r4
    a138:	bd38      	pop	{r3, r4, r5, pc}
    a13a:	f000 f831 	bl	a1a0 <CC_PalInit>
    a13e:	b998      	cbnz	r0, a168 <CC_LibInitNoRng+0x40>
    a140:	f000 f8ac 	bl	a29c <CC_PalPowerSaveModeSelect>
    a144:	b998      	cbnz	r0, a16e <CC_LibInitNoRng+0x46>
    a146:	4d0f      	ldr	r5, [pc, #60]	; (a184 <CC_LibInitNoRng+0x5c>)
    a148:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    a14c:	0e1b      	lsrs	r3, r3, #24
    a14e:	2bf0      	cmp	r3, #240	; 0xf0
    a150:	d108      	bne.n	a164 <CC_LibInitNoRng+0x3c>
    a152:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    a156:	4b0c      	ldr	r3, [pc, #48]	; (a188 <CC_LibInitNoRng+0x60>)
    a158:	429a      	cmp	r2, r3
    a15a:	d00a      	beq.n	a172 <CC_LibInitNoRng+0x4a>
    a15c:	2407      	movs	r4, #7
    a15e:	f000 f817 	bl	a190 <CC_HalTerminate>
    a162:	e7e6      	b.n	a132 <CC_LibInitNoRng+0xa>
    a164:	2406      	movs	r4, #6
    a166:	e7fa      	b.n	a15e <CC_LibInitNoRng+0x36>
    a168:	2404      	movs	r4, #4
    a16a:	4620      	mov	r0, r4
    a16c:	bd38      	pop	{r3, r4, r5, pc}
    a16e:	2400      	movs	r4, #0
    a170:	e7f5      	b.n	a15e <CC_LibInitNoRng+0x36>
    a172:	2001      	movs	r0, #1
    a174:	f000 f892 	bl	a29c <CC_PalPowerSaveModeSelect>
    a178:	4604      	mov	r4, r0
    a17a:	2800      	cmp	r0, #0
    a17c:	d1f7      	bne.n	a16e <CC_LibInitNoRng+0x46>
    a17e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    a182:	e7d8      	b.n	a136 <CC_LibInitNoRng+0xe>
    a184:	5002b000 	.word	0x5002b000
    a188:	20e00000 	.word	0x20e00000

0000a18c <CC_HalInit>:
    a18c:	2000      	movs	r0, #0
    a18e:	4770      	bx	lr

0000a190 <CC_HalTerminate>:
    a190:	2000      	movs	r0, #0
    a192:	4770      	bx	lr

0000a194 <CC_HalMaskInterrupt>:
    a194:	4b01      	ldr	r3, [pc, #4]	; (a19c <CC_HalMaskInterrupt+0x8>)
    a196:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    a19a:	4770      	bx	lr
    a19c:	5002b000 	.word	0x5002b000

0000a1a0 <CC_PalInit>:
    a1a0:	b510      	push	{r4, lr}
    a1a2:	4811      	ldr	r0, [pc, #68]	; (a1e8 <CC_PalInit+0x48>)
    a1a4:	f000 f848 	bl	a238 <CC_PalMutexCreate>
    a1a8:	b100      	cbz	r0, a1ac <CC_PalInit+0xc>
    a1aa:	bd10      	pop	{r4, pc}
    a1ac:	480f      	ldr	r0, [pc, #60]	; (a1ec <CC_PalInit+0x4c>)
    a1ae:	f000 f843 	bl	a238 <CC_PalMutexCreate>
    a1b2:	2800      	cmp	r0, #0
    a1b4:	d1f9      	bne.n	a1aa <CC_PalInit+0xa>
    a1b6:	4c0e      	ldr	r4, [pc, #56]	; (a1f0 <CC_PalInit+0x50>)
    a1b8:	4620      	mov	r0, r4
    a1ba:	f000 f83d 	bl	a238 <CC_PalMutexCreate>
    a1be:	2800      	cmp	r0, #0
    a1c0:	d1f3      	bne.n	a1aa <CC_PalInit+0xa>
    a1c2:	4b0c      	ldr	r3, [pc, #48]	; (a1f4 <CC_PalInit+0x54>)
    a1c4:	480c      	ldr	r0, [pc, #48]	; (a1f8 <CC_PalInit+0x58>)
    a1c6:	601c      	str	r4, [r3, #0]
    a1c8:	f000 f836 	bl	a238 <CC_PalMutexCreate>
    a1cc:	4601      	mov	r1, r0
    a1ce:	2800      	cmp	r0, #0
    a1d0:	d1eb      	bne.n	a1aa <CC_PalInit+0xa>
    a1d2:	f000 f82d 	bl	a230 <CC_PalDmaInit>
    a1d6:	4604      	mov	r4, r0
    a1d8:	b108      	cbz	r0, a1de <CC_PalInit+0x3e>
    a1da:	4620      	mov	r0, r4
    a1dc:	bd10      	pop	{r4, pc}
    a1de:	f000 f83f 	bl	a260 <CC_PalPowerSaveModeInit>
    a1e2:	4620      	mov	r0, r4
    a1e4:	e7fa      	b.n	a1dc <CC_PalInit+0x3c>
    a1e6:	bf00      	nop
    a1e8:	200001e0 	.word	0x200001e0
    a1ec:	200001dc 	.word	0x200001dc
    a1f0:	200001d8 	.word	0x200001d8
    a1f4:	200001d0 	.word	0x200001d0
    a1f8:	200001d4 	.word	0x200001d4

0000a1fc <CC_PalTerminate>:
    a1fc:	b508      	push	{r3, lr}
    a1fe:	4808      	ldr	r0, [pc, #32]	; (a220 <CC_PalTerminate+0x24>)
    a200:	f000 f824 	bl	a24c <CC_PalMutexDestroy>
    a204:	4807      	ldr	r0, [pc, #28]	; (a224 <CC_PalTerminate+0x28>)
    a206:	f000 f821 	bl	a24c <CC_PalMutexDestroy>
    a20a:	4807      	ldr	r0, [pc, #28]	; (a228 <CC_PalTerminate+0x2c>)
    a20c:	f000 f81e 	bl	a24c <CC_PalMutexDestroy>
    a210:	4806      	ldr	r0, [pc, #24]	; (a22c <CC_PalTerminate+0x30>)
    a212:	f000 f81b 	bl	a24c <CC_PalMutexDestroy>
    a216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    a21a:	f000 b80b 	b.w	a234 <CC_PalDmaTerminate>
    a21e:	bf00      	nop
    a220:	200001e0 	.word	0x200001e0
    a224:	200001dc 	.word	0x200001dc
    a228:	200001d8 	.word	0x200001d8
    a22c:	200001d4 	.word	0x200001d4

0000a230 <CC_PalDmaInit>:
    a230:	2000      	movs	r0, #0
    a232:	4770      	bx	lr

0000a234 <CC_PalDmaTerminate>:
    a234:	4770      	bx	lr
    a236:	bf00      	nop

0000a238 <CC_PalMutexCreate>:
    a238:	b508      	push	{r3, lr}
    a23a:	4b03      	ldr	r3, [pc, #12]	; (a248 <CC_PalMutexCreate+0x10>)
    a23c:	6802      	ldr	r2, [r0, #0]
    a23e:	681b      	ldr	r3, [r3, #0]
    a240:	6810      	ldr	r0, [r2, #0]
    a242:	4798      	blx	r3
    a244:	2000      	movs	r0, #0
    a246:	bd08      	pop	{r3, pc}
    a248:	200001a0 	.word	0x200001a0

0000a24c <CC_PalMutexDestroy>:
    a24c:	b508      	push	{r3, lr}
    a24e:	4b03      	ldr	r3, [pc, #12]	; (a25c <CC_PalMutexDestroy+0x10>)
    a250:	6802      	ldr	r2, [r0, #0]
    a252:	685b      	ldr	r3, [r3, #4]
    a254:	6810      	ldr	r0, [r2, #0]
    a256:	4798      	blx	r3
    a258:	2000      	movs	r0, #0
    a25a:	bd08      	pop	{r3, pc}
    a25c:	200001a0 	.word	0x200001a0

0000a260 <CC_PalPowerSaveModeInit>:
    a260:	b570      	push	{r4, r5, r6, lr}
    a262:	4c09      	ldr	r4, [pc, #36]	; (a288 <CC_PalPowerSaveModeInit+0x28>)
    a264:	4d09      	ldr	r5, [pc, #36]	; (a28c <CC_PalPowerSaveModeInit+0x2c>)
    a266:	6920      	ldr	r0, [r4, #16]
    a268:	68ab      	ldr	r3, [r5, #8]
    a26a:	4798      	blx	r3
    a26c:	b118      	cbz	r0, a276 <CC_PalPowerSaveModeInit+0x16>
    a26e:	4b08      	ldr	r3, [pc, #32]	; (a290 <CC_PalPowerSaveModeInit+0x30>)
    a270:	4808      	ldr	r0, [pc, #32]	; (a294 <CC_PalPowerSaveModeInit+0x34>)
    a272:	685b      	ldr	r3, [r3, #4]
    a274:	4798      	blx	r3
    a276:	4a08      	ldr	r2, [pc, #32]	; (a298 <CC_PalPowerSaveModeInit+0x38>)
    a278:	68eb      	ldr	r3, [r5, #12]
    a27a:	6920      	ldr	r0, [r4, #16]
    a27c:	2100      	movs	r1, #0
    a27e:	6011      	str	r1, [r2, #0]
    a280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a284:	4718      	bx	r3
    a286:	bf00      	nop
    a288:	2000018c 	.word	0x2000018c
    a28c:	200001a0 	.word	0x200001a0
    a290:	20000184 	.word	0x20000184
    a294:	0000b4b0 	.word	0x0000b4b0
    a298:	20000bc4 	.word	0x20000bc4

0000a29c <CC_PalPowerSaveModeSelect>:
    a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a29e:	4d1a      	ldr	r5, [pc, #104]	; (a308 <CC_PalPowerSaveModeSelect+0x6c>)
    a2a0:	4e1a      	ldr	r6, [pc, #104]	; (a30c <CC_PalPowerSaveModeSelect+0x70>)
    a2a2:	4604      	mov	r4, r0
    a2a4:	68b2      	ldr	r2, [r6, #8]
    a2a6:	6928      	ldr	r0, [r5, #16]
    a2a8:	4790      	blx	r2
    a2aa:	b9e8      	cbnz	r0, a2e8 <CC_PalPowerSaveModeSelect+0x4c>
    a2ac:	4f18      	ldr	r7, [pc, #96]	; (a310 <CC_PalPowerSaveModeSelect+0x74>)
    a2ae:	683b      	ldr	r3, [r7, #0]
    a2b0:	b14c      	cbz	r4, a2c6 <CC_PalPowerSaveModeSelect+0x2a>
    a2b2:	b1a3      	cbz	r3, a2de <CC_PalPowerSaveModeSelect+0x42>
    a2b4:	2b01      	cmp	r3, #1
    a2b6:	d019      	beq.n	a2ec <CC_PalPowerSaveModeSelect+0x50>
    a2b8:	3b01      	subs	r3, #1
    a2ba:	603b      	str	r3, [r7, #0]
    a2bc:	6928      	ldr	r0, [r5, #16]
    a2be:	68f3      	ldr	r3, [r6, #12]
    a2c0:	4798      	blx	r3
    a2c2:	2000      	movs	r0, #0
    a2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2c6:	b943      	cbnz	r3, a2da <CC_PalPowerSaveModeSelect+0x3e>
    a2c8:	4a12      	ldr	r2, [pc, #72]	; (a314 <CC_PalPowerSaveModeSelect+0x78>)
    a2ca:	2101      	movs	r1, #1
    a2cc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    a2d0:	4911      	ldr	r1, [pc, #68]	; (a318 <CC_PalPowerSaveModeSelect+0x7c>)
    a2d2:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    a2d6:	2a00      	cmp	r2, #0
    a2d8:	d1fb      	bne.n	a2d2 <CC_PalPowerSaveModeSelect+0x36>
    a2da:	3301      	adds	r3, #1
    a2dc:	603b      	str	r3, [r7, #0]
    a2de:	68f3      	ldr	r3, [r6, #12]
    a2e0:	6928      	ldr	r0, [r5, #16]
    a2e2:	4798      	blx	r3
    a2e4:	2000      	movs	r0, #0
    a2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2e8:	480c      	ldr	r0, [pc, #48]	; (a31c <CC_PalPowerSaveModeSelect+0x80>)
    a2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2ec:	4a0a      	ldr	r2, [pc, #40]	; (a318 <CC_PalPowerSaveModeSelect+0x7c>)
    a2ee:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    a2f2:	2b00      	cmp	r3, #0
    a2f4:	d1fb      	bne.n	a2ee <CC_PalPowerSaveModeSelect+0x52>
    a2f6:	4a07      	ldr	r2, [pc, #28]	; (a314 <CC_PalPowerSaveModeSelect+0x78>)
    a2f8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    a2fc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    a300:	f7ff ff48 	bl	a194 <CC_HalMaskInterrupt>
    a304:	683b      	ldr	r3, [r7, #0]
    a306:	e7d7      	b.n	a2b8 <CC_PalPowerSaveModeSelect+0x1c>
    a308:	2000018c 	.word	0x2000018c
    a30c:	200001a0 	.word	0x200001a0
    a310:	20000bc4 	.word	0x20000bc4
    a314:	5002a000 	.word	0x5002a000
    a318:	5002b000 	.word	0x5002b000
    a31c:	ffff8fe9 	.word	0xffff8fe9

0000a320 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
    a320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a324:	4606      	mov	r6, r0
    a326:	460d      	mov	r5, r1
    a328:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    a32a:	4698      	mov	r8, r3
    a32c:	b32b      	cbz	r3, a37a <cbpprintf_external+0x5a>
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = hdr->hdr.desc.len * sizeof(int);
    a32e:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    a332:	f893 9001 	ldrb.w	r9, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    a336:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    a338:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    a33a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    a33e:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    a342:	441c      	add	r4, r3
    a344:	4444      	add	r4, r8

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    a346:	f04f 0a00 	mov.w	sl, #0
    a34a:	45ca      	cmp	sl, r9
    a34c:	d309      	bcc.n	a362 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    a34e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    a352:	f108 0308 	add.w	r3, r8, #8
    a356:	4639      	mov	r1, r7
    a358:	4630      	mov	r0, r6
    a35a:	46ac      	mov	ip, r5
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
    a35c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    a360:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    a362:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    a366:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    a36a:	4620      	mov	r0, r4
    a36c:	f7f6 fed6 	bl	111c <strlen>
    a370:	3001      	adds	r0, #1
    a372:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    a374:	f10a 0a01 	add.w	sl, sl, #1
    a378:	e7e7      	b.n	a34a <cbpprintf_external+0x2a>
}
    a37a:	f06f 0015 	mvn.w	r0, #21
    a37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000a382 <arch_printk_char_out>:
}
    a382:	2000      	movs	r0, #0
    a384:	4770      	bx	lr

0000a386 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    a386:	f000 b8c4 	b.w	a512 <z_log_vprintk>

0000a38a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    a38a:	b40f      	push	{r0, r1, r2, r3}
    a38c:	b507      	push	{r0, r1, r2, lr}
    a38e:	a904      	add	r1, sp, #16
    a390:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    a394:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    a396:	f000 f8bc 	bl	a512 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    a39a:	b003      	add	sp, #12
    a39c:	f85d eb04 	ldr.w	lr, [sp], #4
    a3a0:	b004      	add	sp, #16
    a3a2:	4770      	bx	lr

0000a3a4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    a3a4:	4604      	mov	r4, r0
    a3a6:	b508      	push	{r3, lr}
    a3a8:	4608      	mov	r0, r1
    a3aa:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    a3ac:	461a      	mov	r2, r3
    a3ae:	47a0      	blx	r4
	return z_impl_z_current_get();
    a3b0:	f7fe fe5c 	bl	906c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    a3b4:	f7f9 fd9e 	bl	3ef4 <z_impl_k_thread_abort>

0000a3b8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a3b8:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    a3ba:	f013 0307 	ands.w	r3, r3, #7
    a3be:	d105      	bne.n	a3cc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    a3c0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    a3c2:	2b00      	cmp	r3, #0
    a3c4:	bf0c      	ite	eq
    a3c6:	2000      	moveq	r0, #0
    a3c8:	2003      	movne	r0, #3
    a3ca:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    a3cc:	2b02      	cmp	r3, #2
    a3ce:	d105      	bne.n	a3dc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    a3d0:	8bc0      	ldrh	r0, [r0, #30]
    a3d2:	fab0 f080 	clz	r0, r0
    a3d6:	0940      	lsrs	r0, r0, #5
    a3d8:	0080      	lsls	r0, r0, #2
    a3da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    a3dc:	2b01      	cmp	r3, #1
    a3de:	d105      	bne.n	a3ec <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    a3e0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    a3e2:	2b00      	cmp	r3, #0
    a3e4:	bf0c      	ite	eq
    a3e6:	2000      	moveq	r0, #0
    a3e8:	2005      	movne	r0, #5
    a3ea:	4770      	bx	lr
	int evt = EVT_NOP;
    a3ec:	2000      	movs	r0, #0
}
    a3ee:	4770      	bx	lr

0000a3f0 <validate_args>:
{
    a3f0:	b510      	push	{r4, lr}
    a3f2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    a3f4:	b100      	cbz	r0, a3f8 <validate_args+0x8>
    a3f6:	b911      	cbnz	r1, a3fe <validate_args+0xe>
		return -EINVAL;
    a3f8:	f06f 0015 	mvn.w	r0, #21
}
    a3fc:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    a3fe:	1d08      	adds	r0, r1, #4
    a400:	f000 f82f 	bl	a462 <sys_notify_validate>
	if ((rv == 0)
    a404:	2800      	cmp	r0, #0
    a406:	d1f9      	bne.n	a3fc <validate_args+0xc>
	    && ((cli->notify.flags
    a408:	68a3      	ldr	r3, [r4, #8]
    a40a:	2b03      	cmp	r3, #3
    a40c:	d9f6      	bls.n	a3fc <validate_args+0xc>
    a40e:	e7f3      	b.n	a3f8 <validate_args+0x8>

0000a410 <notify_one>:
{
    a410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a414:	460d      	mov	r5, r1
    a416:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a418:	4619      	mov	r1, r3
    a41a:	1d28      	adds	r0, r5, #4
{
    a41c:	4690      	mov	r8, r2
    a41e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a420:	f7f7 fcc8 	bl	1db4 <sys_notify_finalize>
	if (cb) {
    a424:	4604      	mov	r4, r0
    a426:	b138      	cbz	r0, a438 <notify_one+0x28>
		cb(mgr, cli, state, res);
    a428:	4633      	mov	r3, r6
    a42a:	4642      	mov	r2, r8
    a42c:	4629      	mov	r1, r5
    a42e:	4638      	mov	r0, r7
    a430:	46a4      	mov	ip, r4
}
    a432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    a436:	4760      	bx	ip
}
    a438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a43c <onoff_manager_init>:
{
    a43c:	b538      	push	{r3, r4, r5, lr}
    a43e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    a440:	4605      	mov	r5, r0
    a442:	b158      	cbz	r0, a45c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    a444:	b151      	cbz	r1, a45c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    a446:	680b      	ldr	r3, [r1, #0]
    a448:	b143      	cbz	r3, a45c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    a44a:	684b      	ldr	r3, [r1, #4]
    a44c:	b133      	cbz	r3, a45c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    a44e:	2220      	movs	r2, #32
    a450:	2100      	movs	r1, #0
    a452:	f000 fcf2 	bl	ae3a <memset>
    a456:	612c      	str	r4, [r5, #16]
	return 0;
    a458:	2000      	movs	r0, #0
}
    a45a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    a45c:	f06f 0015 	mvn.w	r0, #21
    a460:	e7fb      	b.n	a45a <onoff_manager_init+0x1e>

0000a462 <sys_notify_validate>:
	if (notify == NULL) {
    a462:	4603      	mov	r3, r0
    a464:	b140      	cbz	r0, a478 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a466:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    a468:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    a46c:	2a02      	cmp	r2, #2
    a46e:	d006      	beq.n	a47e <sys_notify_validate+0x1c>
    a470:	2a03      	cmp	r2, #3
    a472:	d004      	beq.n	a47e <sys_notify_validate+0x1c>
    a474:	2a01      	cmp	r2, #1
    a476:	d005      	beq.n	a484 <sys_notify_validate+0x22>
    a478:	f06f 0015 	mvn.w	r0, #21
}
    a47c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    a47e:	681a      	ldr	r2, [r3, #0]
    a480:	2a00      	cmp	r2, #0
    a482:	d0f9      	beq.n	a478 <sys_notify_validate+0x16>
		notify->result = 0;
    a484:	2000      	movs	r0, #0
    a486:	6098      	str	r0, [r3, #8]
    a488:	4770      	bx	lr

0000a48a <outs>:
{
    a48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a48e:	4607      	mov	r7, r0
    a490:	4688      	mov	r8, r1
    a492:	4615      	mov	r5, r2
    a494:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a496:	4614      	mov	r4, r2
    a498:	42b4      	cmp	r4, r6
    a49a:	d305      	bcc.n	a4a8 <outs+0x1e>
    a49c:	b10e      	cbz	r6, a4a2 <outs+0x18>
	return (int)count;
    a49e:	1b60      	subs	r0, r4, r5
    a4a0:	e008      	b.n	a4b4 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a4a2:	7823      	ldrb	r3, [r4, #0]
    a4a4:	2b00      	cmp	r3, #0
    a4a6:	d0fa      	beq.n	a49e <outs+0x14>
		int rc = out((int)*sp++, ctx);
    a4a8:	f814 0b01 	ldrb.w	r0, [r4], #1
    a4ac:	4641      	mov	r1, r8
    a4ae:	47b8      	blx	r7
		if (rc < 0) {
    a4b0:	2800      	cmp	r0, #0
    a4b2:	daf1      	bge.n	a498 <outs+0xe>
}
    a4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a4b8 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    a4b8:	4040      	eors	r0, r0
    a4ba:	f380 8811 	msr	BASEPRI, r0
    a4be:	f04f 0004 	mov.w	r0, #4
    a4c2:	df02      	svc	2
}
    a4c4:	4770      	bx	lr

0000a4c6 <assert_print>:

void assert_print(const char *fmt, ...)
{
    a4c6:	b40f      	push	{r0, r1, r2, r3}
    a4c8:	b507      	push	{r0, r1, r2, lr}
    a4ca:	a904      	add	r1, sp, #16
    a4cc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    a4d0:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    a4d2:	f7ff ff58 	bl	a386 <vprintk>

	va_end(ap);
}
    a4d6:	b003      	add	sp, #12
    a4d8:	f85d eb04 	ldr.w	lr, [sp], #4
    a4dc:	b004      	add	sp, #16
    a4de:	4770      	bx	lr

0000a4e0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    a4e0:	4770      	bx	lr

0000a4e2 <dummy_timestamp>:
}
    a4e2:	2000      	movs	r0, #0
    a4e4:	4770      	bx	lr

0000a4e6 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a4e6:	f000 babf 	b.w	aa68 <sys_clock_cycle_get_32>

0000a4ea <atomic_inc>:
{
    a4ea:	4603      	mov	r3, r0
}
    a4ec:	f3bf 8f5b 	dmb	ish
    a4f0:	e853 0f00 	ldrex	r0, [r3]
    a4f4:	1c42      	adds	r2, r0, #1
    a4f6:	e843 2100 	strex	r1, r2, [r3]
    a4fa:	2900      	cmp	r1, #0
    a4fc:	d1f8      	bne.n	a4f0 <atomic_inc+0x6>
    a4fe:	f3bf 8f5b 	dmb	ish
    a502:	4770      	bx	lr

0000a504 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    a504:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
    a506:	2100      	movs	r1, #0
    a508:	4608      	mov	r0, r1
    a50a:	f7f8 f8a5 	bl	2658 <z_log_init.isra.0>
	}

	return 0;
}
    a50e:	2000      	movs	r0, #0
    a510:	bd08      	pop	{r3, pc}

0000a512 <z_log_vprintk>:
{
    a512:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a514:	2300      	movs	r3, #0
    a516:	e9cd 0102 	strd	r0, r1, [sp, #8]
    a51a:	e9cd 3300 	strd	r3, r3, [sp]
    a51e:	461a      	mov	r2, r3
    a520:	4619      	mov	r1, r3
    a522:	4618      	mov	r0, r3
    a524:	f7f8 fa0a 	bl	293c <z_impl_z_log_msg_runtime_vcreate>
}
    a528:	b005      	add	sp, #20
    a52a:	f85d fb04 	ldr.w	pc, [sp], #4

0000a52e <z_log_notify_backend_enabled>:
}
    a52e:	4770      	bx	lr

0000a530 <z_log_get_tag>:
}
    a530:	2000      	movs	r0, #0
    a532:	4770      	bx	lr

0000a534 <z_log_msg_finalize>:
{
    a534:	b570      	push	{r4, r5, r6, lr}
    a536:	460e      	mov	r6, r1
    a538:	4615      	mov	r5, r2
    a53a:	4619      	mov	r1, r3
    a53c:	0d12      	lsrs	r2, r2, #20
	if (!msg) {
    a53e:	4604      	mov	r4, r0
    a540:	b918      	cbnz	r0, a54a <z_log_msg_finalize+0x16>
}
    a542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    a546:	f7f8 b979 	b.w	283c <z_log_dropped>
	if (data) {
    a54a:	b12b      	cbz	r3, a558 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    a54c:	3010      	adds	r0, #16
    a54e:	f3c5 234a 	ubfx	r3, r5, #9, #11
    a552:	4418      	add	r0, r3
    a554:	f000 fc63 	bl	ae1e <memcpy>
	msg->hdr.source = source;
    a558:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    a55c:	4620      	mov	r0, r4
}
    a55e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    a562:	f7f8 b983 	b.w	286c <z_log_msg_commit>

0000a566 <out_func>:
{
    a566:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    a568:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    a56c:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    a570:	6852      	ldr	r2, [r2, #4]
    a572:	2101      	movs	r1, #1
    a574:	f10d 0007 	add.w	r0, sp, #7
    a578:	4798      	blx	r3
}
    a57a:	2000      	movs	r0, #0
    a57c:	b003      	add	sp, #12
    a57e:	f85d fb04 	ldr.w	pc, [sp], #4

0000a582 <cr_out_func>:
	if (c == '\n') {
    a582:	280a      	cmp	r0, #10
{
    a584:	b538      	push	{r3, r4, r5, lr}
    a586:	4604      	mov	r4, r0
    a588:	460d      	mov	r5, r1
	if (c == '\n') {
    a58a:	d102      	bne.n	a592 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    a58c:	200d      	movs	r0, #13
    a58e:	f7ff ffea 	bl	a566 <out_func>
	out_func(c, ctx);
    a592:	4629      	mov	r1, r5
    a594:	4620      	mov	r0, r4
    a596:	f7ff ffe6 	bl	a566 <out_func>
}
    a59a:	2000      	movs	r0, #0
    a59c:	bd38      	pop	{r3, r4, r5, pc}

0000a59e <buffer_write>:
{
    a59e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5a0:	4606      	mov	r6, r0
    a5a2:	460d      	mov	r5, r1
    a5a4:	4614      	mov	r4, r2
    a5a6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    a5a8:	4621      	mov	r1, r4
    a5aa:	4628      	mov	r0, r5
    a5ac:	463a      	mov	r2, r7
    a5ae:	47b0      	blx	r6
	} while (len != 0);
    a5b0:	1a24      	subs	r4, r4, r0
		buf += processed;
    a5b2:	4405      	add	r5, r0
	} while (len != 0);
    a5b4:	d1f8      	bne.n	a5a8 <buffer_write+0xa>
}
    a5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a5b8 <cbvprintf>:
{
    a5b8:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    a5ba:	2400      	movs	r4, #0
    a5bc:	9400      	str	r4, [sp, #0]
    a5be:	f7f7 fc87 	bl	1ed0 <z_cbvprintf_impl>
}
    a5c2:	b002      	add	sp, #8
    a5c4:	bd10      	pop	{r4, pc}

0000a5c6 <log_output_flush>:
{
    a5c6:	b510      	push	{r4, lr}
		     output->control_block->offset,
    a5c8:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    a5ca:	6881      	ldr	r1, [r0, #8]
{
    a5cc:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    a5ce:	e9d2 2300 	ldrd	r2, r3, [r2]
    a5d2:	6800      	ldr	r0, [r0, #0]
    a5d4:	f7ff ffe3 	bl	a59e <buffer_write>
	output->control_block->offset = 0;
    a5d8:	6863      	ldr	r3, [r4, #4]
    a5da:	2200      	movs	r2, #0
    a5dc:	601a      	str	r2, [r3, #0]
}
    a5de:	bd10      	pop	{r4, pc}

0000a5e0 <abort_function>:
{
    a5e0:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    a5e2:	2000      	movs	r0, #0
    a5e4:	f7f8 f81e 	bl	2624 <sys_reboot>

0000a5e8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    a5e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    a5ea:	ab0b      	add	r3, sp, #44	; 0x2c
    a5ec:	9305      	str	r3, [sp, #20]
    a5ee:	9303      	str	r3, [sp, #12]
    a5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a5f2:	9302      	str	r3, [sp, #8]
    a5f4:	2300      	movs	r3, #0
    a5f6:	e9cd 3300 	strd	r3, r3, [sp]
    a5fa:	2201      	movs	r2, #1
    a5fc:	4618      	mov	r0, r3
    a5fe:	f7f8 f99d 	bl	293c <z_impl_z_log_msg_runtime_vcreate>
}
    a602:	b007      	add	sp, #28
    a604:	f85d fb04 	ldr.w	pc, [sp], #4

0000a608 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    a608:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    a60a:	6800      	ldr	r0, [r0, #0]
    a60c:	f7f8 bf1e 	b.w	344c <z_arm_fatal_error>

0000a610 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    a610:	2100      	movs	r1, #0
    a612:	2001      	movs	r0, #1
    a614:	f7f8 bf1a 	b.w	344c <z_arm_fatal_error>

0000a618 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    a618:	b508      	push	{r3, lr}
	handler();
    a61a:	f7f8 ffcb 	bl	35b4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    a61e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    a622:	f7f9 b8a3 	b.w	376c <z_arm_exc_exit>

0000a626 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    a626:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    a628:	ab0b      	add	r3, sp, #44	; 0x2c
    a62a:	9305      	str	r3, [sp, #20]
    a62c:	9303      	str	r3, [sp, #12]
    a62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a630:	9302      	str	r3, [sp, #8]
    a632:	2300      	movs	r3, #0
    a634:	e9cd 3300 	strd	r3, r3, [sp]
    a638:	2201      	movs	r2, #1
    a63a:	4618      	mov	r0, r3
    a63c:	f7f8 f97e 	bl	293c <z_impl_z_log_msg_runtime_vcreate>
}
    a640:	b007      	add	sp, #28
    a642:	f85d fb04 	ldr.w	pc, [sp], #4

0000a646 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    a646:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    a648:	ab0b      	add	r3, sp, #44	; 0x2c
    a64a:	9305      	str	r3, [sp, #20]
    a64c:	9303      	str	r3, [sp, #12]
    a64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a650:	9302      	str	r3, [sp, #8]
    a652:	2300      	movs	r3, #0
    a654:	e9cd 3300 	strd	r3, r3, [sp]
    a658:	2201      	movs	r2, #1
    a65a:	4618      	mov	r0, r3
    a65c:	f7f8 f96e 	bl	293c <z_impl_z_log_msg_runtime_vcreate>
}
    a660:	b007      	add	sp, #28
    a662:	f85d fb04 	ldr.w	pc, [sp], #4

0000a666 <_stdout_hook_default>:
}
    a666:	f04f 30ff 	mov.w	r0, #4294967295
    a66a:	4770      	bx	lr

0000a66c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    a66c:	2806      	cmp	r0, #6
    a66e:	d108      	bne.n	a682 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    a670:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a674:	2201      	movs	r2, #1
    a676:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    a67a:	f3bf 8f4f 	dsb	sy
        __WFE();
    a67e:	bf20      	wfe
    while (true)
    a680:	e7fd      	b.n	a67e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    a682:	4770      	bx	lr

0000a684 <pm_state_exit_post_ops>:
    a684:	2300      	movs	r3, #0
    a686:	f383 8811 	msr	BASEPRI, r3
    a68a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    a68e:	4770      	bx	lr

0000a690 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    a690:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    a692:	ab0b      	add	r3, sp, #44	; 0x2c
    a694:	9305      	str	r3, [sp, #20]
    a696:	9303      	str	r3, [sp, #12]
    a698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a69a:	9302      	str	r3, [sp, #8]
    a69c:	2300      	movs	r3, #0
    a69e:	e9cd 3300 	strd	r3, r3, [sp]
    a6a2:	2201      	movs	r2, #1
    a6a4:	4618      	mov	r0, r3
    a6a6:	f7f8 f949 	bl	293c <z_impl_z_log_msg_runtime_vcreate>
}
    a6aa:	b007      	add	sp, #28
    a6ac:	f85d fb04 	ldr.w	pc, [sp], #4

0000a6b0 <adc_context_on_timer_expired>:
{
    a6b0:	b410      	push	{r4}
    a6b2:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    a6b4:	3808      	subs	r0, #8
    a6b6:	f3bf 8f5b 	dmb	ish
    a6ba:	e850 2f00 	ldrex	r2, [r0]
    a6be:	1c51      	adds	r1, r2, #1
    a6c0:	e840 1400 	strex	r4, r1, [r0]
    a6c4:	2c00      	cmp	r4, #0
    a6c6:	d1f8      	bne.n	a6ba <adc_context_on_timer_expired+0xa>
    a6c8:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    a6cc:	b912      	cbnz	r2, a6d4 <adc_context_on_timer_expired+0x24>
}
    a6ce:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
    a6d0:	f7f9 bde0 	b.w	4294 <adc_context_start_sampling>
		ctx->status = -EBUSY;
    a6d4:	f06f 020f 	mvn.w	r2, #15
}
    a6d8:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
    a6da:	669a      	str	r2, [r3, #104]	; 0x68
}
    a6dc:	4770      	bx	lr

0000a6de <set_on_state>:
	__asm__ volatile(
    a6de:	f04f 0320 	mov.w	r3, #32
    a6e2:	f3ef 8211 	mrs	r2, BASEPRI
    a6e6:	f383 8812 	msr	BASEPRI_MAX, r3
    a6ea:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    a6ee:	6803      	ldr	r3, [r0, #0]
    a6f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a6f4:	f043 0302 	orr.w	r3, r3, #2
    a6f8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    a6fa:	f382 8811 	msr	BASEPRI, r2
    a6fe:	f3bf 8f6f 	isb	sy
}
    a702:	4770      	bx	lr

0000a704 <async_start>:
{
    a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a706:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    a708:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    a70a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    a70c:	f04f 0520 	mov.w	r5, #32
    a710:	f3ef 8611 	mrs	r6, BASEPRI
    a714:	f385 8812 	msr	BASEPRI_MAX, r5
    a718:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a71c:	250c      	movs	r5, #12
    a71e:	4369      	muls	r1, r5
    a720:	440c      	add	r4, r1
    a722:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    a724:	f005 0c07 	and.w	ip, r5, #7
    a728:	f1bc 0f01 	cmp.w	ip, #1
    a72c:	d10b      	bne.n	a746 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    a72e:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
    a730:	f386 8811 	msr	BASEPRI, r6
    a734:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    a738:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    a73c:	6843      	ldr	r3, [r0, #4]
    a73e:	585b      	ldr	r3, [r3, r1]
    a740:	4798      	blx	r3
	return 0;
    a742:	2000      	movs	r0, #0
}
    a744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    a746:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    a74a:	42af      	cmp	r7, r5
    a74c:	f386 8811 	msr	BASEPRI, r6
    a750:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    a754:	bf0c      	ite	eq
    a756:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    a75a:	f04f 30ff 	movne.w	r0, #4294967295
    a75e:	e7f1      	b.n	a744 <async_start+0x40>

0000a760 <api_start>:
{
    a760:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    a762:	2480      	movs	r4, #128	; 0x80
    a764:	9400      	str	r4, [sp, #0]
    a766:	f7ff ffcd 	bl	a704 <async_start>
}
    a76a:	b002      	add	sp, #8
    a76c:	bd10      	pop	{r4, pc}

0000a76e <onoff_started_callback>:
	return &data->mgr[type];
    a76e:	6900      	ldr	r0, [r0, #16]
    a770:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    a772:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    a776:	2100      	movs	r1, #0
    a778:	4710      	bx	r2

0000a77a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    a77a:	2000      	movs	r0, #0
    a77c:	f7fb bb7e 	b.w	5e7c <nrfx_clock_start>

0000a780 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    a780:	2000      	movs	r0, #0
    a782:	f7fb bbd9 	b.w	5f38 <nrfx_clock_stop>

0000a786 <blocking_start_callback>:
{
    a786:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    a788:	f7fd bb2e 	b.w	7de8 <z_impl_k_sem_give>

0000a78c <api_stop>:
	return stop(dev, subsys, CTX_API);
    a78c:	2280      	movs	r2, #128	; 0x80
    a78e:	f7fa b81d 	b.w	47cc <stop>

0000a792 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a792:	6843      	ldr	r3, [r0, #4]
    a794:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    a796:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    a79a:	600b      	str	r3, [r1, #0]
}
    a79c:	2000      	movs	r0, #0
    a79e:	4770      	bx	lr

0000a7a0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a7a0:	6843      	ldr	r3, [r0, #4]
    a7a2:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    a7a4:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    a7a8:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    a7ac:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    a7b0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    a7b4:	2000      	movs	r0, #0
    a7b6:	4770      	bx	lr

0000a7b8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a7b8:	6843      	ldr	r3, [r0, #4]
    a7ba:	685b      	ldr	r3, [r3, #4]
}
    a7bc:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    a7be:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    a7c2:	4770      	bx	lr

0000a7c4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a7c4:	6843      	ldr	r3, [r0, #4]
    a7c6:	685b      	ldr	r3, [r3, #4]
}
    a7c8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    a7ca:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    a7ce:	4770      	bx	lr

0000a7d0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a7d0:	6843      	ldr	r3, [r0, #4]
    a7d2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    a7d4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    a7d8:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    a7dc:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    a7de:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    a7e2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    a7e6:	2000      	movs	r0, #0
    a7e8:	4770      	bx	lr

0000a7ea <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    a7ea:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    a7ec:	6843      	ldr	r3, [r0, #4]
    a7ee:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    a7f0:	7a05      	ldrb	r5, [r0, #8]
    a7f2:	6844      	ldr	r4, [r0, #4]
    a7f4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    a7f8:	42a3      	cmp	r3, r4
    a7fa:	d302      	bcc.n	a802 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    a7fc:	f06f 0001 	mvn.w	r0, #1
}
    a800:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    a802:	795c      	ldrb	r4, [r3, #5]
    a804:	428c      	cmp	r4, r1
    a806:	d001      	beq.n	a80c <pinctrl_lookup_state+0x22>
		(*state)++;
    a808:	3308      	adds	r3, #8
    a80a:	e7f0      	b.n	a7ee <pinctrl_lookup_state+0x4>
			return 0;
    a80c:	2000      	movs	r0, #0
    a80e:	e7f7      	b.n	a800 <pinctrl_lookup_state+0x16>

0000a810 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    a810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a814:	4615      	mov	r5, r2
    a816:	b085      	sub	sp, #20
    a818:	4682      	mov	sl, r0
    a81a:	eb00 0881 	add.w	r8, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a81e:	f04f 0901 	mov.w	r9, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    a822:	45d0      	cmp	r8, sl
    a824:	d103      	bne.n	a82e <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    a826:	2000      	movs	r0, #0
}
    a828:	b005      	add	sp, #20
    a82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    a82e:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    a832:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    a836:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
    a83a:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    a83c:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
    a840:	bf08      	it	eq
    a842:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    a846:	2b22      	cmp	r3, #34	; 0x22
    a848:	f200 808e 	bhi.w	a968 <pinctrl_configure_pins+0x158>
    a84c:	e8df f003 	tbb	[pc, r3]
    a850:	3a241f12 	.word	0x3a241f12
    a854:	8c3a3627 	.word	0x8c3a3627
    a858:	3d8c8c8c 	.word	0x3d8c8c8c
    a85c:	8c8c8c62 	.word	0x8c8c8c62
    a860:	8c8c8c8c 	.word	0x8c8c8c8c
    a864:	6e658c8c 	.word	0x6e658c8c
    a868:	8c8c7471 	.word	0x8c8c7471
    a86c:	807d778c 	.word	0x807d778c
    a870:	8683      	.short	0x8683
    a872:	89          	.byte	0x89
    a873:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    a874:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a878:	a803      	add	r0, sp, #12
    a87a:	9403      	str	r4, [sp, #12]
    a87c:	f7fa fb82 	bl	4f84 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a880:	9b03      	ldr	r3, [sp, #12]
    a882:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
    a886:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
    a88a:	2601      	movs	r6, #1
    a88c:	e002      	b.n	a894 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
    a88e:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    a892:	2600      	movs	r6, #0
    a894:	46b3      	mov	fp, r6
    a896:	e01f      	b.n	a8d8 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_UART(reg, RTS) = pin;
    a898:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
    a89c:	e7ec      	b.n	a878 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    a89e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    a8a2:	2600      	movs	r6, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a8a4:	a803      	add	r0, sp, #12
    a8a6:	9403      	str	r4, [sp, #12]
    a8a8:	f7fa fb6c 	bl	4f84 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a8ac:	9b03      	ldr	r3, [sp, #12]
    a8ae:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
    a8b2:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    a8b6:	f04f 0b01 	mov.w	fp, #1
    a8ba:	e00d      	b.n	a8d8 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    a8bc:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    a8c0:	2601      	movs	r6, #1
    a8c2:	e7ef      	b.n	a8a4 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    a8c4:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
    a8c8:	e7e3      	b.n	a892 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    a8ca:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    a8ce:	2f00      	cmp	r7, #0
    a8d0:	d1df      	bne.n	a892 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    a8d2:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    a8d4:	46b3      	mov	fp, r6
				drive = NRF_DRIVE_S0D1;
    a8d6:	2706      	movs	r7, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    a8d8:	f85a 3b04 	ldr.w	r3, [sl], #4
    a8dc:	9301      	str	r3, [sp, #4]
    a8de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    a8e2:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a8e4:	a803      	add	r0, sp, #12
    a8e6:	bf1c      	itt	ne
    a8e8:	2601      	movne	r6, #1
    a8ea:	f04f 0b00 	movne.w	fp, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    a8ee:	9403      	str	r4, [sp, #12]
    a8f0:	f7fa fb48 	bl	4f84 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a8f4:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    a8f6:	023f      	lsls	r7, r7, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a8f8:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    a8fc:	ea47 0783 	orr.w	r7, r7, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    a900:	9b03      	ldr	r3, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a902:	ea47 070b 	orr.w	r7, r7, fp
    reg->PIN_CNF[pin_number] = cnf;
    a906:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a90a:	ea47 0746 	orr.w	r7, r7, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    a90e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    a912:	e786      	b.n	a822 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    a914:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    a918:	e7d9      	b.n	a8ce <pinctrl_configure_pins+0xbe>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    a91a:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    a91e:	f8da 3000 	ldr.w	r3, [sl]
    a922:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
    a926:	2b00      	cmp	r3, #0
    a928:	d0ca      	beq.n	a8c0 <pinctrl_configure_pins+0xb0>
    a92a:	e7a5      	b.n	a878 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    a92c:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    a930:	e7f5      	b.n	a91e <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    a932:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    a936:	e7f2      	b.n	a91e <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    a938:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
    a93c:	e7ef      	b.n	a91e <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    a93e:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    a942:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    a944:	f04f 0b00 	mov.w	fp, #0
    a948:	e7c6      	b.n	a8d8 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    a94a:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
    a94e:	e793      	b.n	a878 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    a950:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
    a954:	e7f5      	b.n	a942 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    a956:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
    a95a:	e7f2      	b.n	a942 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    a95c:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
    a960:	e7ef      	b.n	a942 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    a962:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
    a966:	e7ec      	b.n	a942 <pinctrl_configure_pins+0x132>
		switch (NRF_GET_FUN(pins[i])) {
    a968:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a96c:	e75c      	b.n	a828 <pinctrl_configure_pins+0x18>

0000a96e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    a96e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    a970:	ab0b      	add	r3, sp, #44	; 0x2c
    a972:	9305      	str	r3, [sp, #20]
    a974:	9303      	str	r3, [sp, #12]
    a976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a978:	9302      	str	r3, [sp, #8]
    a97a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a97c:	9301      	str	r3, [sp, #4]
    a97e:	2300      	movs	r3, #0
    a980:	9300      	str	r3, [sp, #0]
    a982:	4618      	mov	r0, r3
    a984:	f7f7 ffda 	bl	293c <z_impl_z_log_msg_runtime_vcreate>
}
    a988:	b007      	add	sp, #28
    a98a:	f85d fb04 	ldr.w	pc, [sp], #4

0000a98e <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    a98e:	6902      	ldr	r2, [r0, #16]
{
    a990:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    a992:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    a996:	e883 0003 	stmia.w	r3, {r0, r1}
}
    a99a:	2000      	movs	r0, #0
    a99c:	4770      	bx	lr

0000a99e <uarte_nrfx_err_check>:
	return config->uarte_regs;
    a99e:	6843      	ldr	r3, [r0, #4]
    a9a0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    a9a2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    a9a6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    a9aa:	4770      	bx	lr

0000a9ac <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    a9ac:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    a9ae:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    a9b0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a9b2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    a9b6:	b150      	cbz	r0, a9ce <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    a9b8:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a9ba:	2000      	movs	r0, #0
    a9bc:	7812      	ldrb	r2, [r2, #0]
    a9be:	700a      	strb	r2, [r1, #0]
    a9c0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    a9c4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a9c8:	2201      	movs	r2, #1
    a9ca:	601a      	str	r2, [r3, #0]
	return 0;
    a9cc:	4770      	bx	lr
		return -1;
    a9ce:	f04f 30ff 	mov.w	r0, #4294967295
}
    a9d2:	4770      	bx	lr

0000a9d4 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    a9d4:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    a9d6:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a9d8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    a9dc:	b940      	cbnz	r0, a9f0 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    a9de:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    a9e0:	079b      	lsls	r3, r3, #30
    a9e2:	d406      	bmi.n	a9f2 <is_tx_ready.isra.0+0x1e>
    a9e4:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    a9e8:	3800      	subs	r0, #0
    a9ea:	bf18      	it	ne
    a9ec:	2001      	movne	r0, #1
    a9ee:	4770      	bx	lr
    a9f0:	2001      	movs	r0, #1
}
    a9f2:	4770      	bx	lr

0000a9f4 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    a9f4:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    a9f6:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    a9f8:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    a9fc:	05c9      	lsls	r1, r1, #23
    a9fe:	d518      	bpl.n	aa32 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    aa00:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    aa04:	b1a9      	cbz	r1, aa32 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    aa06:	f04f 0020 	mov.w	r0, #32
    aa0a:	f3ef 8111 	mrs	r1, BASEPRI
    aa0e:	f380 8812 	msr	BASEPRI_MAX, r0
    aa12:	f3bf 8f6f 	isb	sy
    aa16:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    aa1a:	b130      	cbz	r0, aa2a <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aa1c:	2000      	movs	r0, #0
    aa1e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    aa22:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    aa26:	2001      	movs	r0, #1
    aa28:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    aa2a:	f381 8811 	msr	BASEPRI, r1
    aa2e:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    aa32:	6852      	ldr	r2, [r2, #4]
    aa34:	06d2      	lsls	r2, r2, #27
    aa36:	d515      	bpl.n	aa64 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    aa38:	f04f 0120 	mov.w	r1, #32
    aa3c:	f3ef 8211 	mrs	r2, BASEPRI
    aa40:	f381 8812 	msr	BASEPRI_MAX, r1
    aa44:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    aa48:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    aa4c:	b111      	cbz	r1, aa54 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    aa4e:	2100      	movs	r1, #0
    aa50:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    aa54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    aa58:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    aa5c:	f382 8811 	msr	BASEPRI, r2
    aa60:	f3bf 8f6f 	isb	sy
}
    aa64:	4770      	bx	lr

0000aa66 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    aa66:	4770      	bx	lr

0000aa68 <sys_clock_cycle_get_32>:
{
    aa68:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    aa6a:	f7fa fe1d 	bl	56a8 <z_nrf_rtc_timer_read>
}
    aa6e:	bd08      	pop	{r3, pc}

0000aa70 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    aa70:	f7ff ba66 	b.w	9f40 <nrf_cc3xx_platform_init_no_rng>

0000aa74 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    aa74:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    aa76:	f7f8 fbdd 	bl	3234 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    aa7a:	f7f8 fcb1 	bl	33e0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    aa7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    aa82:	f7ff ba5d 	b.w	9f40 <nrf_cc3xx_platform_init_no_rng>

0000aa86 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    aa86:	4700      	bx	r0

0000aa88 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    aa88:	f000 b92c 	b.w	ace4 <z_impl_k_busy_wait>

0000aa8c <nrf_gpio_pin_present_check>:
    switch (port)
    aa8c:	0943      	lsrs	r3, r0, #5
    aa8e:	d00b      	beq.n	aaa8 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    aa90:	2b01      	cmp	r3, #1
    aa92:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aa96:	bf18      	it	ne
    aa98:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    aa9a:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    aa9e:	fa23 f000 	lsr.w	r0, r3, r0
}
    aaa2:	f000 0001 	and.w	r0, r0, #1
    aaa6:	4770      	bx	lr
    switch (port)
    aaa8:	f04f 33ff 	mov.w	r3, #4294967295
    aaac:	e7f5      	b.n	aa9a <nrf_gpio_pin_present_check+0xe>

0000aaae <pin_is_task_output>:
{
    aaae:	b508      	push	{r3, lr}
    aab0:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    aab2:	f7fb faa7 	bl	6004 <pin_is_output>
    aab6:	b110      	cbz	r0, aabe <pin_is_task_output+0x10>
    aab8:	4610      	mov	r0, r2
    aaba:	f7fb fa8d 	bl	5fd8 <pin_in_use_by_te>
}
    aabe:	f000 0001 	and.w	r0, r0, #1
    aac2:	bd08      	pop	{r3, pc}

0000aac4 <nrf_gpio_reconfigure>:
{
    aac4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    aac8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    aaca:	a801      	add	r0, sp, #4
{
    aacc:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    aad0:	460c      	mov	r4, r1
    aad2:	4617      	mov	r7, r2
    aad4:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    aad6:	f7fb fb17 	bl	6108 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    aada:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    aadc:	1e39      	subs	r1, r7, #0
    aade:	bf18      	it	ne
    aae0:	2101      	movne	r1, #1
    aae2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    aae6:	1e23      	subs	r3, r4, #0
    aae8:	bf18      	it	ne
    aaea:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    aaec:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    aaee:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    aaf2:	bf14      	ite	ne
    aaf4:	210c      	movne	r1, #12
    aaf6:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    aaf8:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    aafa:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    aafe:	bf14      	ite	ne
    ab00:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    ab04:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    ab06:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    ab0a:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    ab0e:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    ab12:	bf14      	ite	ne
    ab14:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    ab18:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    ab1a:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    ab1c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    ab20:	b104      	cbz	r4, ab24 <nrf_gpio_reconfigure+0x60>
    ab22:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    ab24:	b10f      	cbz	r7, ab2a <nrf_gpio_reconfigure+0x66>
    ab26:	783f      	ldrb	r7, [r7, #0]
    ab28:	007f      	lsls	r7, r7, #1
    ab2a:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    ab2c:	b10e      	cbz	r6, ab32 <nrf_gpio_reconfigure+0x6e>
    ab2e:	7836      	ldrb	r6, [r6, #0]
    ab30:	00b6      	lsls	r6, r6, #2
    ab32:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    ab34:	b18d      	cbz	r5, ab5a <nrf_gpio_reconfigure+0x96>
    ab36:	7829      	ldrb	r1, [r5, #0]
    ab38:	0209      	lsls	r1, r1, #8
    ab3a:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    ab3c:	f1b8 0f00 	cmp.w	r8, #0
    ab40:	d003      	beq.n	ab4a <nrf_gpio_reconfigure+0x86>
    ab42:	f898 8000 	ldrb.w	r8, [r8]
    ab46:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    ab4a:	4321      	orrs	r1, r4
    ab4c:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
    ab50:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    ab54:	b002      	add	sp, #8
    ab56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    ab5a:	4629      	mov	r1, r5
    ab5c:	e7ed      	b.n	ab3a <nrf_gpio_reconfigure+0x76>

0000ab5e <nrf_gpio_cfg_sense_set>:
{
    ab5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    ab60:	f10d 030f 	add.w	r3, sp, #15
    ab64:	9301      	str	r3, [sp, #4]
    ab66:	2300      	movs	r3, #0
{
    ab68:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    ab6c:	9300      	str	r3, [sp, #0]
    ab6e:	461a      	mov	r2, r3
    ab70:	4619      	mov	r1, r3
    ab72:	f7ff ffa7 	bl	aac4 <nrf_gpio_reconfigure>
}
    ab76:	b005      	add	sp, #20
    ab78:	f85d fb04 	ldr.w	pc, [sp], #4

0000ab7c <start_playback>:
{
    ab7c:	b510      	push	{r4, lr}
    ab7e:	4604      	mov	r4, r0
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    ab80:	2002      	movs	r0, #2
    ab82:	7208      	strb	r0, [r1, #8]
    p_cb->flags = flags;
    ab84:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    ab86:	6809      	ldr	r1, [r1, #0]
    ab88:	b179      	cbz	r1, abaa <start_playback+0x2e>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    ab8a:	f012 0f04 	tst.w	r2, #4
    ab8e:	bf0c      	ite	eq
    ab90:	2182      	moveq	r1, #130	; 0x82
    ab92:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    ab94:	0710      	lsls	r0, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    ab96:	bf48      	it	mi
    ab98:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    ab9c:	06d0      	lsls	r0, r2, #27
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
    ab9e:	6820      	ldr	r0, [r4, #0]
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    aba0:	bf48      	it	mi
    aba2:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    aba6:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    abaa:	6821      	ldr	r1, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    abac:	2000      	movs	r0, #0
    abae:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    abb2:	f012 0f80 	tst.w	r2, #128	; 0x80
    abb6:	6822      	ldr	r2, [r4, #0]
    abb8:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    abbc:	bf06      	itte	eq
    abbe:	2101      	moveq	r1, #1
    abc0:	50d1      	streq	r1, [r2, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    abc2:	18d0      	addne	r0, r2, r3
}
    abc4:	bd10      	pop	{r4, pc}

0000abc6 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    abc6:	f7fc bb55 	b.w	7274 <_DoInit>

0000abca <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    abca:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    abcc:	f7ff fffb 	bl	abc6 <SEGGER_RTT_Init>

	return 0;
}
    abd0:	2000      	movs	r0, #0
    abd2:	bd08      	pop	{r3, pc}

0000abd4 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    abd4:	4770      	bx	lr

0000abd6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    abd6:	b140      	cbz	r0, abea <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    abd8:	68c3      	ldr	r3, [r0, #12]
    abda:	7858      	ldrb	r0, [r3, #1]
    abdc:	f010 0001 	ands.w	r0, r0, #1
    abe0:	bf1e      	ittt	ne
    abe2:	7818      	ldrbne	r0, [r3, #0]
    abe4:	fab0 f080 	clzne	r0, r0
    abe8:	0940      	lsrne	r0, r0, #5
}
    abea:	4770      	bx	lr

0000abec <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    abec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    abee:	ab0b      	add	r3, sp, #44	; 0x2c
    abf0:	9305      	str	r3, [sp, #20]
    abf2:	9303      	str	r3, [sp, #12]
    abf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    abf6:	9302      	str	r3, [sp, #8]
    abf8:	2300      	movs	r3, #0
    abfa:	e9cd 3300 	strd	r3, r3, [sp]
    abfe:	2201      	movs	r2, #1
    ac00:	4618      	mov	r0, r3
    ac02:	f7f7 fe9b 	bl	293c <z_impl_z_log_msg_runtime_vcreate>
}
    ac06:	b007      	add	sp, #28
    ac08:	f85d fb04 	ldr.w	pc, [sp], #4

0000ac0c <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
    ac0c:	f000 b915 	b.w	ae3a <memset>

0000ac10 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ac10:	f000 b905 	b.w	ae1e <memcpy>

0000ac14 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    ac14:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
    ac18:	4313      	orrs	r3, r2
    ac1a:	f013 0303 	ands.w	r3, r3, #3
    ac1e:	d10c      	bne.n	ac3a <create_free_list+0x26>
	slab->free_list = NULL;
    ac20:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    ac22:	68c1      	ldr	r1, [r0, #12]
    ac24:	4299      	cmp	r1, r3
    ac26:	d801      	bhi.n	ac2c <create_free_list+0x18>
	return 0;
    ac28:	2000      	movs	r0, #0
    ac2a:	4770      	bx	lr
		*(char **)p = slab->free_list;
    ac2c:	6981      	ldr	r1, [r0, #24]
    ac2e:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    ac30:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
    ac32:	6182      	str	r2, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    ac34:	3301      	adds	r3, #1
		p += slab->block_size;
    ac36:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    ac38:	e7f3      	b.n	ac22 <create_free_list+0xe>
		return -EINVAL;
    ac3a:	f06f 0015 	mvn.w	r0, #21
}
    ac3e:	4770      	bx	lr

0000ac40 <k_mem_slab_init>:
{
    ac40:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    ac42:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->num_used = 0U;
    ac46:	2300      	movs	r3, #0
	slab->buffer = buffer;
    ac48:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    ac4a:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    ac4c:	6083      	str	r3, [r0, #8]
{
    ac4e:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    ac50:	f7ff ffe0 	bl	ac14 <create_free_list>
	if (rc < 0) {
    ac54:	2800      	cmp	r0, #0
    ac56:	bfa8      	it	ge
    ac58:	e9c4 4400 	strdge	r4, r4, [r4]
}
    ac5c:	bd10      	pop	{r4, pc}

0000ac5e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ac5e:	f3ef 8005 	mrs	r0, IPSR
}
    ac62:	3800      	subs	r0, #0
    ac64:	bf18      	it	ne
    ac66:	2001      	movne	r0, #1
    ac68:	4770      	bx	lr

0000ac6a <z_impl_k_thread_name_set>:
}
    ac6a:	f06f 0057 	mvn.w	r0, #87	; 0x57
    ac6e:	4770      	bx	lr

0000ac70 <k_thread_name_get>:
}
    ac70:	2000      	movs	r0, #0
    ac72:	4770      	bx	lr

0000ac74 <z_impl_k_thread_start>:
	z_sched_start(thread);
    ac74:	f7fd bb3a 	b.w	82ec <z_sched_start>

0000ac78 <z_pm_save_idle_exit>:
{
    ac78:	b508      	push	{r3, lr}
	pm_system_resume();
    ac7a:	f7f8 f99f 	bl	2fbc <pm_system_resume>
}
    ac7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    ac82:	f7ff bef0 	b.w	aa66 <sys_clock_idle_exit>

0000ac86 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    ac86:	f990 300e 	ldrsb.w	r3, [r0, #14]
    ac8a:	428b      	cmp	r3, r1
    ac8c:	d001      	beq.n	ac92 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    ac8e:	f7fd be1d 	b.w	88cc <z_set_prio>
}
    ac92:	2000      	movs	r0, #0
    ac94:	4770      	bx	lr

0000ac96 <z_impl_k_mutex_init>:
{
    ac96:	4603      	mov	r3, r0
	mutex->owner = NULL;
    ac98:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    ac9a:	e9c3 0002 	strd	r0, r0, [r3, #8]
    ac9e:	e9c3 3300 	strd	r3, r3, [r3]
}
    aca2:	4770      	bx	lr

0000aca4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    aca4:	4603      	mov	r3, r0
    aca6:	b920      	cbnz	r0, acb2 <z_reschedule_irqlock+0xe>
    aca8:	f3ef 8205 	mrs	r2, IPSR
    acac:	b90a      	cbnz	r2, acb2 <z_reschedule_irqlock+0xe>
    acae:	f7f8 bca1 	b.w	35f4 <arch_swap>
    acb2:	f383 8811 	msr	BASEPRI, r3
    acb6:	f3bf 8f6f 	isb	sy
}
    acba:	4770      	bx	lr

0000acbc <z_reschedule_unlocked>:
	__asm__ volatile(
    acbc:	f04f 0320 	mov.w	r3, #32
    acc0:	f3ef 8011 	mrs	r0, BASEPRI
    acc4:	f383 8812 	msr	BASEPRI_MAX, r3
    acc8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    accc:	f7ff bfea 	b.w	aca4 <z_reschedule_irqlock>

0000acd0 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    acd0:	2101      	movs	r1, #1
    acd2:	3818      	subs	r0, #24
    acd4:	f7fd bf60 	b.w	8b98 <z_sched_wake_thread>

0000acd8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    acd8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    acda:	f7fe fd65 	bl	97a8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    acde:	bd08      	pop	{r3, pc}

0000ace0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    ace0:	f7fe bd62 	b.w	97a8 <sys_clock_tick_get>

0000ace4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    ace4:	b108      	cbz	r0, acea <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    ace6:	f7f9 bacb 	b.w	4280 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    acea:	4770      	bx	lr

0000acec <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    acec:	b510      	push	{r4, lr}
    acee:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    acf0:	f7fe fc1a 	bl	9528 <z_abort_timeout>

	if (inactive) {
    acf4:	b9b0      	cbnz	r0, ad24 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    acf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    acf8:	b10b      	cbz	r3, acfe <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    acfa:	4620      	mov	r0, r4
    acfc:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    acfe:	f104 0018 	add.w	r0, r4, #24
    ad02:	f7fd ffa1 	bl	8c48 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    ad06:	b168      	cbz	r0, ad24 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    ad08:	f7fd fa20 	bl	814c <z_ready_thread>
    ad0c:	f04f 0320 	mov.w	r3, #32
    ad10:	f3ef 8011 	mrs	r0, BASEPRI
    ad14:	f383 8812 	msr	BASEPRI_MAX, r3
    ad18:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    ad1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad20:	f7ff bfc0 	b.w	aca4 <z_reschedule_irqlock>
    ad24:	bd10      	pop	{r4, pc}

0000ad26 <signal_poll_event>:
{
    ad26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    ad2a:	6884      	ldr	r4, [r0, #8]
{
    ad2c:	4605      	mov	r5, r0
    ad2e:	460e      	mov	r6, r1
	if (poller != NULL) {
    ad30:	b144      	cbz	r4, ad44 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    ad32:	7863      	ldrb	r3, [r4, #1]
    ad34:	2b01      	cmp	r3, #1
    ad36:	d12e      	bne.n	ad96 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
    ad38:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    ad3c:	f013 0302 	ands.w	r3, r3, #2
    ad40:	d10a      	bne.n	ad58 <signal_poll_event+0x32>
		poller->is_polling = false;
    ad42:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    ad44:	68eb      	ldr	r3, [r5, #12]
    ad46:	f3c3 3286 	ubfx	r2, r3, #14, #7
    ad4a:	4316      	orrs	r6, r2
	event->poller = NULL;
    ad4c:	2000      	movs	r0, #0
	event->state |= state;
    ad4e:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
    ad52:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    ad54:	60eb      	str	r3, [r5, #12]
	return retcode;
    ad56:	e03e      	b.n	add6 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
    ad58:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    ad5c:	f1b3 3fff 	cmp.w	r3, #4294967295
    ad60:	bf08      	it	eq
    ad62:	f112 0f02 	cmneq.w	r2, #2
    ad66:	d032      	beq.n	adce <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    ad68:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
    ad6c:	4640      	mov	r0, r8
    ad6e:	f7fd fec7 	bl	8b00 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    ad72:	2e08      	cmp	r6, #8
    ad74:	bf0c      	ite	eq
    ad76:	f06f 0303 	mvneq.w	r3, #3
    ad7a:	2300      	movne	r3, #0
    ad7c:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ad7e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    ad82:	06db      	lsls	r3, r3, #27
    ad84:	d109      	bne.n	ad9a <signal_poll_event+0x74>
    ad86:	f854 7c48 	ldr.w	r7, [r4, #-72]
    ad8a:	b937      	cbnz	r7, ad9a <signal_poll_event+0x74>
	z_ready_thread(thread);
    ad8c:	4640      	mov	r0, r8
    ad8e:	f7fd f9dd 	bl	814c <z_ready_thread>
		poller->is_polling = false;
    ad92:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    ad94:	e7d6      	b.n	ad44 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    ad96:	2b02      	cmp	r3, #2
    ad98:	d001      	beq.n	ad9e <signal_poll_event+0x78>
		poller->is_polling = false;
    ad9a:	2300      	movs	r3, #0
    ad9c:	e7d1      	b.n	ad42 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    ad9e:	7823      	ldrb	r3, [r4, #0]
    ada0:	2b00      	cmp	r3, #0
    ada2:	d0cf      	beq.n	ad44 <signal_poll_event+0x1e>
    ada4:	f854 7c04 	ldr.w	r7, [r4, #-4]
    ada8:	2f00      	cmp	r7, #0
    adaa:	d0f2      	beq.n	ad92 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    adac:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    adb0:	f1a4 0914 	sub.w	r9, r4, #20
    adb4:	f104 0014 	add.w	r0, r4, #20
    adb8:	f7fe fbb6 	bl	9528 <z_abort_timeout>
		twork->poll_result = 0;
    adbc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
    adc0:	4649      	mov	r1, r9
    adc2:	4638      	mov	r0, r7
    adc4:	f7fe fffa 	bl	9dbc <z_work_submit_to_queue>
		poller->is_polling = false;
    adc8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    adcc:	e7ba      	b.n	ad44 <signal_poll_event+0x1e>
		poller->is_polling = false;
    adce:	2300      	movs	r3, #0
    add0:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    add2:	f06f 000a 	mvn.w	r0, #10
}
    add6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000adda <z_handle_obj_poll_events>:
{
    adda:	4603      	mov	r3, r0
	return list->head == list;
    addc:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    adde:	4283      	cmp	r3, r0
    ade0:	d008      	beq.n	adf4 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    ade2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    ade6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    ade8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    adea:	2300      	movs	r3, #0
	node->prev = NULL;
    adec:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    adf0:	f7ff bf99 	b.w	ad26 <signal_poll_event>
}
    adf4:	4770      	bx	lr

0000adf6 <boot_banner>:
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
#endif /* CONFIG_BOOT_BANNER */
}
    adf6:	4770      	bx	lr

0000adf8 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    adf8:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    adfa:	2301      	movs	r3, #1
    adfc:	408b      	lsls	r3, r1
    adfe:	ea22 0303 	bic.w	r3, r2, r3
    ae02:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    ae04:	fa22 f001 	lsr.w	r0, r2, r1
}
    ae08:	f000 0001 	and.w	r0, r0, #1
    ae0c:	4770      	bx	lr

0000ae0e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    ae0e:	b120      	cbz	r0, ae1a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    ae10:	2200      	movs	r2, #0
    ae12:	4611      	mov	r1, r2
    ae14:	3088      	adds	r0, #136	; 0x88
    ae16:	f7fe b9f7 	b.w	9208 <z_sched_wake>
}
    ae1a:	4770      	bx	lr

0000ae1c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    ae1c:	4770      	bx	lr

0000ae1e <memcpy>:
    ae1e:	440a      	add	r2, r1
    ae20:	4291      	cmp	r1, r2
    ae22:	f100 33ff 	add.w	r3, r0, #4294967295
    ae26:	d100      	bne.n	ae2a <memcpy+0xc>
    ae28:	4770      	bx	lr
    ae2a:	b510      	push	{r4, lr}
    ae2c:	f811 4b01 	ldrb.w	r4, [r1], #1
    ae30:	f803 4f01 	strb.w	r4, [r3, #1]!
    ae34:	4291      	cmp	r1, r2
    ae36:	d1f9      	bne.n	ae2c <memcpy+0xe>
    ae38:	bd10      	pop	{r4, pc}

0000ae3a <memset>:
    ae3a:	4402      	add	r2, r0
    ae3c:	4603      	mov	r3, r0
    ae3e:	4293      	cmp	r3, r2
    ae40:	d100      	bne.n	ae44 <memset+0xa>
    ae42:	4770      	bx	lr
    ae44:	f803 1b01 	strb.w	r1, [r3], #1
    ae48:	e7f9      	b.n	ae3e <memset+0x4>

0000ae4a <strnlen>:
    ae4a:	b510      	push	{r4, lr}
    ae4c:	4602      	mov	r2, r0
    ae4e:	4401      	add	r1, r0
    ae50:	428a      	cmp	r2, r1
    ae52:	4613      	mov	r3, r2
    ae54:	d003      	beq.n	ae5e <strnlen+0x14>
    ae56:	781c      	ldrb	r4, [r3, #0]
    ae58:	3201      	adds	r2, #1
    ae5a:	2c00      	cmp	r4, #0
    ae5c:	d1f8      	bne.n	ae50 <strnlen+0x6>
    ae5e:	1a18      	subs	r0, r3, r0
    ae60:	bd10      	pop	{r4, pc}
	...
